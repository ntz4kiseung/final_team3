---------------------------------------------------------- 노랑 ----------------------------------------------------------------
CREATE TABLE ROLE
( ROLEID    VARCHAR2(10)        -- RL00000
, ROLENAME  VARCHAR2(30)
,CONSTRAINT ROLE_ROLEID_FK PRIMARY KEY(ROLEID) 
);
--==>>Table ROLE이(가) 생성되었습니다.


CREATE TABLE FAQ
(ID         NUMBER              -- FAQ_SEQ
,TITLE      VARCHAR2(100)
,CONTENTS   CLOB
,FAQDATE    DATE
,CONSTRAINT FAQ_ID_PK PRIMARY KEY(ID)
);
--==>>Table FAQ이(가) 생성되었습니다.


CREATE TABLE NOTICE 
(ID             NUMBER          -- NOTICE_SEQ
,TITLE          VARCHAR2(100)
,CONTENTS       CLOB
,NOTICEDATE     DATE
, CONSTRAINT NOTICE_ID_PK PRIMARY KEY(ID)
);
--==>> Table NOTICE이(가) 생성되었습니다.


CREATE TABLE GENDER
(GENDERID   VARCHAR2(10)        -- GD00000
,GENDER    VARCHAR2(40)
,CONSTRAINT GENDER_GENDERID_PK PRIMARY KEY(GENDERID)
);
--==>> Table GENDER이(가) 생성되었습니다.



CREATE TABLE ADDR_SI
(ADDRSIID       VARCHAR2(10)    -- SI00000
,ADDRSINAME    VARCHAR2(30)
,CONSTRAINT ADDR_SI_ADDRSIID_PK PRIMARY KEY(ADDRSIID)
);
--==>> Table ADDR_SI이(가) 생성되었습니다.




CREATE TABLE INTEREST_MAIN
(INTERMAINID     VARCHAR2(10)   -- IM00000
,INTERMAINNAME   VARCHAR2(40)
,CONSTRAINT INTEREST_MAIN_INTERMAINID_PK PRIMARY KEY(INTERMAINID)
);
--==>> Table INTEREST_MAIN이(가) 생성되었습니다.



CREATE TABLE CERTIFICATION_CATE
(CERTIID    VARCHAR2(10)        -- CT00000
,CERTINAME   VARCHAR2(40)
,CONSTRAINT CERTI_CATE_CERTIID_PK PRIMARY KEY(CERTIID)
);
--==>> Table CERTIFICATION_CATE이(가) 생성되었습니다.



CREATE TABLE MOOD
(MOODID     VARCHAR2(10)        -- MD00000
, MOODNAME  VARCHAR2(40)
,CONSTRAINT MOOD_MOODID_PK PRIMARY KEY(MOODID)
);
--==>> Table MOOD이(가) 생성되었습니다.


CREATE TABLE DRINK 
(DRINKID   VARCHAR2(10)         -- DR00000
, DRINK    VARCHAR2(40)
,CONSTRAINT DRINK_DRINKID_PK PRIMARY KEY(DRINKID)
);
--==>> Table DRINK이(가) 생성되었습니다.

CREATE TABLE STATUS
(STATUSID   VARCHAR2(10)        -- ST00000
, STATUSNAME VARCHAR2(40)
, CONSTRAINT STATUSID_STATUSID_PK PRIMARY KEY(STATUSID)
);
--==>> Table STATUSID이(가) 생성되었습니다.


CREATE TABLE SAME_GENDER
(SAMEGENDERID   VARCHAR2(10)        -- SG00000
, SAMEGENDER    VARCHAR2(40)
,CONSTRAINT SAME_GENDER_SAMEGENDERID_PK PRIMARY KEY(SAMEGENDERID)
);
--==>> Table SAME_GENDER이(가) 생성되었습니다.


CREATE TABLE REPORT_CATE
(REPORTCATEID   VARCHAR2(10)        -- RC00000
, REPORTCATENAME VARCHAR2(40)
,CONSTRAINT REPORT_CATE_REPORTCATEID_PK PRIMARY KEY(REPORTCATEID)
);
--==>> Table REPORT_CATE이(가) 생성되었습니다.


CREATE TABLE REPLY_USER_TYPE
(USERTYPEID   VARCHAR2(10)          -- RU00000
, USERTYPENAME VARCHAR2(40)
,CONSTRAINT REPLY_USER_TYPE_USERTYPEID_PK PRIMARY KEY(USERTYPEID)
);
--==>> Table REPLY_USER_TYPE이(가) 생성되었습니다.


CREATE TABLE POINT_CATE
(BADGEPOINTCATEID   VARCHAR2(10)        -- BC00000
, BADGEPOINTCATENAME  VARCHAR2(40)
,CONSTRAINT POINT_CATE_BADGEPOINTCATEID_PK PRIMARY KEY(BADGEPOINTCATEID)
);
--==>> Table POINT_CATE이(가) 생성되었습니다

---------------------------------------------------------- 초록 ----------------------------------------------------------------

CREATE TABLE LOGIN
( USERID    VARCHAR2(30)                -- 아이디
, PWD       VARCHAR2(30)
, ROLEID    VARCHAR2(10)
, CONSTRAINT LOGIN_USERID_PK PRIMARY KEY(USERID)
);


CREATE TABLE ADDR_GU
( ADDRGUID      VARCHAR2(10)            -- GU00000
, ADDRGUNAME    VARCHAR2(30)
, ADDRSIID      VARCHAR2(10)
, CONSTRAINT ADDR_GU_ADDRGUID_PK PRIMARY KEY(ADDRGUID)
);

CREATE TABLE INTEREST_SUB
( INTERSUBID      VARCHAR2(10)          -- IS00000
, INTERSUBNAME    VARCHAR2(40)
, INTERMAINID     VARCHAR2(10)
, CONSTRAINT INTEREST_SUB_INTERSUBID_PK PRIMARY KEY(INTERSUBID)
);


CREATE TABLE POINT
( BADGEPOINTID      VARCHAR2(10)        -- BP00000
, BADGEPOINTNAME    VARCHAR2(40)
, BADGEPOINTCATEID  VARCHAR2(10)
, BADGEPOINTDESC1   VARCHAR2(1000)
, BADGEPOINTDESC2   VARCHAR2(1000)
, URL               VARCHAR2(100)
, CONDITION         NUMBER
, CONSTRAINT POINT_BADGEPOINTID_PK PRIMARY KEY(BADGEPOINTID)
);


---------------------------------------------------------- 파랑 ----------------------------------------------------------------

--○ ADMIN 파랑
CREATE TABLE ADMIN
(USERID VARCHAR2(10)                -- 아이디
,CONSTRAINT ADMIN_USERID_PK PRIMARY KEY(USERID)
);


--○ USER_ESSENTIAL 파랑
CREATE TABLE USER_ESSENTIAL
(USERID VARCHAR2(30)                -- 아이디
,NICKNAME VARCHAR2(30)
,NAME VARCHAR2(40)
,BIRTH DATE
,GENDERID VARCHAR2(10)
,TEL VARCHAR2(20)
,EMAIL VARCHAR2(40)
,REGISTERDATE DATE
,BADGELOGID VARCHAR2(10)
,CONSTRAINT USER_USERID_PK PRIMARY KEY(USERID)
);



---------------------------------------------------------- 보라 ----------------------------------------------------------------

--○ direct_question 보라
CREATE TABLE DIRECT_QUESTION
(ID NUMBER                      -- DIRECT_QUESTION_SEQ
,TITLE VARCHAR2(100)
,USERID VARCHAR2(30)
,CONTENTS CLOB
,DIRECTQUESTIONDATE DATE
,CONSTRAINT DIRECTQUESTION_ID_PK PRIMARY KEY(ID)
);

--○ USER_ADDR 보라
CREATE TABLE USER_ADDR
(ID NUMBER                      -- USER_ADDR_SEQ
,USERID VARCHAR2(30)
,ADDRGUID VARCHAR2(10)
,CONSTRAINT USERADDR_ID_PK PRIMARY KEY(ID)
);
--○ USER_SUB 보라
CREATE TABLE USER_SUB
(ID NUMBER                      -- USER_SUB_SEQ
,USERID VARCHAR2(30)
,SNS VARCHAR2(40)
,INTRODUCE VARCHAR2(4000)
,CONSTRAINT USER_SUB_ID_PK PRIMARY KEY(ID)
);

--○ USER_SUB 보라
CREATE TABLE DEL_USER
(ID NUMBER                      -- DEL_USER_SEQ
,USERID VARCHAR2(30)
,DELETEDATE DATE
,CONSTRAINT DELUSER_ID_PK PRIMARY KEY(ID)
);

--○ FOLLOW 보라
CREATE TABLE FOLLOW
(ID NUMBER                      -- FOLLOW_SEQ
,GIVEUSERID VARCHAR2(30)
,TAKEUSERID VARCHAR2(30)
,FOLLOWDATE DATE
,CONSTRAINT FOLLOW_ID_PK PRIMARY KEY(ID)
);

--○ USER_INTEREST 보라
CREATE TABLE USER_INTEREST
(ID NUMBER                          -- USER_INTEREST_SEQ
,USERID VARCHAR2(30)
,INTERSUBID VARCHAR2(10)
,CONSTRAINT USER_INTEREST_ID_PK PRIMARY KEY(ID)
);


--○ USER_CERTIFICATION 보라
CREATE TABLE USER_CERTIFICATION
(ID NUMBER                          -- USER_CERTIFICATION_SEQ
,USERID VARCHAR2(30)
,CODE VARCHAR2(20)
,CERTIDATE DATE
,CERTIID VARCHAR2(40)
,CONSTRAINT USER_CERTIFICATION_ID_PK PRIMARY KEY(ID)
);

--○ MESSAGE 보라 
CREATE TABLE MESSAGE
(MESSAGEID VARCHAR2(10)             -- MS00000
,GIVEUSERID VARCHAR2(30)
,TAKEUSERID VARCHAR2(30)
,CONTENTS VARCHAR2(4000)
,SENDDATE DATE
,CHECKDATE DATE
,CONSTRAINT MESSAGE_MESSAGEID_PK PRIMARY KEY(MESSAGEID)
);


--○ POST 보라 
CREATE TABLE POST
(POSTID VARCHAR2(40)                -- PT00000
,USERID VARCHAR2(30)
,TITLE VARCHAR2(100)
,ADDRGUID VARCHAR2(10)
,ADDRDETAIL VARCHAR2(100)
,INTERSUBID VARCHAR2(10)
,INTERDETAIL VARCHAR2(100)
,MEETDATE DATE
,POSTDATE DATE
,CONTENTS CLOB
,MOODID VARCHAR2(10)
,LIMITGRADE NUMBER
,MINNUM NUMBER
,MAXNUM NUMBER
,DRINKID VARCHAR2(10)
,SAMEGENDERID VARCHAR2(10)
,CONSTRAINT POST_POSTID_PK PRIMARY KEY(POSTID)
);



---------------------------------------------------------- 주황 ----------------------------------------------------------------

CREATE TABLE DEL_MESSAGE
( ID            NUMBER                     -- DEL_MESSAGE_SEQ
, MESSAGEID     VARCHAR2(10)
, DELETEDATE    DATE
, USERID        VARCHAR2(30)
, CONSTRAINT DEL_MESSAGE_ID_PK PRIMARY KEY(ID)
);

CREATE TABLE DEL_POST
( ID            NUMBER                      -- DEL_POST_SEQ
, POSTID        VARCHAR2(10)
, DELETEDATE    DATE
, CONSTRAINT DEL_POST_ID_PK PRIMARY KEY(ID)
);

CREATE TABLE REPORT_POST
( ID            NUMBER                      -- REPORT_POST_SEQ
, POSTID        VARCHAR2(10)
, USERID        VARCHAR2(30)
, REPORTCATEID  VARCHAR2(10)
, REPORTDETAIL  VARCHAR2(4000)
, REPORTDATE    DATE
, CONSTRAINT REPORT_POST_ID_PK PRIMARY KEY(ID)
);


CREATE TABLE JOIN
( JOINID    VARCHAR2(10)                    -- JN00000
, POSTID    VARCHAR2(10)
, USERID    VARCHAR2(30)
, STATUSID  VARCHAR2(10)
, CONTENTS   VARCHAR2(4000)
, JOINDATE  DATE
, CONSTRAINT JOIN_JOINID_PK PRIMARY KEY(JOINID)
);



CREATE TABLE REVIEW
( REVIEWID      VARCHAR2(10)                -- RV00000
, POSTID        VARCHAR2(10)
, GIVEUSERID    VARCHAR2(30)
, TAKEUSERID    VARCHAR2(30)
, GRADE         NUMBER
, REVIEWDATE    DATE
, CONSTRAINT REVIEW_REVIEWID_PK PRIMARY KEY(REVIEWID)
);



---------------------------------------------------------- 분홍 ----------------------------------------------------------------

--○ REPORT_JOIN 테이블 생성
CREATE TABLE REPORT_JOIN
( ID            NUMBER                      -- REPORT_JOIN_SEQ
, JOINID        VARCHAR2(10)
, USERID        VARCHAR2(10)
, REPORTCATEID    VARCHAR2(10)
, REPORTDETAIL  VARCHAR2(4000)
, REPORTDATE    DATE
,CONSTRAINT REPORT_JOIN_ID_PK PRIMARY KEY(ID)
);
--○ DEL_JOIN 테이블 생성
CREATE TABLE DEL_JOIN
( ID        NUMBER                          -- DEL_JOIN_SEQ
, JOINID    VARCHAR2(10)
, DELETEDATE      DATE
, CONSTRAINT DEL_JOIN_ID_PK PRIMARY KEY(ID)
);
--○ REPLY 테이블 생성
CREATE TABLE REPLY
( REPLYID       VARCHAR2(10)                -- RP00000
, JOINID        VARCHAR2(10)
, CONTENTS       VARCHAR2(4000)
, REPLYDATE     DATE
, USERTYPEID    VARCHAR2(10)
, CONSTRAINT REPLY_REPLYID_PK PRIMARY KEY(REPLYID)
);

--○ REVIEW_SUB 테이블 생성
CREATE TABLE REVIEW_SUB
( ID            NUMBER                  -- REVIEW_SUB_SEQ
, REVIEWID      VARCHAR2(10)
, BADGEPOINTID  VARCHAR2(10)
, CONTENTS      VARCHAR2(4000)
, CONSTRAINT REVIEW_SUB_ID_PK PRIMARY KEY(ID)
);
--○ USER_BADGE_LOG 테이블 생성
CREATE TABLE USER_BADGE_LOG
( BADGELOGID            VARCHAR2(10)            -- BL00000
, USERID                VARCHAR2(30)
, BADGEPOINTID          VARCHAR2(10)
, GETREVIEWID           VARCHAR2(10)
, EXPIRATIONREVIEWID    VARCHAR2(10)
, CONSTRAINT USER_BADGE_LOG_BADGELOGID_PK PRIMARY KEY(BADGELOGID)
);



---------------------------------------------------------- 빨강 ----------------------------------------------------------------

--○ DEL_REPLY 테이블 생성
CREATE TABLE DEL_REPLY
( ID            NUMBER                      -- DEL_REPLY_SEQ
, REPLYID       VARCHAR2(10)
, DELETEDATE    DATE
, CONSTRAINT DEL_REPLY_ID_PK PRIMARY KEY(ID)
);

--○ REPORT_REPLY 테이블 생성
CREATE TABLE REPORT_REPLY
( ID            NUMBER                  -- REPORT_REPLY_SEQ
, REPLYID       VARCHAR2(10)
, USERID        VARCHAR2(30)
, REPORTCATEID    VARCHAR2(10) 
, REPORTDETAIL  VARCHAR2(4000)
, REPORTDATE    DATE
, CONSTRAINT REPORT_REPLY_ID_PK PRIMARY KEY(ID)
);


---------------------------------------------------------- 노랑 ----------------------------------------------------------------


---------------------------------------------------------- 초록 ----------------------------------------------------------------
-- LOGIN(FK) 초
ALTER TABLE LOGIN
ADD CONSTRAINT LOGIN_ROLEID_FK
FOREIGN KEY(ROLEID)
REFERENCES ROLE(ROLEID);

-- ADDR_GU(FK) 초
ALTER TABLE ADDR_GU
ADD CONSTRAINT ADDR_GU_ADDRSIID
FOREIGN KEY(ADDRSIID)
REFERENCES ADDR_SI(ADDRSIID);


-- INTEREST_SUB(FK) 초
ALTER TABLE INTEREST_SUB
ADD CONSTRAINT INTEREST_SUB_INTERMAINID_FK
FOREIGN KEY(INTERMAINID)
REFERENCES INTEREST_MAIN(INTERMAINID);

-- DEL_MESSAGE(FK) 초
ALTER TABLE DEL_MESSAGE
ADD CONSTRAINT DEL_MESSAGE_MESSAGEID_FK
FOREIGN KEY(MESSAGEID)
REFERENCES MESSAGE(MESSAGEID);

ALTER TABLE DEL_MESSAGE
ADD CONSTRAINT DEL_MESSAGE_USERID_FK
FOREIGN KEY(USERID)
REFERENCES USER_ESSENTIAL(USERID);


--POINT(FK) 초
ALTER TABLE POINT
ADD CONSTRAINT POINT_BADGEPOINTCATEID_FK
FOREIGN KEY(BADGEPOINTCATEID)
REFERENCES POINT_CATE(BADGEPOINTCATEID);



---------------------------------------------------------- 파랑 ----------------------------------------------------------------

-- 외래키 제약조건 설정 

ALTER TABLE ADMIN
ADD CONSTRAINT ADMIN_USERID_FK FOREIGN KEY(USERID)
               REFERENCES LOGIN(USERID);

-- 외래키 제약조건 설정 

ALTER TABLE USER_ESSENTIAL
ADD CONSTRAINT USER_ESSENTIAL_USERID_FK FOREIGN KEY(USERID)
               REFERENCES LOGIN(USERID);
               
ALTER TABLE USER_ESSENTIAL
ADD CONSTRAINT USER_ESSENTIAL_GENDERID_FK FOREIGN KEY(GENDERID)
               REFERENCES GENDER(GENDERID);
               
ALTER TABLE USER_ESSENTIAL
ADD CONSTRAINT USER_ESSENTIAL_BADGELOGID_FK FOREIGN KEY(BADGELOGID)
               REFERENCES USER_BADGE_LOG(BADGELOGID);

---------------------------------------------------------- 보라 ----------------------------------------------------------------
ALTER TABLE DIRECT_QUESTION
ADD CONSTRAINT DIRECT_QUESTION_USERID_FK FOREIGN KEY(USERID)
               REFERENCES USER_ESSENTIAL(USERID);

ALTER TABLE USER_ADDR
ADD CONSTRAINT USER_ADDR_USERID_FK FOREIGN KEY(USERID)
               REFERENCES USER_ESSENTIAL(USERID);

ALTER TABLE USER_ADDR
ADD CONSTRAINT USER_ADDR_ADDRGUID_FK FOREIGN KEY(ADDRGUID)
               REFERENCES ADDR_GU(ADDRGUID);

-- 외래키 제약조건 설정 
ALTER TABLE USER_SUB
ADD CONSTRAINT USERSUB_USERID_FK FOREIGN KEY(USERID)
               REFERENCES USER_ESSENTIAL(USERID);


-- 외래키 제약조건 설정 
ALTER TABLE DEL_USER
ADD CONSTRAINT DEL_USER_USERID_FK FOREIGN KEY(USERID)
               REFERENCES USER_ESSENTIAL(USERID);


-- 외래키 제약조건 설정 
ALTER TABLE FOLLOW
ADD CONSTRAINT FOLLOW_GIVEUSERID_FK FOREIGN KEY(GIVEUSERID)
               REFERENCES USER_ESSENTIAL(USERID);

ALTER TABLE FOLLOW
ADD CONSTRAINT FOLLOW_TAKEUSERID_FK FOREIGN KEY(TAKEUSERID)
               REFERENCES USER_ESSENTIAL(USERID);


-- 외래키 제약조건 설정 
ALTER TABLE USER_INTEREST
ADD CONSTRAINT USER_INTEREST_USERID_FK FOREIGN KEY(USERID)
               REFERENCES USER_ESSENTIAL(USERID);

ALTER TABLE USER_INTEREST
ADD CONSTRAINT USER_INTEREST_INTERSUBID_FK FOREIGN KEY(INTERSUBID)
               REFERENCES INTEREST_SUB(INTERSUBID);

-- 외래키 제약조건 설정 
ALTER TABLE USER_CERTIFICATION
ADD CONSTRAINT USER_CERTIFICATION_USERID_FK FOREIGN KEY(USERID)
               REFERENCES USER_ESSENTIAL(USERID);


-- 외래키 제약조건 설정 
ALTER TABLE MESSAGE
ADD CONSTRAINT MESSAGE_GIVEUSERID_FK FOREIGN KEY(GIVEUSERID)
               REFERENCES LOGIN(USERID);
ALTER TABLE MESSAGE
ADD CONSTRAINT MESSAGE_TAKEUSERID_FK FOREIGN KEY(TAKEUSERID)
               REFERENCES USER_ESSENTIAL(USERID);

-- 외래키 제약조건 설정 
ALTER TABLE POST
ADD CONSTRAINT POST_USERID_FK FOREIGN KEY(USERID)
               REFERENCES USER_ESSENTIAL(USERID);
               
               
ALTER TABLE POST
ADD CONSTRAINT POST_ADDRGUID_FK FOREIGN KEY(ADDRGUID)
               REFERENCES ADDR_GU(ADDRGUID);

ALTER TABLE POST
ADD CONSTRAINT POST_INTERESTSUBID_FK FOREIGN KEY(INTERSUBID)
               REFERENCES INTEREST_SUB(INTERSUBID);

ALTER TABLE POST
ADD CONSTRAINT POST_MOODID_FK FOREIGN KEY(MOODID)
               REFERENCES MOOD(MOODID);
               
ALTER TABLE POST
ADD CONSTRAINT POST_DRINKID_FK FOREIGN KEY(DRINKID)
               REFERENCES DRINK(DRINKID);

ALTER TABLE POST
ADD CONSTRAINT POST_SAMEGENDERID_FK FOREIGN KEY(SAMEGENDERID)
               REFERENCES SAME_GENDER(SAMEGENDERID);


---------------------------------------------------------- 주황 ----------------------------------------------------------------

-- DEL_POST(FK) 주
ALTER TABLE DEL_POST
ADD CONSTRAINT DEL_POST_POSTID_FK
FOREIGN KEY(POSTID)
REFERENCES POST(POSTID);

--REPORT_POST(FK) 주
ALTER TABLE REPORT_POST
ADD CONSTRAINT REPORT_POST_POSTID_FK
FOREIGN KEY(POSTID)
REFERENCES POST(POSTID);

ALTER TABLE REPORT_POST
ADD CONSTRAINT REPORT_POST_USERID_FK
FOREIGN KEY(USERID)
REFERENCES USER_ESSENTIAL(USERID);

ALTER TABLE REPORT_POST
ADD CONSTRAINT REPORT_POST_REPORTCATEID_FK
FOREIGN KEY(REPORTCATEID)
REFERENCES REPORT_CATE(REPORTCATEID);

--JOIN(FK) 주
ALTER TABLE JOIN
ADD CONSTRAINT JOIN_POSTID_FK
FOREIGN KEY(POSTID)
REFERENCES POST(POSTID);

ALTER TABLE JOIN
ADD CONSTRAINT JOIN_USERID_FK
FOREIGN KEY(USERID)
REFERENCES USER_ESSENTIAL(USERID);

ALTER TABLE JOIN
ADD CONSTRAINT JOIN_STATUSID_FK
FOREIGN KEY(STATUSID)
REFERENCES STATUS(STATUSID);


--REVIEW 주
ALTER TABLE REVIEW
ADD CONSTRAINT REVIEW_POSTID_FK
FOREIGN KEY(POSTID)
REFERENCES POST(POSTID);

ALTER TABLE REVIEW
ADD CONSTRAINT REVIEW_GIVEUSERID_FK
FOREIGN KEY(TAKEUSERID)
REFERENCES USER_ESSENTIAL(USERID);

ALTER TABLE REVIEW
ADD CONSTRAINT REVIEW_TAKEUSERID_FK
FOREIGN KEY(GIVEUSERID)
REFERENCES USER_ESSENTIAL(USERID);



---------------------------------------------------------- 분홍 ----------------------------------------------------------------

--○ DEL_JOIN 구간
ALTER TABLE DEL_JOIN ADD CONSTRAINT DEL_JOIN_JOINID_FK FOREIGN KEY(JOINID) REFERENCES JOIN(JOINID);

--○ REPORT_JOIN 구간
ALTER TABLE REPORT_JOIN ADD CONSTRAINT REPORT_JOIN_JOINID_FK FOREIGN KEY(JOINID) REFERENCES JOIN(JOINID);

ALTER TABLE REPORT_JOIN ADD CONSTRAINT REPORT_JOIN_USERID_FK FOREIGN KEY(USERID) REFERENCES USER_ESSENTIAL(USERID);

ALTER TABLE REPORT_JOIN ADD CONSTRAINT REPORT_JOIN_REPORTCATEID_FK FOREIGN KEY(REPORTCATEID) REFERENCES REPORT_CATE(REPORTCATEID);


--○ REPLY 구간
ALTER TABLE REPLY ADD CONSTRAINT REPLY_JOINID_FK FOREIGN KEY(JOINID) REFERENCES JOIN(JOINID);

ALTER TABLE REPLY ADD CONSTRAINT REPLY_USERTYPEID FOREIGN KEY(USERTYPEID) REFERENCES REPLY_USER_TYPE(USERTYPEID);

ALTER TABLE REPORT_REPLY ADD CONSTRAINT REPORT_REPLY_UESRID_FK FOREIGN KEY(USERID) REFERENCES USER_ESSENTIAL(USERID);

ALTER TABLE REPORT_REPLY ADD CONSTRAINT REPORT_REPLY_REPORTCATEID_FK FOREIGN KEY(REPORTCATEID) REFERENCES REPORT_CATE(REPORTCATEID);

--○ REVIEW_SUB 구간
ALTER TABLE REVIEW_SUB ADD CONSTRAINT REVIEW_SUB_REVIEWID_FK FOREIGN KEY(REVIEWID) REFERENCES REVIEW(REVIEWID);

ALTER TABLE REVIEW_SUB ADD CONSTRAINT REVIEW_SUB_BADGEPOINTID_FK FOREIGN KEY(BADGEPOINTID) REFERENCES POINT(BADGEPOINTID);

--○ USER_BADGE_LOG 구간
ALTER TABLE USER_BADGE_LOG ADD CONSTRAINT USER_BADGE_LOG_BADGEPOINTID_FK FOREIGN KEY(BADGEPOINTID) REFERENCES POINT(BADGEPOINTID);

ALTER TABLE USER_BADGE_LOG ADD CONSTRAINT USER_BADGE_LOG_EXPIRATIONID_FK FOREIGN KEY(EXPIRATIONREVIEWID) REFERENCES REVIEW(REVIEWID);

---------------------------------------------------------- 빨강 ----------------------------------------------------------------

--○ DEL_REPLY 구간
ALTER TABLE DEL_REPLY ADD CONSTRAINT DEL_REPLY_REPLYID_FK FOREIGN KEY(REPLYID) REFERENCES REPLY(REPLYID);

--○ REPORT_REPLY 구간
ALTER TABLE REPORT_REPLY ADD CONSTRAINT REPORT_REPLY_REPLYID_FK FOREIGN KEY(REPLYID) REFERENCES REPLY(REPLYID);

SELECT 'CREATE SEQUENCE "' || TABLE_NAME || '_SEQ" NOCACHE;' FROM user_tables;

CREATE SEQUENCE "FAQ_SEQ" NOCACHE;
CREATE SEQUENCE "NOTICE_SEQ" NOCACHE;
CREATE SEQUENCE "DIRECT_QUESTION_SEQ" NOCACHE;
CREATE SEQUENCE "USER_ADDR_SEQ" NOCACHE;
CREATE SEQUENCE "USER_SUB_SEQ" NOCACHE;

CREATE SEQUENCE "DEL_USER_SEQ" NOCACHE;
CREATE SEQUENCE "FOLLOW_SEQ" NOCACHE;
CREATE SEQUENCE "USER_INTEREST_SEQ" NOCACHE;
CREATE SEQUENCE "USER_CERTIFICATION_SEQ" NOCACHE;
CREATE SEQUENCE "DEL_MESSAGE_SEQ" NOCACHE;

CREATE SEQUENCE "DEL_POST_SEQ" NOCACHE;
CREATE SEQUENCE "REPORT_POST_SEQ" NOCACHE;
CREATE SEQUENCE "REPORT_JOIN_SEQ" NOCACHE;
CREATE SEQUENCE "DEL_JOIN_SEQ" NOCACHE;
CREATE SEQUENCE "REVIEW_SUB_SEQ" NOCACHE;

CREATE SEQUENCE "DEL_REPLY_SEQ" NOCACHE;
CREATE SEQUENCE "REPORT_REPLY_SEQ" NOCACHE;

create or replace FUNCTION ADD_ID
( TABLE_NAME        IN VARCHAR2
, ID_COLUMN IN VARCHAR2
, ID_SUFFIX IN VARCHAR2
)
RETURN VARCHAR2
IS
    V_RESULT    VARCHAR2(10);
    V_SQL       VARCHAR2(1000);
    V_SUFFIX    VARCHAR2(10);
BEGIN
    V_SUFFIX := ID_SUFFIX;
    V_SQL := 'SELECT ''' || V_SUFFIX || ''' || LPAD( TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR('|| ID_COLUMN ||', 3))), 0) + 1), 5, ''0'') FROM ' || TABLE_NAME ;

    EXECUTE IMMEDIATE V_SQL INTO V_RESULT;

    RETURN V_RESULT;
END;


create or replace FUNCTION FN_CAL_RANK(V_POSTID VARCHAR2, V_USERID VARCHAR2, V_KEYWORD VARCHAR2)
RETURN NUMBER
IS
    V_ADDRGUID          ADDR_GU.ADDRGUID%TYPE;          -- 개설모임의 만남 장소(구)
    V_HOSTID            USER_ESSENTIAL.USERID%TYPE;     -- 개설자
    V_TITLE             POST.TITLE%TYPE;                -- 모임 제목
    V_INTERDETAIL       POST.INTERDETAIL%TYPE;          -- 모임 관심사 상세
    V_CONTENTS          POST.CONTENTS%TYPE;             -- 모임 본문
    V_GRADE_USER        NUMBER;
    V_GRADE_ADDR        NUMBER;
    V_GRADE_TITLE       NUMBER;
    V_GRADE_INTER       NUMBER;
    V_GRADE_CONTENTS    NUMBER;
BEGIN    
    -- 개설자 평점
    SELECT USERID INTO V_HOSTID
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_USER:=FN_USER_GRADE(V_HOSTID);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_USER);
    -- 지역 매치
    SELECT ADDRGUID INTO V_ADDRGUID
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_ADDR:=FN_SEARCH_ADDR(V_USERID, V_ADDRGUID);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_ADDR);
    -- 키워드-제목 매치
    SELECT TITLE INTO V_TITLE
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_TITLE:=FN_SEARCH_KEYWORD(V_KEYWORD, V_TITLE, 25);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_TITLE);
    -- 키워드-관심사 상세기입 매치
    SELECT INTERDETAIL INTO V_INTERDETAIL
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_INTER:=FN_SEARCH_KEYWORD(V_KEYWORD, V_INTERDETAIL, 15); 
    DBMS_OUTPUT.PUT_LINE(V_GRADE_INTER);
    -- 키워드-본문 매치
    SELECT CONTENTS INTO V_CONTENTS
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_CONTENTS:=FN_SEARCH_KEYWORD(V_KEYWORD, V_CONTENTS, 10);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_CONTENTS);

    RETURN (V_GRADE_USER+V_GRADE_ADDR+V_GRADE_TITLE+V_GRADE_INTER+V_GRADE_CONTENTS);
END;


create or replace FUNCTION FN_CAL_RANK_GUEST(V_POSTID VARCHAR2, V_GUESTADDRGUID VARCHAR2, V_KEYWORD VARCHAR2)
RETURN NUMBER
IS
    V_ADDRGUID          ADDR_GU.ADDRGUID%TYPE;          -- 개설모임의 만남 장소(구)
    V_HOSTID            USER_ESSENTIAL.USERID%TYPE;     -- 개설자
    V_TITLE             POST.TITLE%TYPE;                -- 모임 제목
    V_INTERDETAIL       POST.INTERDETAIL%TYPE;          -- 모임 관심사 상세
    V_CONTENTS          POST.CONTENTS%TYPE;             -- 모임 본문
    V_GRADE_USER        NUMBER;
    V_GRADE_ADDR        NUMBER;
    V_GRADE_TITLE       NUMBER;
    V_GRADE_INTER       NUMBER;
    V_GRADE_CONTENTS    NUMBER;
BEGIN    
    -- 개설자 평점
    SELECT USERID INTO V_HOSTID
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_USER:=FN_USER_GRADE(V_HOSTID);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_USER);

    -- 지역 매치
    SELECT ADDRGUID INTO V_ADDRGUID
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_ADDR:=FN_SEARCH_ADDR_GUEST(V_GUESTADDRGUID, V_ADDRGUID);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_ADDR);

    -- 키워드-제목 매치
    SELECT TITLE INTO V_TITLE
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_TITLE:=FN_SEARCH_KEYWORD(V_KEYWORD, V_TITLE, 25);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_TITLE);
    -- 키워드-관심사 상세기입 매치
    SELECT INTERDETAIL INTO V_INTERDETAIL
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_INTER:=FN_SEARCH_KEYWORD(V_KEYWORD, V_INTERDETAIL, 15); 
    DBMS_OUTPUT.PUT_LINE(V_GRADE_INTER);
    -- 키워드-본문 매치
    SELECT CONTENTS INTO V_CONTENTS
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_CONTENTS:=FN_SEARCH_KEYWORD(V_KEYWORD, V_CONTENTS, 10);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_CONTENTS);

    RETURN (V_GRADE_USER + V_GRADE_ADDR + V_GRADE_TITLE + V_GRADE_INTER + V_GRADE_CONTENTS);
END;


create or replace FUNCTION FN_GET_REVIEW_GRADE(V_GIVEUSERID VARCHAR, V_TAKEUSERID VARCHAR, V_POSTID VARCHAR)
RETURN VARCHAR2
IS
    V_GRADE NUMBER;
BEGIN
    SELECT MAX(GRADE) INTO V_GRADE
    FROM REVIEW 
    WHERE GIVEUSERID=V_GIVEUSERID 
      AND TAKEUSERID=V_TAKEUSERID
      AND POSTID=V_POSTID;

    RETURN V_GRADE;
END;


create or replace FUNCTION FN_GET_REVIEW_SUB_CONTENTS(V_GIVEUSERID VARCHAR, V_TAKEUSERID VARCHAR, V_POSTID VARCHAR)
RETURN VARCHAR2
IS
    V_GRADE         NUMBER;
    V_REVIEWID      REVIEW.REVIEWID%TYPE;
    V_CONTENTS      REVIEW_SUB.CONTENTS%TYPE;
BEGIN
    SELECT MAX(REVIEWID) INTO V_REVIEWID
    FROM REVIEW 
    WHERE GIVEUSERID=V_GIVEUSERID 
      AND TAKEUSERID=V_TAKEUSERID
      AND POSTID=V_POSTID;

    SELECT CONTENTS  INTO V_CONTENTS
    FROM REVIEW_SUB RS JOIN POINT PT ON RS.BADGEPOINTID=PT.BADGEPOINTID
    WHERE REVIEWID=V_REVIEWID;

    RETURN V_CONTENTS;
END;


create or replace FUNCTION FN_GET_REVIEW_SUB_URL(V_GIVEUSERID VARCHAR, V_TAKEUSERID VARCHAR, V_POSTID VARCHAR)
RETURN VARCHAR2
IS
    V_GRADE NUMBER;
    V_REVIEWID  REVIEW.REVIEWID%TYPE;
    V_URL       POINT.URL%TYPE;
BEGIN
    SELECT MAX(REVIEWID) INTO V_REVIEWID
    FROM REVIEW 
    WHERE GIVEUSERID=V_GIVEUSERID 
      AND TAKEUSERID=V_TAKEUSERID
      AND POSTID=V_POSTID;

    SELECT URL  INTO V_URL
    FROM REVIEW_SUB RS JOIN POINT PT ON RS.BADGEPOINTID=PT.BADGEPOINTID
    WHERE REVIEWID=V_REVIEWID;

    RETURN V_URL;
END;



create or replace FUNCTION FN_IN_REVIEW(V_USERID VARCHAR2, V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_NUM   NUMBER;
BEGIN
    -- 어느 게시글에, 입력받은 유저가 남긴 후기가 있는지
    SELECT COUNT(*) INTO V_NUM
    FROM REVIEW
    WHERE POSTID=V_POSTID
      AND GIVEUSERID=V_USERID;

    -- 존재하면 1리턴
    IF V_NUM > 0
        THEN RETURN 1;
    END IF;

    -- 아니면 0리턴
    RETURN 0;
END;


create or replace FUNCTION FN_IS_HOST(V_USERID VARCHAR2, V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_USERID2   USER_ESSENTIAL.USERID%TYPE;
BEGIN
    -- 입력받은 게시글의 개설자ID를 뽑아옴
    SELECT USERID INTO V_USERID2
    FROM POST
    WHERE POSTID=V_POSTID;

    -- 입력받은 유저ID와 같으면1 리턴
    IF V_USERID=V_USERID2
        THEN RETURN 1;
    END IF;

    -- 아니면 0리턴
    RETURN 0;
END;



create or replace FUNCTION FN_OVER_SYSDATE(V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_MEETDATE   POST.MEETDATE%TYPE;
BEGIN
    -- 입력받은 게시글의 만남일을 뽑아옴
    SELECT MEETDATE INTO V_MEETDATE
    FROM POST
    WHERE POSTID=V_POSTID;

    -- 만남일 < 현재일이면 1 리턴
    IF V_MEETDATE <= SYSDATE
        THEN RETURN 1;
    END IF;

    -- 아니면 0리턴
    RETURN 0;
END;


create or replace FUNCTION FN_POST_IS_ACCEPTED(V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_NUM   NUMBER;
BEGIN
    -- 게시글의 참자 신청 댓글 상태에서 ST00003의 갯수를 뽑아봄
    SELECT COUNT(*) INTO V_NUM
    FROM POST P JOIN JOIN J ON P.POSTID=J.POSTID
    WHERE P.POSTID=V_POSTID
      AND J.STATUSID='ST00003';

    -- ST00003이 0초과라면 즉, 존재한다면 1리턴
    IF V_NUM > 0
        THEN RETURN 1;
    END IF;

    -- 아니면 0리턴
    RETURN 0;
END;


create or replace FUNCTION FN_PROFILE_BAD_BADGE(V_USERID VARCHAR2)
RETURN VARCHAR2
IS
    V_URLBAD    POINT.URL%TYPE;
BEGIN
    SELECT max(URL) INTO V_URLBAD
    FROM
    (
        SELECT USERID, URL
        FROM USER_BADGE_VIEW
        WHERE BADGEPOINTCATEID='BC00002'
        ORDER BY DBMS_RANDOM.VALUE
    )
    WHERE USERID=V_USERID
      AND ROWNUM=1;

    RETURN V_URLBAD;
END;


create or replace FUNCTION FN_SEARCH_ADDR(V_USERID VARCHAR2, V_ADDRGUID VARCHAR2)
RETURN NUMBER
IS 
    V_ADDR      NUMBER;
    V_NEAR_ADDR NUMBER;
BEGIN
    -- 입력받은 ADDRGUID가 유저의 등록 ADDRGUID에 있나 찾아봄
    SELECT COUNT(*) INTO V_ADDR
    FROM USER_ADDR
    WHERE USERID=V_USERID
      AND ADDRGUID=V_ADDRGUID;

    -- 입력받은 ADDRGUID가 유저의 등록 ADDRGUID의 인접 ADDRGUIID에 있나 찾아봄
    SELECT COUNT(*) INTO V_NEAR_ADDR
    FROM USER_ADDR UA JOIN 
    (
        SELECT ADDRGUID, NEAR_ADDRGUID
        FROM
        (
            SELECT *
            FROM MATTRIX_ADDR_GU

        )
        UNPIVOT( NEAR FOR NEAR_ADDRGUID IN(GU00001,GU00002,GU00003,GU00004,GU00005,GU00006,GU00007,GU00008,GU00009,GU00010,GU00011,GU00012,GU00013,GU00014,GU00015,GU00016,GU00017,GU00018,GU00019,GU00020,GU00021,GU00022,GU00023,GU00024,GU00025) )
        WHERE NEAR=1
    ) M ON UA.ADDRGUID=M.ADDRGUID
    WHERE USERID=V_USERID
      AND NEAR_ADDRGUID=V_ADDRGUID;

    IF V_ADDR>0
        THEN RETURN 40;
    ELSIF V_NEAR_ADDR>0
        THEN RETURN 25;
    ELSE
        RETURN 0;
    END IF;
END;


create or replace FUNCTION FN_SEARCH_ADDR_GUEST(V_GUESTADDRGUID VARCHAR2, V_ADDRGUID VARCHAR2)
RETURN NUMBER
IS
    V_ADDR      NUMBER;
    V_NEAR_ADDR NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_NEAR_ADDR -- 결과가 있으면 25점
    FROM
    (
        SELECT *
        FROM MATTRIX_ADDR_GU
    )
    UNPIVOT( NEAR FOR NEAR_ADDRGUID IN(GU00001,GU00002,GU00003,GU00004,GU00005,GU00006,GU00007,GU00008,GU00009,GU00010,GU00011,GU00012,GU00013,GU00014,GU00015,GU00016,GU00017,GU00018,GU00019,GU00020,GU00021,GU00022,GU00023,GU00024,GU00025) )
    WHERE NEAR=1
      AND ADDRGUID=V_ADDRGUID       -- 게시글 만남장소
      AND NEAR_ADDRGUID=V_GUESTADDRGUID; -- 유저입력 만남장소

    IF (V_GUESTADDRGUID=V_ADDRGUID)
        THEN RETURN 40;
    ELSIF V_NEAR_ADDR >0
        THEN RETURN 25;
    ELSE
        RETURN 0;
    END IF;
END;


create or replace FUNCTION FN_SEARCH_KEYWORD(V_KEYWORD VARCHAR2, V_TEXT VARCHAR2, V_ALLOT_GRADE NUMBER)
RETURN NUMBER
IS
    V_ALLNUM     NUMBER;
    V_FOUNDNUM   NUMBER;
BEGIN
    V_ALLNUM := LENGTH(V_KEYWORD)-LENGTH(REPLACE(V_KEYWORD,'|'))-1;

    SELECT COUNT(*) INTO V_FOUNDNUM
    FROM
    (
        SELECT SUBSTR(KEYWORD, INSTR(KEYWORD, '|', 1, LEVEL)+1, INSTR(KEYWORD, '|', 1, LEVEL+1)-INSTR(KEYWORD, '|', 1, LEVEL)-1) AS KEYWORD
             , INSTR(V_TEXT , SUBSTR(KEYWORD, INSTR(KEYWORD, '|', 1, LEVEL)+1, INSTR(KEYWORD, '|', 1, LEVEL+1)-INSTR(KEYWORD, '|', 1, LEVEL)-1)) AS FOUND
        FROM
        (
            SELECT V_KEYWORD AS KEYWORD
            FROM DUAL
        )
        CONNECT BY LEVEL <= LENGTH(KEYWORD)-LENGTH(REPLACE(KEYWORD,'|'))-1
    )
    WHERE FOUND>0;

    RETURN (NVL(V_FOUNDNUM,0)/NVL(V_ALLNUM,1))*V_ALLOT_GRADE;
END;


create or replace FUNCTION FN_USER_GRADE(V_USERID VARCHAR2)
RETURN NUMBER
IS
    V_NUM   NUMBER;
BEGIN
    SELECT ROUND(AVG(GRADE),1) INTO V_NUM
    FROM REVIEW
    WHERE TAKEUSERID='chrigh'
    GROUP BY TAKEUSERID;

    RETURN NVL(V_NUM,0);
END;




create or replace FUNCTION FN_USER_IS_ACCEPTED(V_USERID VARCHAR2, V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_NUM   NUMBER;
BEGIN
    -- 어느 게시글에, 어느 유저의 상태에서 'ST00003'의 갯수를 세어봄
    SELECT COUNT(*) INTO V_NUM
    FROM POST P JOIN JOIN J ON P.POSTID=J.POSTID
    WHERE P.POSTID=V_POSTID
      AND J.USERID=V_USERID
      AND J.STATUSID='ST00003';

    -- 존재하면 1리턴
    IF V_NUM > 0
        THEN RETURN 1;
    END IF;

    -- 아니면 0리턴
    RETURN 0;
END;



create or replace FUNCTION FN_USER_POST_STATUS(V_USERID VARCHAR2, V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_USER_POST_STATUS  NUMBER;
BEGIN
    -- FN_IS_HOST(V_USERID, V_POSTID)=1     개설자인가
    -- FN_OVER_SYSDATE(V_POSTID)=1          만남일이 지났는가
    -- FN_POST_IS_ACCEPTED(V_POSTID)=1      만남확정된 모임인가(참가자중 ST00003이 있는가)
    -- FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=1                조회한 유저는 만남 확정인가
    -- FN_IN_REVIEW(V_USERID, V_POSTID)=1   후기를 남겼는가

    -- OUTPUT : 1(모집중), 2(만남확정), 3(만남실패), 4(후기남기기), 5(후기조회)

    -- 개설자이면서 만남일 지남
    IF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=1 )
        THEN V_USER_POST_STATUS:=5;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=4;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_POST_IS_ACCEPTED(V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=3;
    -- 개설자이면서 만남일 안지남
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=1 )
        THEN V_USER_POST_STATUS:=5;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=4;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=1;
    -- 참가자이면서 만남일 지남  
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=1 )
        THEN V_USER_POST_STATUS:=5;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=4;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=3;
    -- 참가자이면서 만남일 안지남
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=1 )
        THEN V_USER_POST_STATUS:=5;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=4;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=3;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=1;
    END IF;         

    RETURN V_USER_POST_STATUS;
END;


CREATE OR REPLACE VIEW USERADDR_VIEW
AS
SELECT A.ID ,E.USERID, E.NICKNAME, G.ADDRGUNAME ,S.ADDRSINAME, G.ADDRGUID, S.ADDRSIID
FROM USER_ESSENTIAL E LEFT JOIN USER_ADDR A   
    ON E.USERID = A.USERID
LEFT JOIN  ADDR_GU G
    ON A.ADDRGUID = G.ADDRGUID
LEFT JOIN  ADDR_SI S
    ON G.ADDRSIID = S.ADDRSIID;
    
CREATE OR REPLACE VIEW USERINTER_VIEW
AS
SELECT I.ID ,E.USERID, E.NICKNAME, S.INTERSUBNAME ,M.INTERMAINNAME, M.INTERMAINID,S.INTERSUBID
FROM USER_ESSENTIAL E LEFT JOIN USER_INTEREST I   
    ON E.USERID = I.USERID
LEFT JOIN  INTEREST_SUB S
    ON I.INTERSUBID = S.INTERSUBID
LEFT JOIN  INTEREST_MAIN M
    ON S.INTERMAINID = M.INTERMAINID;
    
CREATE OR REPLACE VIEW JOIN_VIEW
AS
SELECT P.POSTID POSTID, J.JOINID JOINID, U.USERID USERID, P.URL URL, U.NICKNAME NICKNAME, J.JOINDATE JOINDATE, J.CONTENTS CONTENTS, D.JOINID DELJOIN, J.STATUSID STATUSID
FROM POST P JOIN JOIN J
ON P.POSTID = J.POSTID
LEFT JOIN USER_ESSENTIAL U 
ON J.USERID = U.USERID
LEFT JOIN USER_BADGE_LOG L
ON U.BADGELOGID = L.BADGELOGID
LEFT JOIN POINT P
ON L.BADGEPOINTID = P.BADGEPOINTID
LEFT JOIN DEL_JOIN D
ON J.JOINID = D.JOINID;


CREATE OR REPLACE VIEW REPLY_VIEW
AS
SELECT P.POSTID POSTID, J.JOINID JOINID,R.REPLYID REPLYID
, CASE WHEN R.USERTYPEID = 'RU00001' THEN P.USERID WHEN R.USERTYPEID = 'RU00002' THEN J.USERID ELSE '없음' END USERID
,P.URL URL
,CASE WHEN R.USERTYPEID = 'RU00001' THEN (SELECT NICKNAME FROM USER_ESSENTIAL WHERE USERID = P.USERID) WHEN R.USERTYPEID = 'RU00002' THEN U.NICKNAME ELSE '없음' END
 NICKNAME
, R.REPLYDATE JOINDATE, R.CONTENTS CONTENTS,D.ID DELJOIN,R.USERTYPEID USERTYPEID
FROM POST P JOIN JOIN J
ON P.POSTID = J.POSTID
LEFT JOIN USER_ESSENTIAL U 
ON J.USERID = U.USERID
LEFT JOIN USER_BADGE_LOG L
ON U.BADGELOGID = L.BADGELOGID
LEFT JOIN POINT P
ON L.BADGEPOINTID = P.BADGEPOINTID
JOIN REPLY R
ON J.JOINID = R.JOINID
LEFT JOIN DEL_REPLY D
ON R.REPLYID = D.REPLYID;



CREATE OR REPLACE VIEW USER_BADGE_VIEWAS 
AS
SELECT BL.USERID, MAX(BL.BADGELOGID) AS BADGELOGID, P.BADGEPOINTNAME, PC.BADGEPOINTCATEID, P.URL
FROM USER_BADGE_LOG BL LEFT JOIN REVIEW RV ON BL.EXPIRATIONREVIEWID=RV.REVIEWID
                            JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID
                            JOIN POINT_CATE PC ON P.BADGEPOINTCATEID=PC.BADGEPOINTCATEID
WHERE (ADD_MONTHS(RV.REVIEWDATE,12) >= SYSDATE OR PC.BADGEPOINTCATEID='BC00004')
GROUP BY BL.BADGEPOINTID, BL.USERID, P.BADGEPOINTNAME, PC.BADGEPOINTCATEID, P.URL
ORDER BY USERID;



CREATE OR REPLACE VIEW POST_VIEW2 
AS
SELECT P.POSTID, P.USERID, UE.NICKNAME, P.TITLE, P.CONTENTS                                                   -- 개설자 ID, 닉네임, 개설모임 제목, 내용, 개설자 닉네임
     , (SELECT ROUND(AVG(GRADE), 1) FROM REVIEW WHERE TAKEUSERID=P.USERID) GRADE                    --개설자 평점
     , (SELECT ID FROM USER_CERTIFICATION WHERE USERID=P.USERID AND CERTIID='CT00001') TELCERTIID   -- 휴대폰 인증여부
     , (SELECT ID FROM USER_CERTIFICATION WHERE USERID=P.USERID AND CERTIID='CT00002') EMAILCERTIID -- 이메일 인증여부
     , PO.URL            -- 가입시, 활동시 활동 뱃지가 업데이트 되고 로그인시 뱃지 만료를 확인하는걸 믿고 그냥 url만 써줌
     , (SELECT max(URL)        
        FROM
        (
            SELECT USERID, URL
            FROM USER_BADGE_VIEW
            WHERE BADGEPOINTCATEID='BC00002'
            ORDER BY DBMS_RANDOM.VALUE
        )
        WHERE USERID=P.USERID
          AND ROWNUM=1) AS BADURL -- 개설자의 나쁜 뱃지중 랜덤 1개의 URL, 없으면 null
     , G.ADDRSIID, S.ADDRSINAME, P.ADDRGUID, G.ADDRGUNAME, P.ADDRDETAIL                     -- 만남 장소(시) ID, 이름 / 만남장소(구) ID, 이름 / 만남장소 디테일
     , "IS".INTERMAINID, IM.INTERMAINNAME, P.INTERSUBID, "IS".INTERSUBNAME, P.INTERDETAIL   -- 관심사(대) ID, 이름 / 관심사(소) ID, 이름 / 관심사 디테일
     , P.MINNUM, P.MAXNUM                                                                   -- 최소인원, 최대인원
     , P.POSTDATE, P.MEETDATE                                                               -- 게시일, 만남일
     , P.SAMEGENDERID SAMEGENDER, P.DRINKID DRINK, P.LIMITGRADE LIMITGRADE, P.MOODID MOOD   -- 동성여부, 음주여부, 입장제한평점, 분위기
FROM POST P JOIN ADDR_GU G ON P.ADDRGUID=G.ADDRGUID
            JOIN ADDR_SI S ON G.ADDRSIID=S.ADDRSIID
            JOIN INTEREST_SUB "IS" ON P.INTERSUBID="IS".INTERSUBID
            JOIN INTEREST_MAIN IM ON "IS".INTERMAINID=IM.INTERMAINID
            JOIN USER_ESSENTIAL UE ON P.USERID=UE.USERID
            JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
            JOIN POINT PO ON BL.BADGEPOINTID = PO.BADGEPOINTID;


CREATE OR REPLACE VIEW USERBADGELOG_VIEW 
AS
SELECT BL.USERID, MAX(BL.BADGELOGID) AS BADGELOGID, P.BADGEPOINTNAME,P.BADGEPOINTID
FROM USER_BADGE_LOG BL LEFT JOIN REVIEW RV ON BL.EXPIRATIONREVIEWID=RV.REVIEWID
                            JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID
WHERE (ADD_MONTHS(RV.REVIEWDATE,12) >= SYSDATE OR SUBSTR(BL.BADGEPOINTID,3) >= 11)
GROUP BY BL.BADGEPOINTID, BL.USERID, P.BADGEPOINTNAME,P.BADGEPOINTID
ORDER BY USERID;




CREATE OR REPLACE VIEW MSG_VIEW 
AS
SELECT M.MESSAGEID,M.CONTENTS,M.GIVEUSERID,M.TAKEUSERID,M.SENDDATE,M.CHECKDATE
        ,(SELECT COUNT(*)
            FROM DEL_MESSAGE
            WHERE messageID = M.messageID) AS CH
FROM MESSAGE M;



CREATE OR REPLACE VIEW POST_VIEW 
AS
SELECT P.POSTID, P.USERID, UE.NICKNAME, P.TITLE, P.CONTENTS                                                   -- 개설자 ID, 닉네임, 개설모임 제목, 내용, 개설자 닉네임
     , (SELECT ROUND(AVG(GRADE), 1) FROM REVIEW WHERE TAKEUSERID=P.USERID) GRADE                    --개설자 평점
     , (SELECT ID FROM USER_CERTIFICATION WHERE USERID=P.USERID AND CERTIID='CT00001') TELCERTIID   -- 휴대폰 인증여부
     , (SELECT ID FROM USER_CERTIFICATION WHERE USERID=P.USERID AND CERTIID='CT00002') EMAILCERTIID -- 이메일 인증여부
     , PO.URL            -- 가입시, 활동시 활동 뱃지가 업데이트 되고 로그인시 뱃지 만료를 확인하는걸 믿고 그냥 url만 써줌
     , FN_PROFILE_BAD_BADGE(P.USERID) AS URLBAD -- 개설자의 나쁜 뱃지중 랜덤 1개의 URL, 없으면 null
     , G.ADDRSIID, S.ADDRSINAME, P.ADDRGUID, G.ADDRGUNAME, P.ADDRDETAIL                     -- 만남 장소(시) ID, 이름 / 만남장소(구) ID, 이름 / 만남장소 디테일
     , "IS".INTERMAINID, IM.INTERMAINNAME, P.INTERSUBID, "IS".INTERSUBNAME, P.INTERDETAIL   -- 관심사(대) ID, 이름 / 관심사(소) ID, 이름 / 관심사 디테일
     , P.MINNUM, P.MAXNUM                                                                   -- 최소인원, 최대인원
     , P.POSTDATE, P.MEETDATE                                                               -- 게시일, 만남일
     , P.SAMEGENDERID SAMEGENDER, P.DRINKID DRINK, P.LIMITGRADE LIMITGRADE, P.MOODID MOOD   -- 동성여부, 음주여부, 입장제한평점, 분위기
FROM POST P JOIN ADDR_GU G ON P.ADDRGUID=G.ADDRGUID
            JOIN ADDR_SI S ON G.ADDRSIID=S.ADDRSIID
            JOIN INTEREST_SUB "IS" ON P.INTERSUBID="IS".INTERSUBID
            JOIN INTEREST_MAIN IM ON "IS".INTERMAINID=IM.INTERMAINID
            JOIN USER_ESSENTIAL UE ON P.USERID=UE.USERID
            JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
            JOIN POINT PO ON BL.BADGEPOINTID = PO.BADGEPOINTID;
            
            


CREATE OR REPLACE VIEW USER_REPRESENTATION_BADGE 
AS
SELECT UE.USERID, UE.BADGELOGID, UE.NICKNAME, BL.BADGEPOINTID ,P.BADGEPOINTNAME
FROM USER_ESSENTIAL UE JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID;




CREATE OR REPLACE VIEW END_REVIEW_VIEW 
AS
SELECT R.TAKEUSERID AS USERID, R.REVIEWID, R.POSTID, R.GIVEUSERID, R.TAKEUSERID,R.GRADE, R.REVIEWDATE, RS.CONTENTS, RS.BADGEPOINTID, P.URL AS TAKEURL
FROM REVIEW R, REVIEW_SUB RS, POINT P
WHERE RS.REVIEWID(+) = R.REVIEWID AND P.BADGEPOINTID(+) = RS.BADGEPOINTID
ORDER BY POSTID;




CREATE OR REPLACE VIEW VIEW_HOST_LIST 
AS
SELECT J.USERID AS USERID, J.POSTID ,E.NICKNAME AS NICKNAME,PT.URL AS URL, RANK() OVER(ORDER BY J.USERID) AS NUM
		FROM JOIN J
		JOIN USER_ESSENTIAL E
		ON J.USERID = E.USERID
		JOIN USER_BADGE_LOG UBL
		ON E.BADGELOGID = UBL.BADGELOGID
		JOIN POINT PT
		ON UBL.BADGEPOINTID = PT.BADGEPOINTID
        
		ORDER BY POSTID;
        



CREATE OR REPLACE VIEW VIEW_CHAMGA_LIST 
AS SELECT J.POSTID, J.USERID AS USERID,E.NICKNAME AS NICKNAME,PT.URL AS URL, RANK() OVER(ORDER BY J.USERID) AS NUM
		FROM JOIN J
		JOIN USER_ESSENTIAL E
		ON J.USERID = E.USERID
		JOIN USER_BADGE_LOG UBL
		ON E.BADGELOGID = UBL.BADGELOGID
		JOIN POINT PT
		ON UBL.BADGEPOINTID = PT.BADGEPOINTID
		ORDER BY POSTID;
        
        


CREATE OR REPLACE VIEW POINT_LOG_VIEW 
AS
SELECT RV.TAKEUSERID,RV.GIVEUSERID, RS.BADGEPOINTID ,RV.REVIEWDATE, ADD_MONTHS(RV.REVIEWDATE,12) AS EXPIRATIONDATE
FROM  REVIEW_SUB RS JOIN POINT P ON RS.BADGEPOINTID = P.BADGEPOINTID
        JOIN REVIEW RV ON RV.REVIEWID = RS.REVIEWID
WHERE  (ADD_MONTHS(RV.REVIEWDATE,12) > SYSDATE);




CREATE OR REPLACE VIEW VIEW_RP_BADGE 
AS
SELECT UE.USERID, UE.BADGELOGID, BL.BADGEPOINTID ,P.BADGEPOINTNAME
FROM USER_ESSENTIAL UE JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID;



CREATE OR REPLACE VIEW VIEW_REVIEW_ENTRY 
AS
SELECT P.POSTID, P.USERID, R.GIVEUSERID, R.GRADE, R.CONTENTS, R.TAKEURL
FROM POST P, END_REVIEW_VIEW R
WHERE R.POSTID(+) = P.POSTID
ORDER BY P.POSTID;



CREATE OR REPLACE VIEW VIEW_SUB_URL 
AS
SELECT RS.REVIEWID, RS.BADGEPOINTID, P.URL, RS.CONTENTS
FROM REVIEW_SUB RS, POINT P
WHERE RS.BADGEPOINTID = P.BADGEPOINTID;



CREATE OR REPLACE VIEW VIEW_REVIEW_NICK 
AS
"SELECT R.REVIEWID, R.POSTID, R.GIVEUSERID, R.TAKEUSERID, U.NICKNAME, R.GRADE
FROM REVIEW R, USER_ESSENTIAL U
WHERE R.GIVEUSERID = U.USERID"


CREATE OR REPLACE VIEW VIEW_DAEPO_BADGE_URL 
AS
SELECT V.USERID, V.BADGEPOINTID, V.BADGEPOINTNAME, P.URL
FROM VIEW_RP_BADGE V, POINT P
WHERE P.BADGEPOINTID = V.BADGEPOINTID;



CREATE OR REPLACE VIEW VIEW_REVIEW_INQURY 
AS
SELECT R.REVIEWID, R.TAKEUSERID AS USERID, R.GIVEUSERID, R.NICKNAME AS GIVEUSERNAME, VU.URL AS GIVEUSERURL, R.POSTID, R.GRADE, RS.BADGEPOINTID AS BADGEPOINTID, RS.URL AS TAKEURL, RS.CONTENTS AS CONTENTS
FROM VIEW_REVIEW_NICK R, VIEW_SUB_URL RS, VIEW_DAEPO_BADGE_URL VU
WHERE RS.REVIEWID(+) = R.REVIEWID AND VU.USERID = R.GIVEUSERID
ORDER BY TAKEUSERID, REVIEWID;



CREATE OR REPLACE VIEW VIEW_POST_ALL 
AS
SELECT J.POSTID, P.USERID AS HOST, J.USERID
FROM JOIN J, POST P
WHERE J.POSTID = P.POSTID
ORDER BY POSTID;




CREATE OR REPLACE VIEW VIEW_RP_BADGE_URL 
AS
SELECT V.USERID, P.URL
FROM VIEW_RP_BADGE V, POINT P
WHERE V.BADGEPOINTID = P.BADGEPOINTID;



CREATE OR REPLACE VIEW VIEW_POST_JOIN_DATA 
AS
SELECT PA.POSTID, PA.HOST, PA.USERID, U.NICKNAME,BU.URL
FROM VIEW_POST_ALL PA, VIEW_RP_BADGE_URL BU, USER_ESSENTIAL U
WHERE UPPER(PA.USERID)=UPPER(BU.USERID) AND UPPER(PA.USERID) = UPPER(U.USERID);



CREATE OR REPLACE VIEW VIEW_REVIEW_BAISC
AS
SELECT R.REVIEWID, R.POSTID, R.TAKEUSERID, R.GIVEUSERID, R.GRADE, S.CONTENTS, S.BADGEPOINTID, P.URL
FROM REVIEW R, REVIEW_SUB S, POINT P
WHERE R.REVIEWID = S.REVIEWID(+) AND S.BADGEPOINTID = P.BADGEPOINTID(+)
ORDER BY R.POSTID, R.TAKEUSERID;



CREATE OR REPLACE VIEW BADGE_VIEW 
AS
SELECT UV.USERID, UV.BADGELOGID,UV.BADGEPOINTNAME,UV.BADGEPOINTID,R.REVIEWDATE
FROM USERBADGELOG_VIEW UV JOIN USER_BADGE_LOG UB ON Uv.BADGELOGID = UB.BADGELOGID
                            LEFT JOIN REVIEW R ON UB.GETREVIEWID = R.REVIEWID;
            
                            
                    

create or replace PROCEDURE INSERT_REVIEW_SUB(V_REVIEWID VARCHAR2, V_BADGEPOINTID VARCHAR2, V_CONTETNS VARCHAR2)
IS
    V_TAKEUSERID            USER_ESSENTIAL.USERID%TYPE;
    V_EXPIRATIONREVIEWID    REVIEW.REVIEWID%TYPE;
    V_COUNT                 NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('프로시저 시작');
    INSERT INTO REVIEW_SUB(ID, REVIEWID, BADGEPOINTID, CONTENTS) 
    VALUES(REVIEW_SUB_SEQ.NEXTVAL, V_REVIEWID, V_BADGEPOINTID, V_CONTETNS);

    SELECT TAKEUSERID INTO V_TAKEUSERID
    FROM REVIEW
    WHERE REVIEWID=V_REVIEWID;

    SELECT COUNT(*) INTO V_COUNT
    FROM REVIEW_SUB RS JOIN REVIEW R ON RS.REVIEWID=R.REVIEWID
    WHERE TAKEUSERID = V_TAKEUSERID
      AND ADD_MONTHS(REVIEWDATE,12)>=SYSDATE
      AND BADGEPOINTID=V_BADGEPOINTID;

    IF V_COUNT>=3
        THEN    SELECT REVIEWID INTO V_EXPIRATIONREVIEWID
                FROM
                (
                SELECT RS.REVIEWID, RS.BADGEPOINTID, R.REVIEWDATE, ROW_NUMBER() OVER(ORDER BY R.REVIEWDATE DESC) AS NUM
                FROM REVIEW_SUB RS JOIN REVIEW R ON RS.REVIEWID=R.REVIEWID
                WHERE TAKEUSERID = V_TAKEUSERID
                  AND ADD_MONTHS(REVIEWDATE,12)>=SYSDATE
                  AND BADGEPOINTID=V_BADGEPOINTID
                )
                WHERE NUM=3;

                DBMS_OUTPUT.PUT_LINE('USER_BADGE_LOG 기록남김');

                INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID, GETREVIEWID, EXPIRATIONREVIEWID)
                VALUES(ADD_ID('USER_BADGE_LOG','BADGELOGID', 'BL'), V_TAKEUSERID, V_BADGEPOINTID, V_REVIEWID, V_EXPIRATIONREVIEWID); 
    END IF;
     DBMS_OUTPUT.PUT_LINE('프로시저 종료');
END;



create or replace PROCEDURE PRC_UPDATE_USER_BADGE_SAMPLE
IS
    CURSOR CUR_USERID
    IS
    SELECT USERID
    FROM USER_ESSENTIAL;

    V_USERID        USER_ESSENTIAL.USERID%TYPE;
    V_BADGELOGID    USER_BADGE_LOG.BADGELOGID%TYPE;
BEGIN
    OPEN CUR_USERID;
    LOOP
        FETCH CUR_USERID INTO V_USERID;
        EXIT WHEN CUR_USERID%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_USERID);

        SELECT BADGELOGID INTO V_BADGELOGID
        FROM 
        (
            SELECT MAX(BL.BADGELOGID) AS BADGELOGID, BL.BADGEPOINTID
            FROM USER_BADGE_LOG BL LEFT JOIN REVIEW RV ON BL.EXPIRATIONREVIEWID=RV.REVIEWID
                                   JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID
                                   JOIN POINT_CATE PC ON P.BADGEPOINTCATEID=PC.BADGEPOINTCATEID
            WHERE BL.USERID = V_USERID
              AND (ADD_MONTHS(RV.REVIEWDATE,12) >= SYSDATE OR PC.BADGEPOINTCATEID='BC00004')
            GROUP BY BL.BADGEPOINTID
            ORDER BY DBMS_RANDOM.VALUE
        )
        WHERE ROWNUM=1;        
        DBMS_OUTPUT.PUT_LINE(V_BADGELOGID);

        UPDATE USER_ESSENTIAL
        SET BADGELOGID=V_BADGELOGID
        WHERE USERID=V_USERID;

    END LOOP;
    CLOSE CUR_USERID;
END;



create or replace PROCEDURE PRC_USER_BADGE_LOG_SAMPLE
IS
    CURSOR CUR_USER
    IS     
    SELECT USERID
    FROM   USER_ESSENTIAL;

    V_USERID        USER_ESSENTIAL.USERID%TYPE;
    V_COUNT         NUMBER;
    V_GETREVIEWID   REVIEW.REVIEWID%TYPE;
BEGIN
    OPEN CUR_USER;
    LOOP
        FETCH CUR_USER INTO V_USERID;
        EXIT WHEN CUR_USER%NOTFOUND; -- EXIT 위치가 중요함. 맨 아래 있으면 마지막 하나를 반복함

        DBMS_OUTPUT.PUT_LINE(V_USERID);

        SELECT COUNT(*) INTO V_COUNT
        FROM
        (
            SELECT POSTID,TAKEUSERID
            FROM REVIEW
            GROUP BY POSTID, TAKEUSERID
            ORDER BY POSTID
        )
        WHERE TAKEUSERID=V_USERID;

        DBMS_OUTPUT.PUT_LINE(V_COUNT);

        -- 전부 뉴비는 부여
        DBMS_OUTPUT.PUT_LINE('뉴비 뱃지 부여!');
        INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID, GETREVIEWID, EXPIRATIONREVIEWID)
        VALUES(ADD_ID('USER_BADGE_LOG','BADGELOGID', 'BL'), V_USERID, 'BP00011', null, null);        

        -- 15회 넘으면 일반참석러 부여
        IF V_COUNT>=15
            THEN DBMS_OUTPUT.PUT_LINE('일반참석러 뱃지 부여!');
                 SELECT POSTID INTO V_GETREVIEWID
                 FROM
                 (
                     SELECT POSTID,TAKEUSERID, RANK() OVER(PARTITION BY TAKEUSERID ORDER BY POSTID) AS NUM
                     FROM REVIEW
                     GROUP BY POSTID, TAKEUSERID
                     ORDER BY POSTID
                 )
                 WHERE TAKEUSERID=V_USERID
                   AND NUM=15;
                 DBMS_OUTPUT.PUT_LINE(V_GETREVIEWID);
                 INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID, GETREVIEWID, EXPIRATIONREVIEWID)
                 VALUES(ADD_ID('USER_BADGE_LOG','BADGELOGID', 'BL'), V_USERID, 'BP00012', V_GETREVIEWID, null);
        END IF;

        -- 30회 넘으면 우수참석러 부여
        IF V_COUNT>=30
            THEN DBMS_OUTPUT.PUT_LINE('우수참석러 뱃지 부여!');
                 SELECT POSTID INTO V_GETREVIEWID
                 FROM
                 (
                     SELECT POSTID,TAKEUSERID, RANK() OVER(PARTITION BY TAKEUSERID ORDER BY POSTID) AS NUM
                     FROM REVIEW
                     GROUP BY POSTID, TAKEUSERID
                     ORDER BY POSTID
                 )
                 WHERE TAKEUSERID=V_USERID
                   AND NUM=30;
                 DBMS_OUTPUT.PUT_LINE(V_GETREVIEWID);      
                 INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID, GETREVIEWID, EXPIRATIONREVIEWID)
                 VALUES(ADD_ID('USER_BADGE_LOG','BADGELOGID', 'BL'), V_USERID, 'BP00013', V_GETREVIEWID, null);                 
        END IF;

        -- 50회 넘으면 프로참석러 부여
        IF V_COUNT>=50
            THEN DBMS_OUTPUT.PUT_LINE('프로참석러 뱃지 부여!');
                 SELECT POSTID INTO V_GETREVIEWID
                 FROM
                 (
                     SELECT POSTID,TAKEUSERID, RANK() OVER(PARTITION BY TAKEUSERID ORDER BY POSTID) AS NUM
                     FROM REVIEW
                     GROUP BY POSTID, TAKEUSERID
                     ORDER BY POSTID
                 )
                 WHERE TAKEUSERID=V_USERID
                   AND NUM=50;
                 DBMS_OUTPUT.PUT_LINE(V_GETREVIEWID);
                 INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID, GETREVIEWID, EXPIRATIONREVIEWID)
                 VALUES(ADD_ID('USER_BADGE_LOG','BADGELOGID', 'BL'), V_USERID, 'BP00014', V_GETREVIEWID, null);                 
        END IF;
    END LOOP;
    CLOSE CUR_USER;
END;


------------------------------------------------------ 노랑 ------------------------------------------------------

--○ ROLE 테이블 INSERT 쿼리문
INSERT INTO ROLE(ROLEID, ROLENAME)
VALUES('RL00001','관리자');
INSERT INTO ROLE(ROLEID, ROLENAME)
VALUES('RL00002','회원');

--○ FAQ 테이블 INSERT 쿼리문
INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'신청한 내역은 어디서 확인하나요?','로그인 후 마이페이지에서 신청내역을 확인할수 있습니다.:)',TO_DATE('2019-07-03','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'계정을 잊어버렸는데 어떻게 하나요?','아이디/비밀번호 찾기 메뉴를 통해 계정을 찾으실수 있습니다. 기타 문의사항은 고객센터로 문의 주시면 빠른 처리 도와드리겠습니다.:)',TO_DATE('2019-07-01','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'후기 수정은 어떻게 하나요? ','후기수정은 sagyo 정책상 불가능 합니다 ^^ 후기를 남기실때는 신중히 남겨주시기 바랍니다 :)',TO_DATE('2019-06-24','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'이런 SAGYO가 되었으면 좋겠어요!','저희 SAGYO에 대해 아이디어나 부족한점이 생각나신다면 저희 사교 고객센터로 연락주시기 바랍니다 :)',TO_DATE('2019-05-23','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'인원 증원은 안되나요?','정해진 인원으로 진행되는 SAGYO는  인원 증원이 어렵습니다. 참가신청(대기신청) 하시면 취소자 발생시 참여가 가능하니 참고 부탁드립니다 :)',TO_DATE('2019-05-22','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'관심있는 유저를 팔로우하면 뭐가 달라지나요?','관심있는 유저를 팔로우하면 해당 유저가 모임 개최시 관련 정보를 보다 수월하게 보실 수 있습니다 :)',TO_DATE('2019-05-02','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'모임을 개최하고 싶은데.. 저도 개설자가 될 수 있을까요?','사교에 가입한 회원이라면 누구나 모임개최 및 참여가 가능합니다 :)',TO_DATE('2019-05-01','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'한 사람이 여러 명 것을 신청할 수 있나요?','사교는 1인당 1계정 원칙을 준수하고 있습니다. 한 사람이 여러명의 참여신청을 하는것은 불가능 합니다.',TO_DATE('2019-04-15','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'관심사는 무엇인가요?','회원님이 선택하신 관심사에 따라 회원님들에게 알맞은 정보가 먼저 보이게 됩니다. 관심사를 입력할때는 신중하게 입력해 주세요 ^^ ',TO_DATE('2019-04-01','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'회원탈퇴는 어떻게 하나요?','고객센터>회원탈퇴 탭을 클릭하시면 회원탈퇴를 진행하실수 있습니다. ',TO_DATE('2019-03-22','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'회원정보는 어떻게 변경하나요?','[마이페이지]에서 회원정보 수정 탭을 클릭하시면 회원정보를 바꾸실수 있습니다. 아이디는 변경 불가하오니 이점 참고 부탁드립니다 :)',TO_DATE('2019-02-01','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'개최한 모임을 양도하고싶은데 가능한가요?','개최한 모임은 양도가 불가능합니다. ',TO_DATE('2019-01-22','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'비회원도 사교를 이용할 수 있나요?','사교에 게시된 모든 모임은 회원가입 없이도 일부분만 볼수 있습니다. 참여를 위해서는 사교에 가입해주세요 ^^',TO_DATE('2019-01-01','YYYY-MM-DD'));

INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'개최자(호스트)에게 질문도 할 수 있나요?','참여 신청시 코멘트 입력란을 통해 질문을 하실 수 있습니다',TO_DATE('2018-12-24','YYYY-MM-DD'));


INSERT INTO FAQ(ID,TITLE, CONTENTS, FAQDATE)
VALUES(FAQ_SEQ.NEXTVAL,'사교(SAGYO)란? ','사교(SAGYO)는 소셜 다이닝 플랫폼 입니다.
관심사가 비슷한 사람들을 모아 소통하며 더 행복한 일상이 만들어지도록 도와주는 서비스 플랫폼 입니다. 사교를 통해 지친 일상속에서 활력을 찾길 바랍니다:) ',TO_DATE('2018-02-01','YYYY-MM-DD'));



-- FAQ 테이블 INSERT 쿼리문 끝 

--○ NOTICE 테이블 INSERT 쿼리문
INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'개인정보 처리방침 변경 안내','개인정보 처리방침 변경에 관하여 알려드리고자 합니다.

회원님들께서는 변경된 개인정보 처리방침 내용을 확인하시고 서비스 이용에 불편을 겪지 않도록 참고하여 주시기 바랍니다.


본 변경된 개인정보 처리방침은 2019년 5월 24일자로 적용됩니다.



본 개인정보 처리방침 변경에 동의하시지 않는 경우, 


변경 개인정보 처리방침 적용일자 전일까지 사교 개설자 지원센터를 통하여 회사에 거부의사를 

표시하고 서비스 이용계약을 해지를 할 수 있으며, 시행일까지 별도의 거부 의사를 표시하지 않으시는 

경우 변경된 개인정보 처리방침에 동의한 것으로 간주됩니다.',TO_DATE('2018-02-01','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'제목','내용',TO_DATE('날짜','YYYY-MM-DD'));


INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'설 연휴 고객센터 운영 시간 안내','2018년 2월 15일(목)

- 카카오톡 @SAGYO 단축 운영 (10:00 ~ 15:00)

- 전화 문의는 운영되지 않습니다



2018년 2월 16일(금)

- 설 당일 고객센터 전화 및 카카오톡이 모두 운영되지 않습니다.



2018년 2월 17일(토) ~ 2월 18일(일)

- 카카오톡 @SAGYO 정상 운영 (10:00 ~ 19:00)

- 전화 문의는 운영되지 않습니다



※ 설 연휴 동안, 일부 상담처리가 불가할 수 있습니다.

※ 문의 및 업무 처리는 2/19(월)부터 순차적으로 처리될 예정입니다.',TO_DATE('2018-02-14','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'5월 연휴기간 고객센터 운영시간 안내','안녕하세요. 회원님 :)
사교 고객센터입니다.


어느덧 가정의 달인 5월이 다가왔습니다.
근로자의 날 및 어린이날 대체 휴무로 인하여 연휴가 많은 날이기도 합니다.

따라서, 연휴 기간 사교 서비스 이용에 차질이 생기지 않도록 사교 고객센터 일정에 대해 안내해 드립니다.



[5월 연휴 해당일]

1) 5/1 화요일 : 근로자의 날

2) 5/7 월요일 : 어린이날 대체공휴일

3) 5/22 화요일 : 석가탄신일


[고객센터 운영시간 안내]

1. 사교 고객센터 카카오톡 @SAGYO 단축운영
> 10:00 am ~ 14:00 pm

2. 고객센터(02-512-3662) 전화 상담 운영 X

※ 주말에도 사교 고객센터 카카오톡은 정상 운영됩니다.
※ 연휴(주말 포함)에 전화 상담은 운영되지 않습니다.


2018년 5월 사교와 함께
즐거운 연휴 되시기 바랍니다 :)


감사합니다.
사교 고객센터 드림',TO_DATE('2018-04-30','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'6월 공휴일 고객센터 운영일정 안내','안녕하세요. 회원님 :)
사교 고객센터입니다.


벌써 날씨가 더워지기 시작하는 6월이 다가왔습니다.
현충일 및 지방선거로 인하여 해당일에는 고객센터 운영시간이 변경 됩니다.

따라서, 공휴일 고객 상담에 차질이 생기지 않도록 고객센터 운영 일정에 대해 안내해 드립니다.

ㅡ

[6월 공휴일 일정]

1) 6월 6일 수요일 : 현충일

2) 6월 13일 수요일 : 지방선거


[고객센터 운영시간 안내]

1. 사교 고객센터 카카오톡 @sagyo(사교) 단축운영
> 10:00 am ~ 14:00 pm

2. 고객센터 전화 상담 운영 X

※ 주말에도 사교 고객센터 카카오톡은 정상 운영(10:00 ~ 19:00)됩니다.
※ 공휴일(주말 포함)에 전화 상담은 운영되지 않습니다.

ㅡ


2018년 6월도 사교과 함께
즐거운 휴일을 보내시길 바랍니다 :)



감사합니다.
사교 고객센터 드림',TO_DATE('2018-06-01','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'7월 26일 사교 고객센터 단축 운영 안내','안녕하세요. 회원님 :)

사교 고객센터입니다.



사교 내부 행사로 인하여 카카오톡 플러스친구 및 전화 상담이 다음과 같이 단축 운영될 예정입니다.

7월 26일(목) 10:00~16:00
16시 이후 문의 및 업무 처리는 7월 27일(금)부터 순차적으로 처리될 예정이니 참고 부탁드립니다.



연일 극심한 폭염에 건강 조심하시길 바랍니다.



감사합니다.

사교 고객센터 드림',TO_DATE('2018-07-05','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'[사과문] 일시적인 서비스 이용 불가로 인해 사과 말씀드립니다','안녕하세요 회원님

사교 고객센터 입니다.





8월 9일 목요일 오전 10시 30분부터 오후 1시 30분까지 사교Web에서 사교 모임 전체 혹은 일부가 검색 및 보이지 않는 현상이 발생하였습니다.





현재 해당 문제는 해결되었으며, 사교 서비스 이용 중 불편을 드려 죄송합니다.





추가로 같은 현상이 발생하지 않도록, 서버 및 시스템 패치까지 완료하여 원활한 서비스 이용이 가능하게 되었습니다.





다시 한번 불편을 드려 죄송하다는 사과의 말씀 드리며, 앞으로 더 나은 서비스를 제공하기 위해 최선을 다하겠습니다.





추가 불편사항 및 피드백이 있으시다면 cs@sagyo.com으로 보내주시면 빠른 답변드리도록 하겠습니다.





감사합니다



- 사교 고객센터 드림-',TO_DATE('2018-08-09','YYYY-MM-DD'));








-------------------- 여기서  부터 한꺼번에 컨트롤 엔터 할꺼들 
INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'광복절(8.15) 고객센터 단축운영 안내','안녕하세요. 회원님 :)
사교 고객센터입니다.





이번 8월 15일(수요일)에는 광복절 휴무로 인하여 고객센터 운영 시간이 단축됩니다.

상담에 차질이 생기지 않도록 고객센터 운영 일정에 대하여 공지 드립니다.

※ 사교 App/Web 서비스는 정상적으로 이용하실 수 있습니다.


ㅡ

[고객센터 단축 운영 안내]

1. 사교 고객센터 카카오톡 @sagyo(사교) 단축운영
> 오전 10:00 ~ 오후 1:00 까지

2. 고객센터 전화 상담 운영 X

단축운영 이후, 문의사항은 카카오 플러스친구 @sagyo(사교) 혹은 cs@frientrip.com으로 남겨주시면 순차적으로 처리해드리도록 하겠습니다.

ㅡ


감사합니다.
사교 고객센터 드림',TO_DATE('2018-08-14 ','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'8월 30일(목) 고객센터 단축 운영 안내','안녕하세요. 회원님 :)

사교 고객센터입니다.





사교 내부 행사로 인하여 카카오톡 플러스친구 및 전화 상담이 다음과 같이 단축 운영될 예정입니다.





- 8월 30일(목) 10:00~16:00





16시 이후 문의는

8월 31일(금)부터 순차적으로 처리될 예정이니 참고 부탁드립니다.





감사합니다.

사교 고객센터 드림',TO_DATE('2018-08-29','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'12월 25일(화요일) 고객센터 단축 운영 안내','안녕하세요. 회원님 :)

사교 고객센터입니다.



12월 25일(화)은 크리스마스 휴무로 인하여 고객센터가 다음과 같이 단축 운영될 예정입니다.



상담에 차질이 생기지 않도록 참고 부탁드립니다.



ㅡ



[사교 고객센터 운영 시간]

- 카카오톡 : 오전 11:00 ~ 오후 2:00 까지

- 전화 상담 : 운영 안함



단축 운영 이후, 문의사항은 카카오 플러스친구 @sagyo(사교) 혹은 cs@frientrip.com으로 남겨주시면 순차적으로 처리해드리도록 하겠습니다.



ㅡ



즐거운 휴일 보내시길 바랍니다 :)



감사합니다.

사교 고객센터 드림',TO_DATE('2018-12-19 ','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'2019년 1월 1일(화요일) 고객센터 단축 운영 안내','안녕하세요. 회원님 :)

사교 고객센터입니다.



2019년 1월 1일(화요일)은 휴무로 인하여 고객센터가 다음과 같이 단축 운영될 예정입니다.



상담에 차질이 생기지 않도록 참고 부탁드립니다.



ㅡ



[사교 고객센터 운영 시간]

- 카카오톡 : 오전 11:00 ~ 오후 2:00 까지

- 전화상담 : 운영 안함



단축 운영 이후, 문의사항은 카카오 플러스친구 @sagyo(사교) 혹은 cs@frientrip.com으로 남겨주시면 순차적으로 처리해드리도록 하겠습니다.



ㅡ



즐거운 휴일 보내시길 바랍니다 :)



감사합니다.

사교 고객센터 드림',TO_DATE('2018-12-26','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'2019년 기해년! 새해 복 많이 받으세요 :)','사교 회원님!



2018년 사교과 함께



멋진 여가 문화를 만들어주셔서 감사합니다



-



2019년 기해년에도 회원님들의 



더 멋진 여가생활을 만들기 위해



최선을 다하는 사교이 되겠습니다.



-



새해 복 많이 받으세요 :)



사교 전 직원 일동',TO_DATE('2018-12-31','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'1월 3일(목요일) 고객센터 단축 운영 안내','안녕하세요. 회원님 :)

사교 고객센터입니다.



사교 내부 행사로 인하여 카카오톡 플러스친구 및 전화 상담이 다음과 같이 단축 운영될 예정입니다.



<단축 운영 일정>

- 2019년 1월 3일(목) 11:00~16:00



16시 이후 문의 및 업무 처리는 1월 4일(금)부터 순차적으로 처리될 예정이니 참고 부탁드립니다.



새해 복 많이 받으세요 :)



감사합니다.
사교 고객센터 드림',TO_DATE('2019-01-02','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'설 연휴기간 (2/4 ~ 2/6) 고객센터 단축 운영 안내','안녕하세요. 회원님 :)

사교 고객센터입니다.



2/4 (월) ~ 2/6 (수) 설 연휴 기간 동안 사교 고객센터가 단축 운영될 예정입니다.



카카오톡 플러스친구 통해 문의 내용을 남기실 수 있으나, 일정 변경 및 사교 관련 문의 등 문의에 대해 처리 및 답변이 제한되니 양해부탁드립니다.





[사교 고객센터 단축 운영 안내]

- 2월 4일 (월) ~ 2월 6일 (수)

- 카카오톡 : 오전 11:00 ~ 오후 2:00 까지

- 전화 및 메일 상담 불가





문의사항은 카카오 플러스친구 @sagyo(사교) 으로 남겨주시면 2/7 목요일부터 순차적으로 처리해드리겠습니다.



즐거운 설 연휴 보내시길 바랍니다 :)



감사합니다.

사교 고객센터 드림',TO_DATE('2019-01-30','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'2월 14일 (목요일) 고객센터 단축 운영 안내','안녕하세요. 회원님 :)

사교 고객센터입니다.



사교 내부 행사로 인하여 카카오톡 플러스친구 및 전화 상담이 다음과 같이 단축 운영될 예정입니다.



<단축 운영 일정>

- 2019년 2월 14일(목) 11:00~16:00



16시 이후 문의 및 업무 처리는 2월 15일(금)부터 순차적으로 처리될 예정이니 참고 부탁드립니다.



감사합니다.

사교 고객센터 드림',TO_DATE('2019-02-13','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'3월 1일 (금요일) 고객센터 단축 운영 안내','안녕하세요, 회원님 :)

사교 고객센터입니다.



3월 1일(금요일)은 삼일절 휴일로 인하여 사교 고객센터가 단축 운영될 예정입니다.



카카오 플러스친구를 통해 문의 내용을 남기실 수 있으나, 일정 변경 및 사교 관련 문의 등에 대해 처리 및 답변이 제한되니 양해부탁드립니다.



ㅡ



[사교 고객센터 단축 운영 안내]

- 카카오톡 : 오전 11:00 ~ 오후 2:00 까지

- 전화 및 메일 상담 불가



문의사항은 카카오 플러스친구 @sagyo(사교)으로 남겨주시면 3/4 월요일에 순차적으로 처리해드리도록 하겠습니다.



ㅡ



즐거운 휴일 보내시길 바랍니다



감사합니다.

사교 고객센터 드림',TO_DATE('2019-02-27','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'3월 7일 (목요일) 고객센터 단축 운영 안내','안녕하세요. 회원님 :)
사교 고객센터입니다.



사교 내부 행사로 인하여 카카오톡 플러스친구 및 전화 상담이 다음과 같이 단축 운영될 예정입니다.



<단축 운영 일정>

- 2019년 3월 7일(목) 11:00~16:00



16시 이후 문의 및 업무 처리는 3월 8일(금)부터 순차적으로 처리될 예정이니 참고 부탁드립니다.



감사합니다.

사교 고객센터 드림',TO_DATE('2019-03-06','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'위치기반 서비스 이용약관 신설 및 이용약관, 개인정보 처리방침 변경 안내','안녕하세요.

사교 고객센터 입니다.



항상 사교을 이용해 주셔서 감사드리며, 사교 위치기반서비스 이용약관 신설 및 이용약관, 개인정보 처리방침 변경에 관하여 알려드리고자 합니다.



회원님들께서는 신설된 프렌트립 위치기반서비스 이용약관 및 이용약관, 개인정보 처리방침 변경 내용을 확인하시고 서비스 이용에 불편을 겪지 않도록 참고하여 주시기 바랍니다.



본 신설 위치기반서비스 이용약관 및 변경된 이용약관, 개인정보 처리방침은 2019년 3월 15일자로 적용됩니다.



본 위치기반서비스 이용약관 신설 및 이용약관, 개인정보 처리방침 변경에 동의하시지 않는 경우, 본 신설 위치기반서비스 이용약관 및 변경 이용약관, 개인정보 처리방침 적용일자 전일까지 사교 개설자 지원센터를 통하여 회사에 거부의사를 표시하고 서비스 이용계약을 해지를 할 수 있으며, 시행일까지 별도의 거부 의사를 표시하지 않으시는 경우 신설된 위치기반서비스 이용약관 및 변경 이용약관, 개인정보 처리방침에 동의한 것으로 간주됩니다.',TO_DATE('2019-03-08','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'3월 20일 (수) 사교 웹사이트 업데이트 안내','안녕하세요 회원님,

사교 고객센터입니다.



항상 사교을 이용해 주셔서 감사드리며, 금일(3/20 수) 사교 웹사이트가 업데이트 될 예정입니다!',TO_DATE('2019-03-20','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'4월 4일 (목요일) 고객센터 단축 운영 안내','안녕하세요. 회원님 :)

사교 고객센터 입니다.



4월 4일 (목) 16시부터 사교 전 직원이 액티비티 데이(사교)를 즐기러 갑니다 :)



* 사교 액티비티 데이란?

사교 전 직원이 조를 나눠 1달에 1번! 사교 액티비티를 정해, 직접 체험해보는 기업 문화입니다.



다양한 사교을 경험해보고 더 좋은 사교을 회원님들께 소개해 드릴 수 있도록 열심히 즐기고 오겠습니다!



이로 인해, 카카오톡 플러스친구 및 전화 상담이 다음과 같이 단축 운영되오니 양해 부탁드립니다



<단축 운영 일정>

- 2019년 4월 4일(목) 11:00~16:00



16시 이후 문의 및 업무 처리는 4월 5일(금)부터 순차적으로 처리될 예정이니 참고 부탁드립니다.



감사합니다.

사교 고객센터 드림',TO_DATE('2019-04-03','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'5월 1일 (수요일) 고객센터 단축 운영 안내','안녕하세요, 회원님 :)

사교 고객센터입니다.



5월 1일(수요일)은 근로자의 날로 사교 고객센터가 단축 운영될 예정입니다.

카카오 플러스친구를 통해 문의 내용을 남기실 수 있으나, 일정 변경 및 사교 관련 문의 등에 대해 처리 및 답변이 제한되니 양해부탁드립니다.



ㅡ



[사교 고객센터 단축 운영 안내]

- 카카오톡 : 오전 11:00 ~ 오후 2:00 까지

- 전화 및 메일 상담 불가



문의사항은 카카오 플러스친구 @sagyo(사교)으로 남겨주시면 5/2 목요일에 순차적으로 처리해드리도록 하겠습니다.



ㅡ



감사합니다.

사교 고객센터 드림',TO_DATE('2019-04-29','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'5월 2일 (목요일) 고객센터 단축 운영 안내','안녕하세요. 회원님 :)

사교 고객센터 입니다.



5월 2일 (목) 16시부터 사교 전 직원이 액티비티 데이(사교)를 즐기러 갑니다 :)



* 사교 액티비티 데이란?

사교 전 직원이 조를 나눠 1달에 1번! 사교 액티비티를 정해, 직접 체험해보는 기업 문화입니다.



다양한 사교을 경험해보고 더 좋은 사교을 회원님들께 소개해 드릴 수 있도록 열심히 즐기고 오겠습니다!

이로 인해, 카카오톡 플러스친구 및 전화 상담이 다음과 같이 단축 운영되오니 양해 부탁드립니다



<단축 운영 일정>

- 2019년 5월 2일(목) 11:00~16:00



16시 이후 문의 및 업무 처리는 5월 3일(금)부터 순차적으로 처리될 예정이니 참고 부탁드립니다.



감사합니다.

사교 고객센터 드림',TO_DATE('2019-04-30','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'5월 6일 (월요일) 고객센터 단축 운영 안내','안녕하세요, 회원님 :)

사교 고객센터입니다.



5월 6일 (월요일)은 어린이날 대체 휴무일로 사교 고객센터가 단축 운영될 예정입니다.

카카오 플러스친구를 통해 문의 내용을 남기실 수 있으나, 일정 변경 및 사교 관련 문의 등에 대해 처리 및 답변이 제한되니 양해부탁드립니다.



ㅡ



[사교 고객센터 단축 운영 안내]

- 카카오톡 : 오전 11:00 ~ 오후 2:00 까지

- 전화 및 메일 상담 불가



문의사항은 카카오 플러스친구 @sagyo(사교)으로 남겨주시면 5/7 화요일에 순차적으로 처리해드리도록 하겠습니다.



ㅡ



감사합니다.

사교 고객센터 드림',TO_DATE('2019-05-03','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'개인정보 처리방침 변경 안내','안녕하세요.

사교 고객센터입니다.



항상 사교을 이용해 주셔서 감사드리며, 사교 개인정보 처리방침 변경에 관하여 알려드리고자 합니다.



회원님들께서는 변경된 개인정보 처리방침 내용을 확인하시고 서비스 이용에 불편을 겪지 않도록 참고하여 주시기 바랍니다.



본 변경된 개인정보 처리방침은 2019년 5월 24일자로 적용됩니다.



본 개인정보 처리방침 변경에 동의하시지 않는 경우, 변경 개인정보 처리방침 적용일자 전일까지 사교 개설자 지원센터를 통하여 회사에 거부의사를 표시하고 서비스 이용계약을 해지를 할 수 있으며, 시행일까지 별도의 거부 의사를 표시하지 않으시는 경우 변경된 개인정보 처리방침에 동의한 것으로 간주됩니다.',TO_DATE('2019-05-17','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'6월 6일 (목요일) 고객센터 단축 운영 안내','안녕하세요, 회원님 :)

사교 고객센터입니다.



6월 6일 (목요일)은 현충일 휴일로 사교 고객센터가 단축 운영될 예정입니다.

카카오 플러스친구를 통해 문의 내용을 남기실 수 있으나, 일정 변경 및 사교 관련 문의 등에 대해 처리 및 답변이 제한되니 양해부탁드립니다.



ㅡ



[사교 고객센터 단축 운영 안내]

- 카카오톡 : 오전 11:00 ~ 오후 2:00 까지

- 전화 및 메일 상담 불가



문의사항은 카카오 플러스친구 @sagyo(사교)으로 남겨주시면 6/7 금요일에 순차적으로 처리해드리도록 하겠습니다.



ㅡ



감사합니다.

사교 고객센터 드림',TO_DATE('2019-06-04','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'개인정보 처리방침 및 위치기반 서비스 이용약관 변경 안내','안녕하세요, 회원님.

사교 고객센터입니다.



항상 사교을 이용해 주셔서 감사드리며, 사교 개인정보 처리방침 및 위치기반 서비스 이용약관 변경에 관하여 알려드리고자 합니다.

회원님들께서는 변경된 개인정보 처리방침 및 위치기반 서비스 이용약관 내용을 확인하시고 서비스 이용에 불편을 겪지 않도록 참고하여 주시기 바랍니다.



본 변경된 개인정보 처리방침 및 위치기반 서비스 이용약관은 2019년 6월 12일자로 적용됩니다.



본 개인정보 처리방침 및 위치기반 서비스 이용약관 변경에 동의하시지 않는 경우, 개인정보 처리방침 및 위치기반 서비스 이용약관 적용일자 전일까지 사교 고객센터를 통하여 회사에 거부의사를 표시하고 서비스 이용계약을 해지를 할 수 있으며, 시행일까지 별도의 거부 의사를 표시하지 않으시는 경우 변경된 개인정보 처리방침 및 위치기반 서비스 이용약관에 동의한 것으로 간주됩니다.



[고객센터 문의 채널]

- 카카오 플러스친구 @sagyo

- 이메일 cs@frientrip.com',TO_DATE('2019-06-11','YYYY-MM-DD'));

INSERT INTO NOTICE(ID,TITLE, CONTENTS, NOTICEDATE)
VALUES(NOTICE_SEQ.NEXTVAL,'6월 13일 (목요일) 고객센터 단축 운영 안내','안녕하세요. 회원님 :)

사교 고객센터입니다.



6월 13일 (목) 16시부터 사교 전 직원이 액티비티 데이(사교)를 즐기러 갑니다 :)



* 사교 액티비티 데이란?

사교 전 직원이 조를 나눠 1달에 1번! 사교 액티비티를 정해, 직접 체험해보는 기업 문화입니다.



다양한 사교을 경험해보고 더 좋은 사교을 회원님들께 소개해 드릴 수 있도록 열심히 즐기고 오겠습니다!

이로 인해, 카카오 플러스친구 및 전화 상담이 다음과 같이 단축 운영되니 양해 부탁드려요.



<단축 운영 일정>

- 2019년 6월 13일 (목) 11:00~16:00



16시 이후 문의 및 업무 처리는 6월 14일 (금)부터 순차적으로 처리될 예정이니 참고 부탁드립니다.



감사합니다.

사교 고객센터 드림',TO_DATE('2019-06-11','YYYY-MM-DD'));

-- NOTICE 끝 

--○ GENDER 테이블 INSERT 쿼리문
INSERT INTO GENDER(GENDERID, GENDER) VALUES('GD00001','남자');
INSERT INTO GENDER(GENDERID, GENDER) VALUES('GD00002','여자');

--○ ADDR_SI 테이블 INSERT 쿼리문
INSERT INTO ADDR_SI(ADDRSIID, ADDRSINAME) VALUES(ADD_ID('ADDR_SI','ADDRSIID','SI'),'서울');
INSERT INTO ADDR_SI(ADDRSIID, ADDRSINAME) VALUES(ADD_ID('ADDR_SI','ADDRSIID','SI'),'대전');
INSERT INTO ADDR_SI(ADDRSIID, ADDRSINAME) VALUES(ADD_ID('ADDR_SI','ADDRSIID','SI'),'부산');
INSERT INTO ADDR_SI(ADDRSIID, ADDRSINAME) VALUES(ADD_ID('ADDR_SI','ADDRSIID','SI'),'인천');
INSERT INTO ADDR_SI(ADDRSIID, ADDRSINAME) VALUES(ADD_ID('ADDR_SI','ADDRSIID','SI'),'광주');

--○ INTEREST_MAIN 테이블 INSERT 쿼리문
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'스포츠');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'음악'||'&'||'예술');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'공예'||'&'||'DIY');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'사진'||'&'||'영상');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'요리'||'&'||'음료');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'학습');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'취업'||'&'||'재테크');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'뷰티'||'&'||'패션');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'미디어');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'IT'||'&'||'테크');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'건강'||'&'||'애견');
INSERT INTO INTEREST_MAIN(INTERMAINID, INTERMAINNAME) VALUES(ADD_ID('INTEREST_MAIN','INTERMAINID','IM'),'여행');

--○ CERTIFICATION_CATE 테이블 INSERT 쿼리문
INSERT INTO CERTIFICATION_CATE(CERTIID, CERTINAME) VALUES(ADD_ID('CERTIFICATION_CATE', 'CERTIID', 'CT'),'회원가입 휴대폰 인증' );
INSERT INTO CERTIFICATION_CATE(CERTIID, CERTINAME) VALUES(ADD_ID('CERTIFICATION_CATE', 'CERTIID', 'CT'),'회원가입 이메일 인증' );
INSERT INTO CERTIFICATION_CATE(CERTIID, CERTINAME) VALUES(ADD_ID('CERTIFICATION_CATE', 'CERTIID', 'CT'),'아이디 찾기 휴대폰 인증' );
INSERT INTO CERTIFICATION_CATE(CERTIID, CERTINAME) VALUES(ADD_ID('CERTIFICATION_CATE', 'CERTIID', 'CT'),'아이디 찾기 이메일 인증' );
INSERT INTO CERTIFICATION_CATE(CERTIID, CERTINAME) VALUES(ADD_ID('CERTIFICATION_CATE', 'CERTIID', 'CT'),'비밀번호 찾기 휴대폰 인증' );
INSERT INTO CERTIFICATION_CATE(CERTIID, CERTINAME) VALUES(ADD_ID('CERTIFICATION_CATE', 'CERTIID', 'CT'),'비밀번호 찾기 이메일 인증' );

--○ MOOD 테이블 INSERT 쿼리문
INSERT INTO MOOD(MOODID, MOODNAME) VALUES(ADD_ID('MOOD','MOODID','MI'),'무관');
INSERT INTO MOOD(MOODID, MOODNAME) VALUES(ADD_ID('MOOD','MOODID','MI'),'진지한');
INSERT INTO MOOD(MOODID, MOODNAME) VALUES(ADD_ID('MOOD','MOODID','MI'),'가벼운');

--○ DRINK 테이블 INSERT 쿼리문
INSERT INTO DRINK(DRINKID,DRINK)
VALUES ('DR00001','음주가능');
INSERT INTO DRINK(DRINKID,DRINK)
VALUES ('DR00002','음주불가능');

--○ STATUS 테이블 INSERT 쿼리문
INSERT INTO STATUS(STATUSID, STATUSNAME)
VALUES(ADD_ID('STATUS', 'STATUSID', 'ST'), '대기');
INSERT INTO STATUS(STATUSID, STATUSNAME)
VALUES(ADD_ID('STATUS', 'STATUSID', 'ST'), '수락대기');
INSERT INTO STATUS(STATUSID, STATUSNAME) 
VALUES(ADD_ID('STATUS', 'STATUSID', 'ST'), '만남확정');
INSERT INTO STATUS(STATUSID, STATUSNAME) 
VALUES(ADD_ID('STATUS', 'STATUSID', 'ST'), '만남실패');

--○ SAME_GENDER 테이블 INSERT 쿼리문
INSERT INTO SAME_GENDER(SAMEGENDERID,SAMEGENDER)
VALUES ('SG00001' ,'동성만');
INSERT INTO SAME_GENDER(SAMEGENDERID,SAMEGENDER)
VALUES ('SG00002' ,'무관');

--○ REPORT_CATE 테이블 INSERT 쿼리문
INSERT INTO REPORT_CATE(REPORTCATEID, REPORTCATENAME) VALUES(ADD_ID('REPORT_CATE', 'REPORTCATEID', 'RC'),'욕설' );
INSERT INTO REPORT_CATE(REPORTCATEID, REPORTCATENAME) VALUES(ADD_ID('REPORT_CATE', 'REPORTCATEID', 'RC'),'음란물' );
INSERT INTO REPORT_CATE(REPORTCATEID, REPORTCATENAME) VALUES(ADD_ID('REPORT_CATE', 'REPORTCATEID', 'RC'),'불법자료' );
INSERT INTO REPORT_CATE(REPORTCATEID, REPORTCATENAME) VALUES(ADD_ID('REPORT_CATE', 'REPORTCATEID', 'RC'),'스팸·광고' );
INSERT INTO REPORT_CATE(REPORTCATEID, REPORTCATENAME) VALUES(ADD_ID('REPORT_CATE', 'REPORTCATEID', 'RC'),'권리 침해' );
INSERT INTO REPORT_CATE(REPORTCATEID, REPORTCATENAME) VALUES(ADD_ID('REPORT_CATE', 'REPORTCATEID', 'RC'),'기타' );

--○ REPLY_USER_TYPE 테이블 INSERT 쿼리문
INSERT INTO REPLY_USER_TYPE(USERTYPEID, USERTYPENAME) 
VALUES(ADD_ID('REPLY_USER_TYPE', 'USERTYPEID', 'RU'), '개설자');
INSERT INTO REPLY_USER_TYPE(USERTYPEID, USERTYPENAME) 
VALUES(ADD_ID('REPLY_USER_TYPE', 'USERTYPEID', 'RU'), '신청자');

--○ POINT_CATE 테이블 INSERT 쿼리문
INSERT INTO POINT_CATE(BADGEPOINTCATEID, BADGEPOINTCATENAME) VALUES(ADD_ID('POINT_CATE', 'BADGEPOINTCATEID', 'BC'), '칭찬');
INSERT INTO POINT_CATE(BADGEPOINTCATEID, BADGEPOINTCATENAME) VALUES(ADD_ID('POINT_CATE', 'BADGEPOINTCATEID', 'BC'), '꾸중');
INSERT INTO POINT_CATE(BADGEPOINTCATEID, BADGEPOINTCATENAME) VALUES(ADD_ID('POINT_CATE', 'BADGEPOINTCATEID', 'BC'), '개설자');
INSERT INTO POINT_CATE(BADGEPOINTCATEID, BADGEPOINTCATENAME) VALUES(ADD_ID('POINT_CATE', 'BADGEPOINTCATEID', 'BC'), '활동');




------------------------------------------------------ 초록 ------------------------------------------------------

--○ LOGIN 테이블 INSERT 쿼리문
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('admin001',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00001');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('b001',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('blumbald',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('bradocus',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('brogan',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('baheela',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('bermeda',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('berson',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('bjoreen',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('blisset',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('brathaid',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('eadwynda',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('edaine',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('edrosink',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('eitlias',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('ellell',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('elrone',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('eredui',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('ervetan',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('everette',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('evrogan',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('aberine', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('aladanne', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('anlant', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('armelorc', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('adalleif', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('alberic', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('annetia', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('arthisef', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('adiard', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('advice', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('divien', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('dymira', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('degink', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('dweald', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('duwaino', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('dogwen', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('derbonie', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('dunarea', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('dodulla', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('dagona',CRYPTPACK.ENCRYPT('JAVA006$','JAVA006$'),'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('caroin', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('coimhin', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('channa', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('collerva', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('ciriel', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('cirdan', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('crowen', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('chrigh', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('chiania', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('cointer', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');

--○ LOGIN 테이블 INSERT 쿼리문 추가
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('falann', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('fenechta', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('fiollos', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('framna', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('falara', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('fennou', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('fiosogas', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('frania', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('falsie', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('ferloi', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('galath', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('gerikt', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('glargate', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('grafton', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('gallon', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('gerlin', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('glynse', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('grenca', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('garole', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('gernig', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('hadden', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('heelya', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('hilies', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('howeyn', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('haimes', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('heirnach', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('hithats', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('hraedden', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('halond', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('helico', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('iainta', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('imlado', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('inthiana', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('irmith', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('ianach', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('imnink', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('inthin', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('isefina', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('iarwer', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('ingaut', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('jadencoh', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('jeffanui', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('jezzie', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('joycey', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('jagorga', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('jeldis', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('jhasli', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('jozenna', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('jagorna', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');
INSERT INTO LOGIN(USERID, PWD, ROLEID) VALUES('jennan', CRYPTPACK.ENCRYPT('JAVA006$', 'JAVA006$'), 'RL00002');

--○ ADDR_GU 테이블 INSERT 쿼리문
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '강남구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '강동구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '강서구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '강북구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '관악구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '광진구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '구로구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '금천구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '노원구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '동대문구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '도봉구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '동작구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '마포구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '서대문구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '성동구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '성북구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '서초구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '송파구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '영등포구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '용산구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '양천구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '은평구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '종로구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '중구', 'SI00001');
INSERT INTO ADDR_GU(ADDRGUID, ADDRGUNAME, ADDRSIID) VALUES(ADD_ID('ADDR_GU', 'ADDRGUID', 'GU'), '중랑구', 'SI00001');

--○ INTEREST_SUB 테이블 INSERT 쿼리문
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'클라이밍','IM00001');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'패러글라이딩','IM00001');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'구기스포츠','IM00001');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'무도'||'&'||'댄스','IM00001');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'수영','IM00001');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'요가'||'&'||'발레','IM00001');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'필라테스','IM00001');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'레저스포츠','IM00001');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'골프','IM00001');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00001');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'피아노','IM00002');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타(악기)','IM00002');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'보컬','IM00002');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'뮤지컬'||'&'||'연극','IM00002');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'동양화','IM00002');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'서양화','IM00002');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'캘리그라피'||'&'||'드로잉','IM00002');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00002');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'도예','IM00003');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'가죽공예','IM00003');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'향수','IM00003');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'목공','IM00003');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'원예','IM00003');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'인테리어','IM00003');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00003');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'사진','IM00004');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'사진편집','IM00004');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'영상','IM00004');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'영상편집','IM00004');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00004');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'한식','IM00005');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'일식','IM00005');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'아시아음식','IM00005');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'양식','IM00005');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'떡'||'&'||'한과','IM00005');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'베이킹'||'&'||'디저트','IM00005');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'커피'||'&'||'주류','IM00005');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00005');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'영어','IM00006');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'일본어','IM00006');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'중국어','IM00006');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'철학','IM00006');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'사회'||'&'||'과학','IM00006');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00006');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'자소서','IM00007');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'면접','IM00007');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'금융상품','IM00007');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'부동산','IM00007');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'주식','IM00007');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00007');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'패션','IM00008');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'헤어'||'&'||'메이크업','IM00008');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'네일'||'&'||'왁싱','IM00008');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00008');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'예능','IM00009');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'영화','IM00009');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'드라마','IM00009');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'웹툰','IM00009');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'만화'||'&'||'소설','IM00009');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00009');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'모바일','IM00010');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'웹','IM00010');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'컴퓨터','IM00010');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'노트북','IM00010');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00010');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'심리'||'&'||'상담','IM00011');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'스파'||'&'||'마사지','IM00011');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'애견','IM00011');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00011');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'국내','IM00012');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'동북아시아','IM00012');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'동남아시아'||'&'||'서남아시아','IM00012');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'미주(북·남미)','IM00012');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'유럽','IM00012');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'대양주'||'&'||'괌','IM00012');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'중동'||'&'||'아프리카','IM00012');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'러시아'||'&'||'몽골'||'&'||'중앙아시아','IM00012');
INSERT INTO INTEREST_SUB(INTERSUBID,INTERSUBNAME,INTERMAINID)
VALUES (ADD_ID('INTEREST_SUB' ,'INTERSUBID','IS'),'기타','IM00012');

--○ POINT 테이블 INSERT 쿼리문
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '매너왕', 'BC00001', '모임에서 매너있고 친절한 사람에게 "매너왕" 포인트를 선물하세요! 매너왕 포인트 3개를 획득하면 해당 유저가 매너왕 배지를 얻을 수 있습니다.', '이 포인트는 모임 장소에서 매너있고 친절하게 행동한 사람에게 부여하는 배지입니다.', 'img/매너왕.png', '3');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '지식왕', 'BC00001', '모임에서 해박한 지식을 뽐낸 사람에게 "지식왕" 포인트를 선물하세요! 지식왕 포인트 3개를 획득하면 해당 유저가 지식왕 배지를 얻을 수 있습니다.', '이 포인트는 관심사에 대해 해박한 지식을 바탕으로 모임의 수준을 높인 사람에게 부여하는 배지입니다. ', 'img/지식왕.png', '3');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '핵인싸', 'BC00001', '모임에서 분위기를 주도하는 사람에게 "핵인싸" 포인트를 선물하세요! 핵인싸 포인트 3개를 획득하면 해당 유저가 핵인싸 배지를 얻을 수 있습니다.', '이 포인트는 밝은 분위기와 재치 있는 말로 모임을 즐겁게 이끌어 나간 사람에게 부여하는 배지입니다.', 'img/핵인싸.png', '3');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '불참러', 'BC00002', '약속에 나오지 않은 사람에게 "불참러" 포인트를 부여하세요! 불참러 포인트 3개를 획득하면 해당 유저에게 불참러 배지가 부여됩니다.', '이 포인트는 타당한 이유 없이 모임 장소에 나타나지 않은 사람에게 부여하는 배지입니다.', 'img/불참러.png', '3');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '지각러', 'BC00002', '약속에 지각하는 사람에게 "지각러" 포인트를 부여하세요! 지각러 포인트 3개를 획득하면 해당 유저에게 지각러 배지가 부여됩니다.', '이 포인트는 모임에 지각해 다른 사람들에게 민폐를 끼친 사람에게 부여하는 배지입니다.', 'img/지각러.png', '3');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '비매너', 'BC00002', '모임에서 매너없는 행동을 보여준 사람에게 "비매너" 포인트를 부여하세요! 배매너 포인트 3개를 획득하면 해당 유저에게 비매너 배지가 부여됩니다.', '이 포인트는 모임에서 매너 없는 행동으로 다른 사람들을 불쾌하게 만든 사람에게 부여하는 배지입니다.', 'img/비매너.png', '3');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '여기왜왔니', 'BC00002', '모임에서 주제에 맞지 않는 이야기를 하는 사람에게 "여기왜왔니" 포인트를 부여하세요! 여기왜왔니 포인트 3개를 획득하면 해당 유저에게 여기왜왔니 배지가 부여됩니다.', '이 포인트는 모임 주제와 관련 없는 말을 자주해 분위기를 흐리는 사람에게 부여하는 배지입니다.', 'img/여기왜왔니.png', '3');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '맛잘알', 'BC00003', '맛집을 소개한 개설자에게 "맛잘알" 포인트를 선물하세요! 맛잘알 포인트 3개를 획득하면 해당 유저가 매너왕 배지를 얻을 수 있습니다.', '이 포인트는 좋은 가게를 골라 사람들을 기쁘게 한 개설자에게 부여하는 배지입니다.', 'img/맛잘알.png', '3');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '슈퍼방장', 'BC00003', '모임에서 뛰어난 리더쉽을 보여준 개설자에게 "슈퍼방장" 포인트를 선물하세요! 슈퍼방장 포인트 3개를 획득하면 해당 유저가 슈퍼방장 배지를 얻을 수 있습니다.', '이 포인트는 모임을 개설하고 모임을 잘 이끌어간 개설자에게 부여하는 배지입니다.', 'img/슈퍼방장.png', '3');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '뒷통수 조심', 'BC00003', '모임을 개설하고 불참한 개설자에게 "뒷통수 조심" 포인트를 부여하세요! 뒷통수 조심 포인트 3개를 획득하면 해당 유저에게 뒷통수 조심 배지가 부여됩니다.', '이 포인트는 모임을 개설하고 모임 장소에 불참한 개설자에게 부여하는 배지입니다.', 'img/뒤통수조심.png', '3');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '뉴비', 'BC00004', '신규 가입한 유저에게 부여되는 "뉴비" 배지! 멋진 만남을 기원합니다.', '이 포인트는 신규 가입한 회원에게 부여하는 배지입니다.', 'img/뉴비.png', '0');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '일반 참석러', 'BC00004', '모임을 15회 이상 참여한 유저에게 부여되는 "일반참석러" 배지! 활발한 활동을 기대합니다.', '이 포인트는 개설 모임을 15회 이상 참여한 사람에게 부여되는 뱃지입니다.', 'img/일반참석러.png', '15');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '우수 참석러', 'BC00004', '모임을 30회 이상 참여한 유저에게 부여되는 "우수참석러" 배지! 다양한 모임에 활발한 활동을 하셨습니다.', '이 포인트는 개설 모임을 30회 이상 참여한 사람에게 부여되는 뱃지입니다.', 'img/우수참석러.png', '30');
INSERT INTO POINT(BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID, BADGEPOINTDESC1, BADGEPOINTDESC2, URL, CONDITION)
VALUES(ADD_ID('POINT', 'BADGEPOINTID', 'BP'), '프로 참석러', 'BC00004', '모임을 50회 이상 참여한 유저에게 부여되는 "프로참석러" 배지! 모임의 끝판왕! 앞으로도 잘 부탁합니다.', '이 포인트는 개설 모임을 50회 이상 참여한 사람에게 부여되는 뱃지입니다.', 'img/프로참석러.png', '50');

------------------------------------------------------ 파랑 ------------------------------------------------------
--○ ADMIN 테이블 INSERT 쿼리문
INSERT INTO ADMIN(USERID) VALUES('admin001');

--○ USER_ESSENTIAL 테이블 INSERT 쿼리문
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('dagona', '말티즈', '김우주', TO_DATE('19950617','YYYY-MM-DD'), 'GD00001', '010-3311-3345','dagona@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('divien', '악어', '이사랑', TO_DATE('19920820','YYYY-MM-DD'), 'GD00002', '010-3122-3665','divien@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('dymira', '치와와', '김수호', TO_DATE('19910707','YYYY-MM-DD'), 'GD00001', '010-3201-3998','dymira@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('degink', '고양이', '한기린', TO_DATE('19960111','YYYY-MM-DD'), 'GD00001', '010-3457-3652','degink@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('dweald', '호랑이', '이소희', TO_DATE('19930401','YYYY-MM-DD'), 'GD00002', '010-3222-3244','dweald@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('duwaino', '사자', '정다솔', TO_DATE('19901212','YYYY-MM-DD'), 'GD00002', '010-3211-3111','duwaino@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('dogwen', '팬더', '김수현', TO_DATE('19890304','YYYY-MM-DD'), 'GD00001', '010-3454-3874','dogwen@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('derbonie', '기린', '홍세리', TO_DATE('19941118','YYYY-MM-DD'), 'GD00002', '010-3987-3965','derbonie@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('dunarea', '사슴', '김소희', TO_DATE('19970105','YYYY-MM-DD'), 'GD00002', '010-3145-3654','dunarea@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('dodulla', '코끼리', '한석호', TO_DATE('19960308','YYYY-MM-DD'), 'GD00001', '010-3157-3984','dodulla@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('eadwynda', '참새', '김숙현', TO_DATE('19880705','YYYY-MM-DD'), 'GD00002', '010-3788-3112','eadwynda@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('edaine', '비둘기', '오세희', TO_DATE('19900505','YYYY-MM-DD'), 'GD00002', '010-3554-3665','edaine@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('edrosink', '다람쥐', '민희찬', TO_DATE('19960602','YYYY-MM-DD'), 'GD00001', '010-3221-3114','edrosink@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('eitlias', '돼지', '이호찬', TO_DATE('19980712','YYYY-MM-DD'), 'GD00001', '010-3158-3336','eitlias@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('ellell', '웰시코기', '최보라', TO_DATE('19930404','YYYY-MM-DD'), 'GD00002', '010-3334-3336','ellell@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('b001', '치킨', '홍길동', TO_DATE('20100101','YYYY-MM-DD'), 'GD00001', '010-2001-2001','b001@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('blumbald', '피자', '정동호', TO_DATE('20100102','YYYY-MM-DD'), 'GD00001', '010-2002-2002','blumbald@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('bradocus', '국수', '안표섭', TO_DATE('20100103','YYYY-MM-DD'), 'GD00001', '010-2003-2003','bradocus@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('brogan', '돈가스', '전석진', TO_DATE('20100104','YYYY-MM-DD'), 'GD00001', '010-2004-2004','brogan@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('baheela', '김밥', '손상흠', TO_DATE('20100105','YYYY-MM-DD'), 'GD00001', '010-2005-2005','baheela@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('bermeda', '순대', '배자혁', TO_DATE('20100101','YYYY-MM-DD'), 'GD00001', '010-2006-2006','bermeda@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('berson', '햄버거', '전봉광', TO_DATE('20100102','YYYY-MM-DD'), 'GD00001', '010-2007-2007','berson@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('bjoreen', '스테이크', '안표섭', TO_DATE('20100103','YYYY-MM-DD'), 'GD00001', '010-2008-2008','bjoreen@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('blisset', '규카츠', '조석인', TO_DATE('20100104','YYYY-MM-DD'), 'GD00001', '010-2009-2009','blisset@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('brathaid', '돼지국밥', '전추환', TO_DATE('20100105','YYYY-MM-DD'), 'GD00001', '010-2010-2010','brathaid@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('anlant', '마로니에', '은현우', TO_DATE('19870429','YYYY-MM-DD'), 'GD00001', '010-1658-1973','anlant@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('aberine', '베아트리스', '유가인', TO_DATE('19930917','YYYY-MM-DD'), 'GD00001', '010-1143-1579','aberine@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('aladanne', '히야신스', '강마루', TO_DATE('19890422','YYYY-MM-DD'), 'GD00001', '010-1286-1953','aladanne@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('armelorc', '플록스', '이다슬', TO_DATE('19910217','YYYY-MM-DD'), 'GD00002', '010-1455-1768','armelorc@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('adalleif', '프리지아', '민서윤', TO_DATE('19950417','YYYY-MM-DD'), 'GD00002', '010-1357-1975','adalleif@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('alberic', '플라타너스', '한지우', TO_DATE('19901111','YYYY-MM-DD'), 'GD00001', '010-1224-1678','alberic@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('annetia', '카모밀레', '김수아', TO_DATE('19931225','YYYY-MM-DD'), 'GD00002', '010-1687-1887','annetia@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('arthisef', '제라늄', '유서현', TO_DATE('19960101','YYYY-MM-DD'), 'GD00001', '010-1957-1562','arthisef@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('adiard', '사프란', '박지아', TO_DATE('19940930','YYYY-MM-DD'), 'GD00002', '010-1786-1353','adiard@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('advice', '리아트리스', '정다윤', TO_DATE('19901017','YYYY-MM-DD'), 'GD00002', '010-1657-1768','advice@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('elrone', '멜리사', '한승헌', TO_DATE('19910515','YYYY-MM-DD'), 'GD00001', '010-1657-1697','elrone@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('eredui', '메리골드', '이주안', TO_DATE('19940722','YYYY-MM-DD'), 'GD00001', '010-1476-1347','eredui@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('ervetan', '라벤더', '박찬형', TO_DATE('20030927','YYYY-MM-DD'), 'GD00001', '010-1579-1798','ervetan@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('everette', '라일락', '한서인', TO_DATE('19850311','YYYY-MM-DD'), 'GD00002', '010-1325-1258','everette@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('evrogan', '데이지', '강수현', TO_DATE('19940228','YYYY-MM-DD'), 'GD00002', '010-1582-1588','evrogan@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('caroin', '리그오브레전드', '김이영', TO_DATE('19930914','YYYY-MM-DD'), 'GD00001', '010-4111-4111','caroin@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('coimhin', '전략적팀게임', '방준혁', TO_DATE('19930915','YYYY-MM-DD'), 'GD00001', '010-4222-4222','caroin@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('channa', '마인크래프트', '김수현', TO_DATE('19940815','YYYY-MM-DD'), 'GD00002', '010-4333-4333','channa@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('collerva', '하스스톤', '노가연', TO_DATE('19970215','YYYY-MM-DD'), 'GD00002', '010-4421-4421','collerva@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('ciriel', '와우', '이예지', TO_DATE('19970415','YYYY-MM-DD'), 'GD00002', '010-4522-4521','ciriel@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('cirdan', '패스오브엑자일', '윤현섭', TO_DATE('19900525','YYYY-MM-DD'), 'GD00001', '010-4626-4561','cirdan@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('crowen', '오토체스', '김동건', TO_DATE('19941225','YYYY-MM-DD'), 'GD00001', '010-4739-4769','crowen@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('chrigh', '오버워치', '최인성', TO_DATE('19931105','YYYY-MM-DD'), 'GD00001', '010-4838-4881','chrigh@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('chiania', '메이플스토리', '방태혁', TO_DATE('19930105','YYYY-MM-DD'), 'GD00001', '010-4942-4588','chiania@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE)
VALUES('cointer', '던전앤파이터', '양성룡', TO_DATE('19930105','YYYY-MM-DD'), 'GD00001', '010-4014-4089','cointer@naver.com',SYSDATE);

--○ USER_ESSENTIAL 테이블 INSERT 쿼리문 추가
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('falann', 'snowdrop', '위은재', TO_DATE('19841120','YYYY-MM-DD'), 'GD00001', '010-7781-4170','falann@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('fenechta', 'narcissus', '홍인준', TO_DATE('19850818','YYYY-MM-DD'), 'GD00001', '010-4703-5115','fenechta@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('fiollos', 'spring', '홍우진', TO_DATE('19861016','YYYY-MM-DD'), 'GD00001', '010-0854-5412','fiollos@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('framna', '튤립', '안건우', TO_DATE('19880805','YYYY-MM-DD'), 'GD00001', '010-6165-7664','framna@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('falara', 'tulipa', '차상현', TO_DATE('19921231','YYYY-MM-DD'), 'GD00001', '010-8441-2186','falara@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('fennou', '제비꽃', '하혜원', TO_DATE('19951030','YYYY-MM-DD'), 'GD00002', '010-8572-1666','fennou@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('fiosogas', 'alyssum', '백예원', TO_DATE('19970422','YYYY-MM-DD'), 'GD00002', '010-8501-7402','fiosogas@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('frania', '수선화', '배은정', TO_DATE('19890815','YYYY-MM-DD'), 'GD00002', '010-7562-1421','frania@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('falsie', 'cyclamen', '원수연', TO_DATE('19931209','YYYY-MM-DD'), 'GD00002', '010-6755-4787','falsie@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('ferloi', 'thorn', '서유빈', TO_DATE('19900117','YYYY-MM-DD'), 'GD00002', '010-7126-1673','ferloi@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('galath', 'rumex', '기태훈', TO_DATE('19920806','YYYY-MM-DD'), 'GD00001', '010-7248-8378','galath@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('gerikt', 'pine', '옥형조', TO_DATE('19951114','YYYY-MM-DD'), 'GD00001', '010-6730-2405','gerikt@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('glargate', 'moss', '현형조', TO_DATE('19980726','YYYY-MM-DD'), 'GD00001', '010-6177-1840','glargate@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('grafton', '다이아몬드', '연성민', TO_DATE('19990530','YYYY-MM-DD'), 'GD00001', '010-9487-0436','grafton@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('gallon', 'marigold', '반광현', TO_DATE('19940219','YYYY-MM-DD'), 'GD00001', '010-6648-3864','gallon@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('gerlin', '물망초', '연유빈', TO_DATE('19860109','YYYY-MM-DD'), 'GD00002', '010-6158-0136','gerlin@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('glynse', '은매화', '어민서', TO_DATE('19890208','YYYY-MM-DD'), 'GD00002', '010-6720-6134','glynse@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('grenca', '멜리사', '원유빈', TO_DATE('19871227','YYYY-MM-DD'), 'GD00002', '010-5687-4117','grenca@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('garole', 'chamomile', '서수민', TO_DATE('19811012','YYYY-MM-DD'), 'GD00002', '010-8723-2425','garole@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('gernig', 'victor', '양하빈', TO_DATE('19931225','YYYY-MM-DD'), 'GD00002', '010-7264-7853','gernig@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('hadden', '무궁화', '방재홍', TO_DATE('19880112','YYYY-MM-DD'), 'GD00001', '010-7056-5648','hadden@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('heelya', '아도니스 ', '기유빈', TO_DATE('19970614','YYYY-MM-DD'), 'GD00001', '010-8668-0340','heelya@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('hilies', 'adonis', '기민석', TO_DATE('19850916','YYYY-MM-DD'), 'GD00001', '010-8071-4561','hilies@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('howeyn', '아라비아의별', '김선규', TO_DATE('19810705','YYYY-MM-DD'), 'GD00001', '010-8067-3868','howeyn@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('haimes', '아르메리아', '천정우', TO_DATE('19820801','YYYY-MM-DD'), 'GD00001', '010-7638-8540','haimes@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('heirnach', 'armeria', '지우빈', TO_DATE('19980923','YYYY-MM-DD'), 'GD00002', '010-8480-6552','heirnach@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('hithats', '아몬드', '전항산', TO_DATE('19960125','YYYY-MM-DD'), 'GD00002', '010-7584-1458','hithats@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('hraedden', 'almond', '예미혜', TO_DATE('19870414','YYYY-MM-DD'), 'GD00002', '010-8332-6284','hraedden@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('halond', '아스파라거스', '금효정', TO_DATE('19811003','YYYY-MM-DD'), 'GD00002', '010-7726-5871','halond@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('helico', 'gladiolus', '전유영', TO_DATE('19850526','YYYY-MM-DD'), 'GD00002', '010-6166-6710','helico@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('iainta', '금작화', '탁동혁', TO_DATE('19990725','YYYY-MM-DD'), 'GD00001', '010-7556-1321','iainta@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('imlado', 'cherry', '성경민', TO_DATE('19971108','YYYY-MM-DD'), 'GD00001', '010-8006-0040','imlado@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('inthiana', 'geranium', '기성민', TO_DATE('19840519','YYYY-MM-DD'), 'GD00001', '010-8560-3415','inthiana@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('irmith', 'lilac', '선병민', TO_DATE('19961209','YYYY-MM-DD'), 'GD00001', '010-8705-5078','irmith@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('ianach', 'daisy', '탁상훈', TO_DATE('19871025','YYYY-MM-DD'), 'GD00001', '010-7765-0147','ianach@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('imnink', '스위트피', '민민서', TO_DATE('19981107','YYYY-MM-DD'), 'GD00002', '010-6116-3520','imnink@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('inthin', '토끼풀', '노유진', TO_DATE('19991016','YYYY-MM-DD'), 'GD00002', '010-7514-3437','inthin@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('isefina', '초롱꽃', '어혜지', TO_DATE('19811223','YYYY-MM-DD'), 'GD00002', '010-5223-2726','isefina@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('iarwer', '엘리카', '한혜빈', TO_DATE('19840912','YYYY-MM-DD'), 'GD00002', '010-8277-4511','iarwer@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('ingaut', '시스터스', '권여현', TO_DATE('19820204','YYYY-MM-DD'), 'GD00002', '010-7210-3861','ingaut@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('jadencoh', 'platinum', '송종원', TO_DATE('19860225','YYYY-MM-DD'), 'GD00001', '010-5524-4540','jadencoh@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('jeffanui', 'silver', '함규빈', TO_DATE('19980206','YYYY-MM-DD'), 'GD00001', '010-8278-5302','jeffanui@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('jezzie', 'spinel', '길윤석', TO_DATE('19990412','YYYY-MM-DD'), 'GD00001', '010-7317-0561','jezzie@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('joycey', '스피넬', '금광현', TO_DATE('19970523','YYYY-MM-DD'), 'GD00001', '010-7122-8137','joycey@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('jagorga', 'emerald', '용창현', TO_DATE('19940726','YYYY-MM-DD'), 'GD00001', '010-8250-8453','jagorga@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('jeldis', '아쿠아마린', '문유진', TO_DATE('19950915','YYYY-MM-DD'), 'GD00002', '010-7215-4433','jeldis@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('jhasli', '로즈쿼츠', '반현진', TO_DATE('19911022','YYYY-MM-DD'), 'GD00002', '010-6464-2271','jhasli@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('jozenna', '루비', '금찬희', TO_DATE('19930206','YYYY-MM-DD'), 'GD00002', '010-5454-8765','jozenna@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('jagorna', 'amber', '황지수', TO_DATE('19891005','YYYY-MM-DD'), 'GD00002', '010-7020-3152','jagorna@naver.com',SYSDATE);
INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE) 
VALUES('jennan', '아이보리', '나예지', TO_DATE('19840827','YYYY-MM-DD'), 'GD00002', '010-5607-8584','jennan@naver.com',SYSDATE);

--○ DIRECT_QUESTION 테이블 INSERT 쿼리문
INSERT INTO DIRECT_QUESTION(ID, TITLE, USERID, CONTENTS, DIRECTQUESTIONDATE) 
VALUES(DIRECT_QUESTION_SEQ.NEXTVAL, '저사람이 욕했어요', 'b001', '풍부하게 하는 것이다 청춘을 !', SYSDATE);
INSERT INTO DIRECT_QUESTION(ID, TITLE, USERID, CONTENTS, DIRECTQUESTIONDATE) 
VALUES(DIRECT_QUESTION_SEQ.NEXTVAL, '저사람이에요', 'blumbald', '그들의 몸이 얼마나 튼튼하며 그들의 피부가 얼마나 생생하며', SYSDATE);
INSERT INTO DIRECT_QUESTION(ID, TITLE, USERID, CONTENTS, DIRECTQUESTIONDATE) 
VALUES(DIRECT_QUESTION_SEQ.NEXTVAL, '저사람입니다.', 'bradocus', ' 아름답고 소담스러운 열매를 맺어 우리 인생', SYSDATE);
INSERT INTO DIRECT_QUESTION(ID, TITLE, USERID, CONTENTS, DIRECTQUESTIONDATE) 
VALUES(DIRECT_QUESTION_SEQ.NEXTVAL, '이사람아 아니야', 'brogan', ' 아름답고 소담스러운 열매', SYSDATE);
INSERT INTO DIRECT_QUESTION(ID, TITLE, USERID, CONTENTS, DIRECTQUESTIONDATE) 
VALUES(DIRECT_QUESTION_SEQ.NEXTVAL, '이사람아 맞습니다.', 'baheela', '그들은 이상의 보배를 능히 품으며', SYSDATE);

--○ USER_ADDR 테이블 INSERT 쿼리문
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'b001', 'GU00001');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dagona', 'GU00002');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dagona', 'GU00018');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'blumbald', 'GU00016');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'blumbald', 'GU00010');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'blumbald', 'GU00023');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'bradocus', 'GU00001');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'bradocus', 'GU00002');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'anlant', 'GU00017');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'brogan', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'brogan', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'brogan', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'baheela', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'baheela', 'GU00012');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'bermeda', 'GU00021');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'berson', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'berson', 'GU00024');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'berson', 'GU00025');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'bjoreen', 'GU00002');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'bjoreen', 'GU00003');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'bjoreen', 'GU00007');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'blisset', 'GU00010');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'blisset', 'GU00015');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'brathaid', 'GU00014');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'aberine', 'GU00020');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'aberine', 'GU00019');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'eadwynda', 'GU00017');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'eadwynda', 'GU00013');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'eadwynda', 'GU00012');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'edaine', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'edaine', 'GU00007');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'edrosink', 'GU00009');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'eitlias', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'eitlias', 'GU00023');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ellell', 'GU00012');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'elrone', 'GU00024');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'elrone', 'GU00001');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'elrone', 'GU00003');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'eredui', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ervetan', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ervetan', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'everette', 'GU00010');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'evrogan', 'GU00014');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'evrogan', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'evrogan', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'aladanne', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'armelorc', 'GU00011');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'armelorc', 'GU00013');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'armelorc', 'GU00015');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'adalleif', 'GU00021');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'adalleif', 'GU00019');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'alberic', 'GU00020');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'annetia', 'GU00015');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'annetia', 'GU00010');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'arthisef', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'adiard', 'GU00001');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'adiard', 'GU00003');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'adiard', 'GU00002');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'advice', 'GU00002');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'advice', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'advice', 'GU00003');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'divien', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'divien', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'divien', 'GU00007');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dymira', 'GU00011');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dymira', 'GU00013');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'degink', 'GU00018');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dweald', 'GU00017');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dweald', 'GU00001');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'duwaino', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dogwen', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dogwen', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dogwen', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'derbonie', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dunarea', 'GU00023');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dunarea', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'dodulla', 'GU00009');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'caroin', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'caroin', 'GU00021');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'caroin', 'GU00019');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'coimhin', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'channa', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'channa', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'channa', 'GU00011');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'collerva', 'GU00013');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ciriel', 'GU00015');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ciriel', 'GU00021');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'cirdan', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'crowen', 'GU00020');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'crowen', 'GU00012');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'crowen', 'GU00017');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'chrigh', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'chiania', 'GU00024');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'chiania', 'GU00018');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'cointer', 'GU00019');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'cointer', 'GU00005');

--○ USER_ADDR 테이블 INSERT 쿼리문 추가
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'falann', 'GU00017');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'falann', 'GU00009');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'falann', 'GU00023');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'fenechta', 'GU00013');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'fenechta', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'fiollos', 'GU00019');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'fiollos', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'framna', 'GU00001');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'framna', 'GU00017');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'falara', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'falara', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'fennou', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'fiosogas', 'GU00016');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'fiosogas', 'GU00018');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'fiosogas', 'GU00010');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'frania', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'frania', 'GU00016');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'falsie', 'GU00014');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ferloi', 'GU00002');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ferloi', 'GU00012');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ferloi', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'galath', 'GU00002');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'galath', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'galath', 'GU00024');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'gerikt', 'GU00013');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'gerikt', 'GU00003');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'glargate', 'GU00020');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'glargate', 'GU00025');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'glargate', 'GU00003');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'grafton', 'GU00007');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'grafton', 'GU00018');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'gallon', 'GU00019');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'gallon', 'GU00016');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'gerlin', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'gerlin', 'GU00007');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'gerlin', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'glynse', 'GU00009');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'grenca', 'GU00014');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'grenca', 'GU00025');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'garole', 'GU00020');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'garole', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'gernig', 'GU00018');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hadden', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hadden', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hadden', 'GU00011');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'heelya', 'GU00015');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hilies', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hilies', 'GU00001');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hilies', 'GU00003');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'howeyn', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'howeyn', 'GU00002');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'haimes', 'GU00025');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'haimes', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'heirnach', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'heirnach', 'GU00024');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hithats', 'GU00020');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hithats', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hithats', 'GU00018');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hraedden', 'GU00014');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'hraedden', 'GU00010');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'halond', 'GU00025');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'halond', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'helico', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'helico', 'GU00016');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'helico', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'iainta', 'GU00010');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'iainta', 'GU00012');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'imlado', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'imlado', 'GU00024');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'inthiana', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'inthiana', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'irmith', 'GU00004');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'irmith', 'GU00015');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'irmith', 'GU00010');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ianach', 'GU00025');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ianach', 'GU00011');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ianach', 'GU00024');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'imnink', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'imnink', 'GU00011');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'inthin', 'GU00002');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'inthin', 'GU00010');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'isefina', 'GU00012');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'iarwer', 'GU00002');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'iarwer', 'GU00017');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'iarwer', 'GU00012');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ingaut', 'GU00025');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ingaut', 'GU00011');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'ingaut', 'GU00024');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jadencoh', 'GU00017');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jadencoh', 'GU00021');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jeffanui', 'GU00009');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jeffanui', 'GU00017');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jezzie', 'GU00005');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jezzie', 'GU00012');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jezzie', 'GU00007');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'joycey', 'GU00003');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'joycey', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jagorga', 'GU00018');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jagorga', 'GU00006');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jeldis', 'GU00020');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jhasli', 'GU00008');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jhasli', 'GU00022');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jhasli', 'GU00018');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jozenna', 'GU00015');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jozenna', 'GU00017');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jozenna', 'GU00009');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jagorna', 'GU00003');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jennan', 'GU00007');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jennan', 'GU00012');
INSERT INTO USER_ADDR(ID, USERID, ADDRGUID) VALUES(USER_ADDR_SEQ.NEXTVAL, 'jennan', 'GU00025');

--○ USER_SUB 테이블 INSERT 쿼리문
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'aberine', 'https://www.facebook.com/aberine', '나는 페이스북을 하는 베아트리스입니다.');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'dagona', '나는 블로그를 하는 말티즈입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'b001', 'https://www.instagram.com/b001', '나는 인스타를 하는 치킨입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'caroin', 'https://www.facebook.com/caroin', '나는 페이스북을 하는 리그오브레전드입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'coimhin', 'https://blog.naver.com/coimhin', '나는 블로그를 하는 전략적팀게임입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'channa', 'https://www.instagram.com/channa', '나는 인스타를 하는 마인크래프트입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS)
VALUES(USER_SUB_SEQ.NEXTVAL, 'collerva', 'https://www.facebook.com/collerva');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'blumbald', 'https://blog.naver.com/blumbald', '나는 블로그를 하는 피자입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'bradocus', 'https://www.instagram.com/bradocus', '나는 인스타를 하는 국수입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'brogan', 'https://www.facebook.com/brogan', '나는 페이스북을 하는 돈가스입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'baheela', 'https://blog.naver.com/baheela', '나는 블로그를 하는 김밥입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'ciriel', 'https://www.instagram.com/ciriel', '나는 인스타를 하는 와우입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'cirdan', 'https://www.facebook.com/cirdan', '나는 페이스북을 하는 패스오브엑자일입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS)
VALUES(USER_SUB_SEQ.NEXTVAL, 'crowen', 'https://blog.naver.com/crowen');
INSERT INTO USER_SUB(ID, USERID,  INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'chrigh',  '나는 아무것도 없는 오버워치입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'divien', 'https://www.facebook.com/divien', '나는 페이스북을 하는 악어입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'dymira', 'https://blog.naver.com/dymira', '나는 블로그를 하는 치와와입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'degink', 'https://www.instagram.com/degink', '나는 인스타를 하는 고양이입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS)
VALUES(USER_SUB_SEQ.NEXTVAL, 'dweald', 'https://www.facebook.com/dweald');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'duwaino', 'https://blog.naver.com/duwaino', '나는 블로그를 하는 사자입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'dogwen', 'https://www.instagram.com/dogwen', '나는 인스타를 하는 팬더입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS)
VALUES(USER_SUB_SEQ.NEXTVAL, 'derbonie', 'https://www.facebook.com/derbonie');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'dodulla', 'https://www.instagram.com/dodulla', '나는 인스타를 하는 코끼리입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'chiania', 'https://www.facebook.com/chiania', '나는 페이스북을 하는 메이플스토리입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'cointer', 'https://blog.naver.com/cointer', '나는 블로그를 하는 던전앤파이터입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'bermeda', 'https://www.instagram.com/bermeda', '나는 인스타를 하는 순대입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'berson', 'https://www.facebook.com/berson', '나는 페이스북을 하는 햄버거입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'bjoreen', 'https://blog.naver.com/bjoreen', '나는 블로그를 하는 스테이크입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'blisset', 'https://www.instagram.com/blisset', '나는 인스타를 하는 규카츠입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'brathaid', 'https://www.facebook.com/brathaid', '나는 페이스북을 하는 돼지국밥입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS)
VALUES(USER_SUB_SEQ.NEXTVAL, 'anlant', 'https://blog.naver.com/anlant');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'aladanne', 'https://www.instagram.com/aladanne', '나는 인스타를 하는 히야신스입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'armelorc', 'https://www.facebook.com/armelorc', '나는 페이스북을 하는 플록스입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS)
VALUES(USER_SUB_SEQ.NEXTVAL, 'adalleif', 'https://blog.naver.com/adalleif');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'alberic', 'https://www.instagram.com/alberic', '나는 인스타를 하는 플라타너스입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'annetia', 'https://www.facebook.com/annetia', '나는 페이스북을 하는 카모밀레입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'arthisef', 'https://blog.naver.com/arthisef', '나는 블로그를 하는 제라늄입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'adiard', 'https://www.instagram.com/adiard', '나는 인스타를 하는 사프란입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'advice', 'https://www.facebook.com/advice', '나는 페이스북을 하는 리아트리스입니다.');
INSERT INTO USER_SUB(ID, USERID)
VALUES(USER_SUB_SEQ.NEXTVAL, 'edaine');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'edrosink', 'https://www.facebook.com/edrosink', '나는 페이스북을 하는 다람쥐입니다.');
INSERT INTO USER_SUB(ID, USERID)
VALUES(USER_SUB_SEQ.NEXTVAL, 'eitlias');
INSERT INTO USER_SUB(ID, USERID)
VALUES(USER_SUB_SEQ.NEXTVAL, 'ellell');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'elrone', 'https://www.facebook.com/elrone', '나는 페이스북을 하는 멜리사입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'eredui', 'https://blog.naver.com/eredui', '나는 블로그를 하는 메리골드입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'ervetan', 'https://www.instagram.com/ervetan', '나는 인스타를 하는 라벤더입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'everette', 'https://blog.naver.com/everette', '나는 블로그를 하는 라일락입니다.');
INSERT INTO USER_SUB(ID, USERID)
VALUES(USER_SUB_SEQ.NEXTVAL, 'evrogan');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'eadwynda', '나는 아무것도 않하는 참새입니다.');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE)
VALUES(USER_SUB_SEQ.NEXTVAL, 'dunarea', '나는 블로그를 하는 사슴입니다.');

--○ USER_SUB 테이블 INSERT 쿼리문 추가
INSERT INTO USER_SUB(ID, USERID, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'falann', 'snowdrop 입니다 잘부탁드려요');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'fenechta', '나는 블로그를 운영중인 narcissus입니다.');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'fiollos', 'spring라고 해요 잘부탁해요');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'framna', '튤립이라합니다');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'falara', 'tulipa');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'fennou', '잘부탁해요');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'fiosogas', 'alyssum 이라고 해요.');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'frania', '수선화입니다.');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'falsie', 'cyclamen라고 해요 즐거운 모임을 기대합니다.');
INSERT INTO USER_SUB(ID, USERID, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'ferloi', 'thorn라고 합니다.');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'galath');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'gerikt');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'glargate');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'grafton');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'gallon');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'gerlin');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'glynse');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'grenca');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'garole');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'gernig');
INSERT INTO USER_SUB(ID, USERID, SNS) VALUES(USER_SUB_SEQ.NEXTVAL, 'hadden', 'https://blog.naver.com/hadden');
INSERT INTO USER_SUB(ID, USERID, SNS) VALUES(USER_SUB_SEQ.NEXTVAL, 'heelya', 'https://www.instagram.com/heelya');
INSERT INTO USER_SUB(ID, USERID, SNS) VALUES(USER_SUB_SEQ.NEXTVAL, 'hilies', 'https://www.facebook.com/hilies');
INSERT INTO USER_SUB(ID, USERID, SNS) VALUES(USER_SUB_SEQ.NEXTVAL, 'howeyn', 'https://blog.naver.com/howeyn');
INSERT INTO USER_SUB(ID, USERID, SNS) VALUES(USER_SUB_SEQ.NEXTVAL, 'haimes', 'https://www.instagram.com/haimes');
INSERT INTO USER_SUB(ID, USERID, SNS) VALUES(USER_SUB_SEQ.NEXTVAL, 'heirnach', 'https://blog.naver.com/heirnach');
INSERT INTO USER_SUB(ID, USERID, SNS) VALUES(USER_SUB_SEQ.NEXTVAL, 'hithats', 'https://www.facebook.com/hithats');
INSERT INTO USER_SUB(ID, USERID, SNS) VALUES(USER_SUB_SEQ.NEXTVAL, 'hraedden', 'https://blog.naver.com/hraedden');
INSERT INTO USER_SUB(ID, USERID, SNS) VALUES(USER_SUB_SEQ.NEXTVAL, 'halond', 'https://www.instagram.com/halond');
INSERT INTO USER_SUB(ID, USERID, SNS) VALUES(USER_SUB_SEQ.NEXTVAL, 'helico', 'https://www.instagram.com/helico');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'iainta', 'https://www.facebook.com/BRATHAID', '저는 금작화라고 합니다 잘부탁드려요.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'imlado', 'https://www.instagram.com/BRATHAID', '나는 cherry다 잘부탁한다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'inthiana', 'https://blog.naver.com/BRATHAID', '블로그를 하고 있는 geranium입니다. 블로그도 잘 부탁합니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'irmith', 'https://www.facebook.com/BRATHAID', 'lilac 입니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'ianach', 'https://www.instagram.com/BRATHAID', 'https://www.instagram.com/BRATHAID 친추 부탁드려요');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'imnink', 'https://www.facebook.com/BRATHAID', '스위트피라고 해요');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'inthin', 'https://www.instagram.com/BRATHAID', 'https://www.instagram.com/BRATHAID 인스타 친구도 구합니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'isefina', 'https://www.instagram.com/BRATHAID', '저는 초롱꽃이라고 합니다.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'iarwer', 'https://www.facebook.com/BRATHAID', '엘리카라고 합니다. 페북 친추도 받아요.');
INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE) VALUES(USER_SUB_SEQ.NEXTVAL, 'ingaut', 'https://www.facebook.com/BRATHAID', '시스터스 입니다.');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'jadencoh');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'jeffanui');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'jezzie');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'joycey');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'jagorga');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'jeldis');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'jhasli');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'jozenna');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'jagorna');
INSERT INTO USER_SUB(ID, USERID) VALUES(USER_SUB_SEQ.NEXTVAL, 'jennan');


--○ DEL_USER 테이블 INSERT 쿼리문
INSERT INTO DEL_USER(ID,USERID,DELETEDATE)
VALUES(DEL_USER_SEQ.NEXTVAL,'ervetan',SYSDATE);
INSERT INTO DEL_USER(ID,USERID,DELETEDATE)
VALUES(DEL_USER_SEQ.NEXTVAL,'adalleif',SYSDATE);
INSERT INTO DEL_USER(ID,USERID,DELETEDATE)
VALUES(DEL_USER_SEQ.NEXTVAL,'berson',SYSDATE);
INSERT INTO DEL_USER(ID,USERID,DELETEDATE)
VALUES(DEL_USER_SEQ.NEXTVAL,'dogwen',SYSDATE);
INSERT INTO DEL_USER(ID,USERID,DELETEDATE)
VALUES(DEL_USER_SEQ.NEXTVAL,'cirdan',SYSDATE);

--○ FOLLOW 테이블 INSERT 쿼리문
INSERT INTO FOLLOW(ID,GIVEUSERID,TAKEUSERID,FOLLOWDATE)
VALUES(FOLLOW_SEQ.NEXTVAL,'b001','cointer',SYSDATE);
INSERT INTO FOLLOW(ID,GIVEUSERID,TAKEUSERID,FOLLOWDATE)
VALUES(FOLLOW_SEQ.NEXTVAL,'chiania','dagona',SYSDATE);
INSERT INTO FOLLOW(ID,GIVEUSERID,TAKEUSERID,FOLLOWDATE)
VALUES(FOLLOW_SEQ.NEXTVAL,'blumbald','crowen',SYSDATE);
INSERT INTO FOLLOW(ID,GIVEUSERID,TAKEUSERID,FOLLOWDATE)
VALUES(FOLLOW_SEQ.NEXTVAL,'chrigh','bradocus',SYSDATE);
INSERT INTO FOLLOW(ID,GIVEUSERID,TAKEUSERID,FOLLOWDATE)
VALUES(FOLLOW_SEQ.NEXTVAL,'eitlias','anlant',SYSDATE);   
INSERT INTO FOLLOW(ID,GIVEUSERID,TAKEUSERID,FOLLOWDATE)
VALUES(FOLLOW_SEQ.NEXTVAL,'brogan','ciriel',SYSDATE);
INSERT INTO FOLLOW(ID,GIVEUSERID,TAKEUSERID,FOLLOWDATE)
VALUES(FOLLOW_SEQ.NEXTVAL,'collerva','baheela',SYSDATE);
INSERT INTO FOLLOW(ID,GIVEUSERID,TAKEUSERID,FOLLOWDATE)
VALUES(FOLLOW_SEQ.NEXTVAL,'brogan','channa',SYSDATE);
INSERT INTO FOLLOW(ID,GIVEUSERID,TAKEUSERID,FOLLOWDATE)
VALUES(FOLLOW_SEQ.NEXTVAL,'everette','advice',SYSDATE);
INSERT INTO FOLLOW(ID,GIVEUSERID,TAKEUSERID,FOLLOWDATE)
VALUES(FOLLOW_SEQ.NEXTVAL,'arthisef','dunarea',SYSDATE);

--○ USER_INTEREST 테이블 INSERT 쿼리문
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'b001', 'IS00001');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'b001', 'IS00002');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dagona', 'IS00005');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dagona', 'IS00007');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'blumbald', 'IS00015');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'blumbald', 'IS00011');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'blumbald', 'IS00010');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'bradocus', 'IS00033');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'bradocus', 'IS00032');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'anlant', 'IS00062');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'anlant', 'IS00058');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'anlant', 'IS00004');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'brogan', 'IS00005');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'brogan', 'IS00012');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'baheela', 'IS00009');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'baheela', 'IS00013');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'baheela', 'IS00015');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'bermeda', 'IS00017');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'bermeda', 'IS00016');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'bermeda', 'IS00014');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'berson', 'IS00019');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'berson', 'IS00001');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'bjoreen', 'IS00028');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'bjoreen', 'IS00029');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'blisset', 'IS00039');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'blisset', 'IS00040');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'blisset', 'IS00020');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'brathaid', 'IS00022');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'brathaid', 'IS00018');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'aberine', 'IS00030');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'aberine', 'IS00032');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'eadwynda', 'IS00021');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'eadwynda', 'IS00023');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'eadwynda', 'IS00024');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'edaine', 'IS00002');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'edrosink', 'IS00033');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'edrosink', 'IS00035');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'eitlias', 'IS00047');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'eitlias', 'IS00045');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'eitlias', 'IS00044');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ellell', 'IS00051');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ellell', 'IS00054');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ellell', 'IS00048');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'elrone', 'IS00059');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'elrone', 'IS00060');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'elrone', 'IS00063');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'eredui', 'IS00064');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'eredui', 'IS00065');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ervetan', 'IS00051');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ervetan', 'IS00050');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'everette', 'IS00049');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'everette', 'IS00033');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'everette', 'IS00046');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'evrogan', 'IS00038');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'evrogan', 'IS00037');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'evrogan', 'IS00031');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'aladanne', 'IS00016');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'aladanne', 'IS00012');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'aladanne', 'IS00010');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'armelorc', 'IS00052');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'armelorc', 'IS00034');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'armelorc', 'IS00035');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'adalleif', 'IS00021');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'adalleif', 'IS00036');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'alberic', 'IS00019');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'alberic', 'IS00024');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'annetia', 'IS00039');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'arthisef', 'IS00015');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'arthisef', 'IS00001');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'arthisef', 'IS00049');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'adiard', 'IS00033');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'adiard', 'IS00004');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'adiard', 'IS00044');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'advice', 'IS00018');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'advice', 'IS00029');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'advice', 'IS00055');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'divien', 'IS00066');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'divien', 'IS00048');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dymira', 'IS00015');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dymira', 'IS00049');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'degink', 'IS00040');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'degink', 'IS00016');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'degink', 'IS00013');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dweald', 'IS00045');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dweald', 'IS00056');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dweald', 'IS00020');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'duwaino', 'IS00003');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'duwaino', 'IS00009');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dogwen', 'IS00017');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dogwen', 'IS00024');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'derbonie', 'IS00034');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'derbonie', 'IS00026');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dunarea', 'IS00015');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dunarea', 'IS00016');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dunarea', 'IS00064');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'dodulla', 'IS00058');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'caroin', 'IS00057');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'caroin', 'IS00019');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'caroin', 'IS00013');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'coimhin', 'IS00024');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'coimhin', 'IS00008');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'coimhin', 'IS00009');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'channa', 'IS00011');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'channa', 'IS00010');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'collerva', 'IS00052');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'collerva', 'IS00043');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'collerva', 'IS00026');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ciriel', 'IS00010');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ciriel', 'IS00006');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'cirdan', 'IS00001');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'cirdan', 'IS00002');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'crowen', 'IS00006');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'chrigh', 'IS00008');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'chrigh', 'IS00015');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'chrigh', 'IS00062');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'chiania', 'IS00051');

--○ USER_INTEREST 테이블 INSERT 쿼리문
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'falann', 'IS00063');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'falann', 'IS00049');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'falann', 'IS00020');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'fenechta', 'IS00060');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'fenechta', 'IS00031');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'fiollos', 'IS00075');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'fiollos', 'IS00013');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'framna', 'IS00012');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'framna', 'IS00066');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'falara', 'IS00074');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'falara', 'IS00024');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'fennou', 'IS00023');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'fiosogas', 'IS00009');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'fiosogas', 'IS00072');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'fiosogas', 'IS00048');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'frania', 'IS00010');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'frania', 'IS00003');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'falsie', 'IS00019');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ferloi', 'IS00023');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ferloi', 'IS00037');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ferloi', 'IS00017');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'galath', 'IS00032');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'galath', 'IS00022');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'galath', 'IS00019');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'gerikt', 'IS00013');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'gerikt', 'IS00068');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'glargate', 'IS00054');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'glargate', 'IS00007');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'glargate', 'IS00062');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'grafton', 'IS00011');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'grafton', 'IS00053');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'gallon', 'IS00047');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'gallon', 'IS00059');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'gerlin', 'IS00073');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'gerlin', 'IS00028');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'gerlin', 'IS00011');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'glynse', 'IS00070');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'grenca', 'IS00040');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'grenca', 'IS00024');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'garole', 'IS00057');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'garole', 'IS00036');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'gernig', 'IS00048');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hadden', 'IS00001');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hadden', 'IS00044');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hadden', 'IS00042');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'heelya', 'IS00049');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hilies', 'IS00053');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hilies', 'IS00044');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hilies', 'IS00068');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'howeyn', 'IS00076');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'howeyn', 'IS00002');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'haimes', 'IS00007');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'haimes', 'IS00029');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'heirnach', 'IS00024');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'heirnach', 'IS00025');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hithats', 'IS00042');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hithats', 'IS00013');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hithats', 'IS00001');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hraedden', 'IS00048');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'hraedden', 'IS00075');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'halond', 'IS00011');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'halond', 'IS00022');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'helico', 'IS00043');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'helico', 'IS00069');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'helico', 'IS00016');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'iainta', 'IS00070');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'iainta', 'IS00002');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'imlado', 'IS00008');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'imlado', 'IS00032');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'inthiana', 'IS00025');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'inthiana', 'IS00064');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'irmith', 'IS00067');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'irmith', 'IS00072');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'irmith', 'IS00065');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ianach', 'IS00033');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ianach', 'IS00035');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ianach', 'IS00036');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'imnink', 'IS00008');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'imnink', 'IS00001');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'inthin', 'IS00026');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'inthin', 'IS00005');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'isefina', 'IS00003');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'iarwer', 'IS00032');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'iarwer', 'IS00034');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'iarwer', 'IS00026');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ingaut', 'IS00056');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ingaut', 'IS00075');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'ingaut', 'IS00039');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jadencoh', 'IS00057');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jadencoh', 'IS00044');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jeffanui', 'IS00035');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jeffanui', 'IS00067');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jezzie', 'IS00066');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jezzie', 'IS00077');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jezzie', 'IS00058');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'joycey', 'IS00004');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'joycey', 'IS00069');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jagorga', 'IS00059');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jagorga', 'IS00011');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jeldis', 'IS00022');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jhasli', 'IS00066');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jhasli', 'IS00048');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jhasli', 'IS00071');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jozenna', 'IS00028');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jozenna', 'IS00012');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jozenna', 'IS00011');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jagorna', 'IS00024');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jennan', 'IS00009');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jennan', 'IS00036');
INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID) VALUES(USER_INTEREST_SEQ.NEXTVAL, 'jennan', 'IS00059');



--○ USER_CERTIFICATION 테이블 INSERT 쿼리문
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'b001','198587',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'b001','123456',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'b001','456512',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'b001','125442',SYSDATE,'CT00005');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dagona','123457',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'blumbald','245672',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'bradocus','213567',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'bradocus','257482',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'anlant','234561',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'anlant','321641',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'anlant','236547',SYSDATE,'CT00005');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'brogan','123451',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'brogan','985441',SYSDATE,'CT00004');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'brogan','445672',SYSDATE,'CT00006');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'baheela','123451',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'baheela','877452',SYSDATE,'CT00004');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'bermeda','122341',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'bermeda','236571',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'berson','215413',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'berson','322142',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'bjoreen','366454',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'bjoreen','332141',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'blisset','231541',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'brathaid','123141',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'aberine','231541',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'eadwynda','123141',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'edaine','123411',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'edaine','222342',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'edrosink','234567',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'edrosink','336541',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'eitlias','123456',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'eitlias','236654',SYSDATE,'CT00005');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'eitlias','324123',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'ellell','213451',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'elrone','985112',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'eredui','784612',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'ervetan','123541',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'ervetan','233654',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'everette','123541',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'everette','233654',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'everette','784612',SYSDATE,'CT00005');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'evrogan','123452',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'evrogan','665412',SYSDATE,'CT00004');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'evrogan','788541',SYSDATE,'CT00005');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'aladanne','213451',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'aladanne','874561',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'aladanne','966541',SYSDATE,'CT00006');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'armelorc','123154',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'adalleif','874634',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'alberic','123443',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'annetia','123154',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'arthisef','874634',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'adiard','123443',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'advice','123154',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'advice','123154',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'divien','123154',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'divien','874634',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dymira','123154',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dymira','123443',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'degink','123154',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'degink','874634',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'degink','874634',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dweald','123154',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dweald','123443',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'duwaino','213421',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'duwaino','654712',SYSDATE,'CT00004');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'duwaino','995412',SYSDATE,'CT00006');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dogwen','326541',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dogwen','998541',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'derbonie','326541',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'derbonie','998541',SYSDATE,'CT00005');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dunarea','123452',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dunarea','988541',SYSDATE,'CT00003');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dodulla','123452',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'dodulla','966521',SYSDATE,'CT00004');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'caroin','988541',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'coimhin','123452',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'coimhin','988541',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'channa','123452',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'channa','988541',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'collerva','234581',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'collerva','332145',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'ciriel','234581',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'cirdan','332145',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'cirdan','123451',SYSDATE,'CT00004');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'cirdan','955412',SYSDATE,'CT00006');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'crowen','234581',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'crowen','652142',SYSDATE,'CT00005');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'chrigh','332145',SYSDATE,'CT00001');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'chrigh','955412',SYSDATE,'CT00006');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'chiania','234581',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'cointer','332145',SYSDATE,'CT00002');
INSERT INTO USER_CERTIFICATION(ID,USERID,CODE,CERTIDATE,CERTIID)
VALUES(USER_CERTIFICATION_SEQ.NEXTVAL,'cointer','966541',SYSDATE,'CT00006');

--○ MESSAGE 테이블 INSERT 쿼리문
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'caroin', '가입축하드려요! 리그오브레전드(caroin) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'coimhin', '가입축하드려요! 전략적팀게임(coimhin) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'channa', '가입축하드려요! 마인크래프트(channa) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'collerva', '가입축하드려요! 하스스톤(collerva) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'ciriel', '가입축하드려요! 와우(ciriel) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'cirdan', '가입축하드려요! 패스오브엑자일(cirdan) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'crowen', '가입축하드려요! 오토체스(crowen) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'chrigh', '가입축하드려요! 오버워치(chrigh) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'chiania', '가입축하드려요! 메이플스토리(chiania) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'cointer', '가입축하드려요! 던전앤파이터(cointer) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'admin001', '가입축하드려요! 관리자001(admin001) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'anlant', '가입축하드려요! 마로니에(anlant) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'aberine', '가입축하드려요! 베아트리스(aberine) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'aladanne', '가입축하드려요! 히야신스(aladanne) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'armelorc', '가입축하드려요! 플록스(armelorc) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'adalleif', '가입축하드려요! 프리지아(adalleif) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'alberic', '가입축하드려요! 플라타너스(alberic) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'annetia', '가입축하드려요! 카모밀레(annetia) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'arthisef', '가입축하드려요! 제라늄(arthisef) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'adiard', '가입축하드려요! 사프란(adiard) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'advice', '가입축하드려요! 리아트리스(advice) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'elrone', '가입축하드려요! 멜리사(elrone) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'eredui', '가입축하드려요! 메리골드(eredui) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'ervetan', '가입축하드려요! 라벤더(ervetan) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'everette', '가입축하드려요! 라일락(everette) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'evrogan', '가입축하드려요! 데이지(evrogan) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'dagona', '가입축하드려요! 말티즈(dagona) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'divien', '가입축하드려요! 악어(divien) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'dymira', '가입축하드려요! 치와와(dymira) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'degink', '가입축하드려요! 고양이(degink) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'dweald', '가입축하드려요! 호랑이(dweald) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'duwaino', '가입축하드려요! 사자(duwaino) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'dogwen', '가입축하드려요! 팬더(dogwen) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'derbonie', '가입축하드려요! 기린(derbonie) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'dunarea', '가입축하드려요! 사슴(dunarea) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'dodulla', '가입축하드려요! 코끼리(dodulla) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'eadwynda', '가입축하드려요! 참새(eadwynda) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'edaine', '가입축하드려요! 비둘기(edaine) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'edrosink', '가입축하드려요! 다람쥐(edrosink) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'eitlias', '가입축하드려요! 돼지(eitlias) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'ellell', '가입축하드려요! 웰시코기(ellell) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'b001', '가입축하드려요! 치킨(b001) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'blumbald', '가입축하드려요! 피자(blumbald) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'bradocus', '가입축하드려요! 국수(bradocus) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'brogan', '가입축하드려요! 돈가스(brogan) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'baheela', '가입축하드려요! 김밥(baheela) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'bermeda', '가입축하드려요! 순대(bermeda) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'berson', '가입축하드려요! 햄버거(berson) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'bjoreen', '가입축하드려요! 스테이크(bjoreen) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'blisset', '가입축하드려요! 규카츠(blisset) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);
INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE, CHECKDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), 'admin001', 'brathaid', '가입축하드려요! 돼지국밥(brathaid) 님! 이제 SAGYO를 즐겨주세요!', SYSDATE, SYSDATE);

--○ POST 테이블 INSERT 쿼리문
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'aberine', '축구에 대한 뜨거운 열정', 'GU00001', 'IS00003', TO_DATE('20190705','YYYY-MM-DD'), SYSDATE, '우리 축구에 대해 진지하게 얘기좀 해봐요.', 'MI00001', 1, 2, 4, 'DR00001', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'blumbald', '농구에 대한 진지한 얘기', 'GU00001', 'IS00003', TO_DATE('20190705','YYYY-MM-DD'), SYSDATE, '우리 축구에 대해 진지하게 얘기좀 해봐요.', 'MI00002', 1, 2, 4, 'DR00001', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'brogan', '족구에 대한 진지한 얘기', 'GU00001', 'IS00003', TO_DATE('20190705','YYYY-MM-DD'), SYSDATE, '우리 축구에 대해 진지하게 얘기좀 해봐요.', 'MI00002', 1, 2, 4, 'DR00001', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'everette', '야구에 대한 진지한 얘기', 'GU00003', 'IS00003', TO_DATE('20190627','YYYY-MM-DD'), SYSDATE, '우리 야구에 대해 진지하게 얘기좀 해봐요.', 'MI00002', 1, 2, 4, 'DR00001', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'evrogan', '테니스에 대한 진지한 얘기', 'GU00004', 'IS00003', TO_DATE('20190701','YYYY-MM-DD'), SYSDATE, '우리 테니스에 대해 진지하게 얘기좀 해봐요.', 'MI00002', 1, 2, 4, 'DR00001', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'brathaid', '필라테스 이야기해요~', 'GU00015', 'IS00007', TO_DATE('20190707','YYYY-MM-DD'), SYSDATE,'필라테스하는 방법을 이야기해요', 'MI00001', 2, 2, 6, 'DR00002', 'SG00001');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'collerva', '티엔티엔 중국어 ', 'GU00018', 'IS00036', TO_DATE('20190706','YYYY-MM-DD'), SYSDATE,'진지하게 중국어 쉽게 배우는 법을 이야기 해요', 'MI00002', 2, 4, 9, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'advice', 'DIY(가죽공예) 이야기 하실분', 'GU00002', 'IS00018', TO_DATE('20190624','YYYY-MM-DD'), TO_DATE('20190619','YYYY-MM-DD'), '가죽공예(가죽벨트) 만드는 노하우에 대해 이야기 하실분', 'MI00003', 1, 2, 3, 'DR00002', 'SG00001');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'dunarea', '괌 유명한 관광지에 대해 이야기 하실분', 'GU00012', 'IS00064', TO_DATE('20190628','YYYY-MM-DD'), TO_DATE('20190621','YYYY-MM-DD'), '괌 여행가기 좋은 관광지에 대해 잘 아시는분 찾아요', 'MI00002', 1, 2, 4, 'DR00001', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');
INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, INTERSUBID, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
VALUES(ADD_ID('POST', 'POSTID','PT'), 'admin001', '글 쓰기 테스트 진행중', 'GU00001', 'IS00001', TO_DATE('20190710','YYYY-MM-DD'), SYSDATE, '글 쓰기 테스트 진행중입니다 양해 부탁드립니다.', 'MI00002', 5, 2, 2, 'DR00002', 'SG00002');




------------------------------------------------------ 주황 ------------------------------------------------------
--○ DEL_MESSAGE 테이블 INSERT 쿼리문
INSERT INTO DEL_MESSAGE(ID, MESSAGEID, DELETEDATE, USERID) VALUES(DEL_MESSAGE_SEQ.NEXTVAL, 'MS00001', SYSDATE, 'admin001');
INSERT INTO DEL_MESSAGE(ID, MESSAGEID, DELETEDATE, USERID) VALUES(DEL_MESSAGE_SEQ.NEXTVAL, 'MS00002', SYSDATE, 'admin001');

--○ DEL_POST 테이블 INSERT 쿼리문
INSERT INTO DEL_POST(ID, POSTID,DELETEDATE)VALUES(DEL_POST_SEQ.NEXTVAL,'PT00001',SYSDATE);

--○ REPORT_POST 테이블 INSERT 쿼리문
INSERT INTO REPORT_POST(ID, POSTID, USERID, REPORTCATEID, REPORTDETAIL, REPORTDATE) VALUES(REPORT_POST_SEQ.NEXTVAL, 'PT00002','blumbald','RC00001','욕했어요',SYSDATE);
INSERT INTO REPORT_POST(ID, POSTID, USERID, REPORTCATEID, REPORTDETAIL, REPORTDATE) VALUES(REPORT_POST_SEQ.NEXTVAL, 'PT00003','blumbald','RC00002','만졌어요',SYSDATE);

--○ JOIN 테이블 INSERT 쿼리문
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00002','b001','ST00002','참가 신청 해요~',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00002','dagona','ST00002','참가 신청 합니다',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00003','anlant','ST00001','참가 신청 해요~',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00003','baheela','ST00001','참가 신청 합니다',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00003','bjoreen','ST00002','참가 신청',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00003','bermeda','ST00002','같이 이야기해요~ 참가 신청 합니다',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00004','everette','ST00001','참가합니다',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00004','alberic','ST00001','참가 신청 합니다',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00004','derbonie','ST00001','참가하고싶어요',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00004','divien','ST00001','같이 이야기하고 싶어요',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00005','edrosink','ST00003','참가합니다',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00005','dymira','ST00003','참가 신청 합니다',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00005','crowen','ST00003','참가하고싶어요',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00005','chiania','ST00003','같이 이야기하고 싶어요',SYSDATE);
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00007','arthisef','ST00003','참가합니다',TO_DATE('20190629','YYYY-MM-DD'));
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00007','alberic','ST00003','참가 신청 합니다',TO_DATE('20190628','YYYY-MM-DD'));
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00007','channa','ST00003','참가하고싶어요',TO_DATE('20190629','YYYY-MM-DD'));
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00006','b001','ST00003','참가합니다',TO_DATE('20190625','YYYY-MM-DD'));
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00006','dagona','ST00003','참가 신청 합니다',TO_DATE('20190626','YYYY-MM-DD'));
INSERT INTO JOIN (JOINID, POSTID,USERID, STATUSID,CONTENTS, JOINDATE)
VALUES (ADD_ID('JOIN', 'JOINID','JN'),'PT00006','cointer','ST00003','참가하고싶어요',TO_DATE('20190626','YYYY-MM-DD'));
INSERT INTO JOIN(JOINID, POSTID, USERID, STATUSID, CONTENTS, JOINDATE)
VALUES(ADD_ID('JOIN', 'JOINID', 'JN'), 'PT00008', 'edrosink', 'ST00003', '신청합니다1', TO_DATE('20190621', 'YYYY-MM-DD'));
INSERT INTO JOIN(JOINID, POSTID, USERID, STATUSID, CONTENTS, JOINDATE)
VALUES(ADD_ID('JOIN', 'JOINID', 'JN'), 'PT00008', 'bermeda', 'ST00003', '신청합니다2', TO_DATE('20190621', 'YYYY-MM-DD'));
INSERT INTO JOIN(JOINID, POSTID, USERID, STATUSID, CONTENTS, JOINDATE)
VALUES(ADD_ID('JOIN', 'JOINID', 'JN'), 'PT00009', 'b001', 'ST00003', '신청합니다1', TO_DATE('20190623', 'YYYY-MM-DD'));
INSERT INTO JOIN(JOINID, POSTID, USERID, STATUSID, CONTENTS, JOINDATE)
VALUES(ADD_ID('JOIN', 'JOINID', 'JN'), 'PT00009', 'derbonie', 'ST00003', '신청합니다2', TO_DATE('20190623', 'YYYY-MM-DD'));

--○ REVIEW 테이블 INSERT 쿼리문
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00008', 'advice', 'edrosink', '4', TO_DATE('20190625', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00008', 'advice', 'bermeda', '4', TO_DATE('20190625', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00008', 'edrosink', 'advice', '4', TO_DATE('20190625', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00008', 'edrosink', 'bermeda', '4', TO_DATE('20190625', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00008', 'bermeda', 'advice', '4', TO_DATE('20190625', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00008', 'bermeda', 'edrosink', '4', TO_DATE('20190625', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00009', 'dunarea', 'b001', '4', TO_DATE('20190629', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00009', 'dunarea', 'derbonie', '4', TO_DATE('20190629', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00009', 'b001', 'dunarea', '4', TO_DATE('20190629', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00009', 'b001', 'derbonie', '4', TO_DATE('20190629', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00009', 'derbonie', 'dunarea', '4', TO_DATE('20190629', 'YYYY-MM-DD'));
INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
VALUES(ADD_ID('REVIEW', 'REVIEWID', 'RV'), 'PT00009', 'derbonie', 'b001', '4', TO_DATE('20190629', 'YYYY-MM-DD'));


------------------------------------------------------ 분홍 ------------------------------------------------------
--○ REPORT_JOIN 테이블 INSERT 쿼리문
INSERT INTO REPORT_JOIN(ID,JOINID,USERID,REPORTCATEID,REPORTDETAIL,REPORTDATE)
VALUES(REPORT_JOIN_SEQ.NEXTVAL,'JN00008','eredui','RC00004','스팸 싫어요!',SYSDATE);

--○ DEL_JOIN 테이블 INSERT 쿼리문
INSERT INTO DEL_JOIN(ID,JOINID,DELETEDATE)
VALUES(DEL_JOIN_SEQ.NEXTVAL,'JN00004',SYSDATE);
INSERT INTO DEL_JOIN(ID,JOINID,DELETEDATE)
VALUES(DEL_JOIN_SEQ.NEXTVAL,'JN00007',SYSDATE);


--○ REPLY 테이블 INSERT 쿼리문
INSERT INTO REPLY(REPLYID, JOINID, CONTENTS, REPLYDATE, USERTYPEID) VALUES(ADD_ID('REPLY', 'REPLYID', 'RV'), 'JN00001','참가 신청 완료했어요.',SYSDATE,'RU00001');
INSERT INTO REPLY(REPLYID, JOINID, CONTENTS, REPLYDATE, USERTYPEID) VALUES(ADD_ID('REPLY', 'REPLYID', 'RV'), 'JN00001','감사합니다.',SYSDATE,'RU00002');
INSERT INTO REPLY(REPLYID, JOINID, CONTENTS, REPLYDATE, USERTYPEID) VALUES(ADD_ID('REPLY', 'REPLYID', 'RV'), 'JN00002','KIN.',SYSDATE,'RU00002');
INSERT INTO REPLY(REPLYID, JOINID, CONTENTS, REPLYDATE, USERTYPEID) VALUES(ADD_ID('REPLY', 'REPLYID', 'RV'), 'JN00002','욕설 신고했어요~',SYSDATE,'RU00001');

--○ REVIEW_SUB 테이블 INSERT 쿼리문
INSERT INTO REVIEW_SUB(ID,REVIEWID,BADGEPOINTID,CONTENTS)VALUES(REVIEW_SUB_SEQ.NEXTVAL,'RV00001','BP00001','코멘트다');
INSERT INTO REVIEW_SUB(ID,REVIEWID,BADGEPOINTID,CONTENTS)VALUES(REVIEW_SUB_SEQ.NEXTVAL,'RV00005','BP00002','코멘트지롱~');
INSERT INTO REVIEW_SUB(ID,REVIEWID,BADGEPOINTID,CONTENTS)VALUES(REVIEW_SUB_SEQ.NEXTVAL,'RV00007','BP00002','코멘트에용~~~');
INSERT INTO REVIEW_SUB(ID,REVIEWID,BADGEPOINTID,CONTENTS)VALUES(REVIEW_SUB_SEQ.NEXTVAL,'RV00011','BP00002','코멘트에용~');
INSERT INTO REVIEW_SUB(ID,REVIEWID,BADGEPOINTID,CONTENTS)VALUES(REVIEW_SUB_SEQ.NEXTVAL,'RV00012','BP00006','비매너포인트 코멘트에용~');
INSERT INTO REVIEW_SUB(ID, REVIEWID, BADGEPOINTID, CONTENTS) VALUES(REVIEW_SUB_SEQ.NEXTVAL, 'RV00013', 'BP00001', '코멘트1');
INSERT INTO REVIEW_SUB(ID, REVIEWID, BADGEPOINTID, CONTENTS) VALUES(REVIEW_SUB_SEQ.NEXTVAL, 'RV00014', 'BP00001', '코멘트2');
INSERT INTO REVIEW_SUB(ID, REVIEWID, BADGEPOINTID, CONTENTS) VALUES(REVIEW_SUB_SEQ.NEXTVAL, 'RV00015', 'BP00001', '코멘트1');
INSERT INTO REVIEW_SUB(ID, REVIEWID, BADGEPOINTID, CONTENTS) VALUES(REVIEW_SUB_SEQ.NEXTVAL, 'RV00016', 'BP00002', '코멘트3');
INSERT INTO REVIEW_SUB(ID, REVIEWID, BADGEPOINTID, CONTENTS) VALUES(REVIEW_SUB_SEQ.NEXTVAL, 'RV00017', 'BP00006', '코멘트4');
INSERT INTO REVIEW_SUB(ID, REVIEWID, BADGEPOINTID, CONTENTS) VALUES(REVIEW_SUB_SEQ.NEXTVAL, 'RV00018', 'BP00002', '코멘트5');

--○ USER_BADGE_LOG 테이블 INSERT 쿼리문
INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID, GETREVIEWID, EXPIRATIONREVIEWID) VALUES(ADD_ID('USER_BADGE_LOG','BADGELOGID','BL'),'alberic','BP00002','RV00005','RV00005'); 

------------------------------------------------------ 빨강 ------------------------------------------------------
--○ DEL_REPLY 테이블 INSERT 쿼리문
INSERT INTO DEL_REPLY(ID,REPLYID,DELETEDATE)VALUES(DEL_REPLY_SEQ.NEXTVAL,'RV00002',SYSDATE);

--○ REPORT_REPLY 테이블 INSERT 쿼리문
INSERT INTO REPORT_REPLY(ID,REPLYID,USERID,REPORTCATEID,REPORTDETAIL,REPORTDATE)VALUES(REPORT_REPLY_SEQ.NEXTVAL,'RV00003','blumbald','RC00001','욕설이에요',SYSDATE);





<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.test.mybatis.IAddrDAO">

	<select id="addrSiList" resultType="com.test.mybatis.AddrDTO">
 		SELECT ADDRSIID AS ADDRSIID1, ADDRSINAME  AS ADDRSINAME1
		FROM ADDR_SI
 	</select>
 	
 	<select id="addrGuList" resultType="com.test.mybatis.AddrDTO">
		SELECT ADDRGUID AS ADDRGUID1, ADDRGUNAME AS ADDRGUNAME1
		FROM ADDR_GU
        where ADDRSIID=#{siid }
 	</select>
 	
 	<insert id = "userAddrInsert1">
 		INSERT INTO USER_ADDR(ID, USERID, ADDRGUID)
		VALUES(USER_ADDR_SEQ.NEXTVAL, #{userId }, #{addrGuId1 })
 	</insert>
 	
 	<insert id = "userAddrInsert2">
 		INSERT INTO USER_ADDR(ID, USERID, ADDRGUID)
		VALUES(USER_ADDR_SEQ.NEXTVAL, #{userId }, #{addrGuId2 })
 	</insert>

 	<insert id = "userAddrInsert3">
 		INSERT INTO USER_ADDR(ID, USERID, ADDRGUID)
		VALUES(USER_ADDR_SEQ.NEXTVAL, #{userId }, #{addrGuId3 })
 	</insert>
 	
 	
 	
 	
 	
 	
 	
 	<update id="updateAddr1">
 		UPDATE USER_ADDR
		SET ADDRGUID = #{addr.addrGuId1}
		WHERE UPPER(USERID) = UPPER(#{userId}) AND  ADDRGUID = #{addr2.addrGuId1}
 	</update>
 	
 	
 	<update id="updateAddr2">
 		UPDATE USER_ADDR
		SET ADDRGUID = #{addr.addrGuId2}
		WHERE UPPER(USERID) = UPPER(#{userId}) AND  ADDRGUID = #{addr2.addrGuId2}
 	</update>
 	
 	<update id="updateAddr3">
 		UPDATE USER_ADDR
		SET ADDRGUID = #{addr.addrGuId3}
		WHERE UPPER(USERID) = UPPER(#{userId}) AND  ADDRGUID = #{addr2.addrGuId3}
 	</update>
 	


</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.test.mybatis.IBadgeDAO">  <!-- 인터페이스 지정  -->
     <select id="BadgeList1" resultType="com.test.mybatis.BadgeDTO"> 
	      SELECT  BADGEPOINTID,BADGEPOINTNAME
	                , (SELECT COUNT(*)FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGECK
	                , (SELECT BADGELOGID FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGELOGID
	                , P.URL ,BADGEPOINTDESC1 , BADGEPOINTDESC2 
	      FROM POINT P 
	      WHERE P.BADGEPOINTCATEID ='BC00004'
	      ORDER BY BADGEPOINTID 
	</select> 
	
	<select id="BadgeList1_count" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT 
		FROM
		(
	    SELECT POSTID, MIN(REVIEWDATE), MIN(REVIEWID) 
	    FROM REVIEW
	    WHERE TAKEUSERID = #{userId}
	    GROUP BY POSTID
		)	 
	</select>  
	
	
	<select id="BadgeList1_date" resultType="com.test.mybatis.BadgeDTO"> 
	<![CDATA[
		SELECT Y.BADGEDATE AS BADGEDATE
		FROM
		(
		SELECT ROWNUM AS NUM,X.*
		FROM 
		(
		SELECT POSTID, MIN(REVIEWDATE) AS BADGEDATE, MIN(REVIEWID) 
		FROM REVIEW
		WHERE TAKEUSERID = #{userId}
		GROUP BY POSTID
		ORDER BY MIN(REVIEWDATE)
		)X
		WHERE ROWNUM <= 50 
		)Y
		WHERE NUM = 1 OR NUM = 15 OR NUM = 30 OR NUM = 50
	]]>
	</select> 
	
	
	
	<select id="PointList" resultType="com.test.mybatis.BadgeDTO"> 
	<![CDATA[
	 	SELECT TAKEUSERID, GIVEUSERID ,BADGEPOINTID ,REVIEWDATE ,EXPIRATIONDATE
		FROM
		(
		SELECT *
		FROM POINT_LOG_VIEW
		WHERE TAKEUSERID = #{userId} AND BADGEPOINTID = #{badgeId}
		ORDER BY REVIEWDATE DESC 
		)  
		WHERE ROWNUM <=5
	]]>
	</select> 
<!-- 	
   <select id="BadgeList2" resultType="com.test.mybatis.BadgeDTO"> 
	   SELECT  BADGEPOINTID,BADGEPOINTNAME
	              ,(SELECT COUNT(*) FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGECK 
	               , (SELECT BADGELOGID FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGELOGID
	               , (SELECT REVIEWDATE FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS REVIEWDATE
	               ,  (SELECT ADD_MONTHS(REVIEWDATE,12) FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS EXPIRATIONDATE
	               ,(SELECT COUNT(*) FROM POINT_LOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND TAKEUSERID=#{userId}) AS POINTNUM
	               , P.URL
	   FROM POINT P 
	   WHERE P.BADGEPOINTCATEID ='BC00001'
	   ORDER BY BADGEPOINTID
   </select> 
   
   <select id="BadgeList3" resultType="com.test.mybatis.BadgeDTO"> 
	     SELECT BADGEPOINTID,BADGEPOINTNAME
	             ,(SELECT COUNT(*) FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGECK 
	              ,(SELECT BADGELOGID FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGELOGID
	              ,(SELECT REVIEWDATE FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS REVIEWDATE
	              , (SELECT ADD_MONTHS(REVIEWDATE,12) FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS EXPIRATIONDATE
	              ,(SELECT COUNT(*) FROM POINT_LOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND TAKEUSERID=#{userId}) AS POINTNUM
	              , P.URL
	      FROM POINT P 
	      WHERE P.BADGEPOINTCATEID ='BC00002'
	      ORDER BY BADGEPOINTID 
   </select> 
   
   <select id="BadgeList4" resultType="com.test.mybatis.BadgeDTO"> 
	      SELECT BADGEPOINTID,BADGEPOINTNAME
	             ,(SELECT COUNT(*) FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGECK 
	              ,(SELECT BADGELOGID FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGELOGID
	              ,(SELECT REVIEWDATE FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS REVIEWDATE
	              , (SELECT ADD_MONTHS(REVIEWDATE,12) FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS EXPIRATIONDATE
	              ,(SELECT COUNT(*) FROM POINT_LOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND TAKEUSERID=#{userId}) AS POINTNUM
	              , P.URL
	      FROM POINT P 
	      WHERE P.BADGEPOINTCATEID ='BC00003'
	      ORDER BY BADGEPOINTID 
   </select>  -->
	
 	<select id="BadgeList2" resultType="com.test.mybatis.BadgeDTO"> 

	 SELECT  BADGEPOINTID,BADGEPOINTNAME
	           ,(SELECT COUNT(*) FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGECK 
               , (SELECT BADGELOGID FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGELOGID
               , (SELECT REVIEWDATE FROM BADGE_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS REVIEWDATE
               , (SELECT ADD_MONTHS(REVIEWDATE,12) FROM BADGE_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS EXPIRATIONDATE     
               ,(SELECT COUNT(*) FROM POINT_LOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND TAKEUSERID=#{userId}) AS POINTNUM
               , P.URL
	FROM POINT P 
	WHERE P.BADGEPOINTCATEID ='BC00001'
	ORDER BY BADGEPOINTID

	</select> 
	
	
	<select id="BadgeList3" resultType="com.test.mybatis.BadgeDTO"> 
	  SELECT  BADGEPOINTID,BADGEPOINTNAME
	           ,(SELECT COUNT(*) FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGECK 
               , (SELECT BADGELOGID FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGELOGID
               , (SELECT REVIEWDATE FROM BADGE_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS REVIEWDATE
               , (SELECT ADD_MONTHS(REVIEWDATE,12) FROM BADGE_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS EXPIRATIONDATE     
               ,(SELECT COUNT(*) FROM POINT_LOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND TAKEUSERID=#{userId}) AS POINTNUM
               , P.URL
	FROM POINT P 
	WHERE P.BADGEPOINTCATEID ='BC00002'
	ORDER BY BADGEPOINTID
	</select> 
	
	<select id="BadgeList4" resultType="com.test.mybatis.BadgeDTO"> 
	   SELECT  BADGEPOINTID,BADGEPOINTNAME
	           ,(SELECT COUNT(*) FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGECK 
               , (SELECT BADGELOGID FROM USERBADGELOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS BADGELOGID
               , (SELECT REVIEWDATE FROM BADGE_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS REVIEWDATE
               , (SELECT ADD_MONTHS(REVIEWDATE,12) FROM BADGE_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND USERID=#{userId}) AS EXPIRATIONDATE     
               ,(SELECT COUNT(*) FROM POINT_LOG_VIEW WHERE BADGEPOINTID = P.BADGEPOINTID AND TAKEUSERID=#{userId}) AS POINTNUM
               , P.URL
	FROM POINT P 
	WHERE P.BADGEPOINTCATEID ='BC00003'
	ORDER BY BADGEPOINTID
	</select>
	
	<select id="positiveBadge" resultType="com.test.mybatis.BadgeDTO"> 
		SELECT BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID,BADGEPOINTDESC2, URL
		FROM POINT
		WHERE BADGEPOINTCATEID='BC00001'
	</select>
	
	<select id="negativeBadge" resultType="com.test.mybatis.BadgeDTO"> 
		SELECT BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID,BADGEPOINTDESC2, URL
		FROM POINT
		WHERE BADGEPOINTCATEID='BC00002'
	</select> 
	
	<select id="hostBadge" resultType="com.test.mybatis.BadgeDTO"> 
		SELECT BADGEPOINTID, BADGEPOINTNAME, BADGEPOINTCATEID,BADGEPOINTDESC2, URL
		FROM POINT
		WHERE BADGEPOINTCATEID='BC00003'
	</select>  
	
	<select id="randomMainBadge" resultType="com.test.mybatis.BadgeDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		SELECT BADGEPOINTNAME, BADGEPOINTDESC1, URL, BADGEPOINTID
		FROM POINT
        WHERE BADGEPOINTCATEID IN ('BC00001', 'BC00003')
          AND BADGEPOINTID NOT IN ('BP00010')
		ORDER BY DBMS_RANDOM.VALUE
		)
		WHERE ROWNUM<=2
	]]>
	</select>
  
  	<select id="getUserList" resultType="java.lang.String">
  	<![CDATA[
	  	SELECT NICKNAME
		FROM
		(
		    SELECT NICKNAME
		    FROM USER_BADGE_LOG BL JOIN REVIEW RV ON BL.GETREVIEWID=RV.REVIEWID
		                           JOIN USER_ESSENTIAL UE ON BL.USERID=UE.USERID
		    WHERE BADGEPOINTID = #{badgePointId}
		    GROUP BY UE.NICKNAME, RV.REVIEWDATE
		    ORDER BY REVIEWDATE DESC
		)
		WHERE ROWNUM<=3
  	]]>
  	</select>
  	
  	<update id="mainBadge">
  		UPDATE USER_ESSENTIAL
		SET BADGELOGID=#{badgeLogId}
		WHERE USERID = #{userId}
  	</update>
  	
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 출처 : http://www.mybatis.org/mybatis-3/ko/getting-started.html -->

<!-- mapper 엘리먼트의 『namespace="패키지경로가 포함된 인터페이스"』 -->
<!-- 인터페이스 내부에 메소드명 선언이 되어 있어야 한다.  -->
<!-- 메소드명과 『id=식별자』가 되어야 한다.  -->
<mapper namespace="com.test.mybatis.ICsDAO">

	<select id="noticeList" resultType="com.test.mybatis.CsDTO">
		SELECT *
		FROM
		(
		    SELECT ID,TITLE, CONTENTS, TO_CHAR(NOTICEDATE, 'YYYY-MM-DD HH24:MI') AS CSDATE
		         , FLOOR( (ROW_NUMBER() OVER(ORDER BY NOTICEDATE DESC) - 1)/15 )+1 AS PAGENUM
		         , CEIL( (FLOOR( (ROW_NUMBER() OVER(ORDER BY NOTICEDATE DESC) - 1)/15 )+1)/5 ) AS LARGEPAGENUM
		    FROM NOTICE
		    WHERE TITLE LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		      OR CONTENTS LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		    ORDER BY NOTICEDATE DESC
		)
		WHERE PAGENUM=#{pageNum}
	</select>
	
	<select id="noticeTotalPageNum" resultType="java.lang.Integer">
		SELECT CEIL(COUNT(*)/15) AS TOTALPAGE
		FROM NOTICE
		WHERE TITLE LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		   OR CONTENTS LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		ORDER BY NOTICEDATE DESC
	</select>

	<select id="noticeTotalLargePageNum" resultType="java.lang.Integer">
		SELECT CEIL(CEIL(COUNT(*)/15)/5) AS TOTALLARGEPAGE
		FROM NOTICE
		WHERE TITLE LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		   OR CONTENTS LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		ORDER BY NOTICEDATE DESC
	</select>

	<select id="faqList" resultType="com.test.mybatis.CsDTO">
		SELECT *
		FROM
		(
		    SELECT ID,TITLE, CONTENTS, TO_CHAR(FAQDATE, 'YYYY-MM-DD HH24:MI') AS CSDATE
		         , FLOOR( (ROW_NUMBER() OVER(ORDER BY FAQDATE DESC) - 1)/15 )+1 AS PAGENUM
		         , CEIL( (FLOOR( (ROW_NUMBER() OVER(ORDER BY FAQDATE DESC) - 1)/15 )+1)/5 ) AS LARGEPAGENUM
		    FROM FAQ
		    WHERE TITLE LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		      OR CONTENTS LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		    ORDER BY FAQDATE DESC
		)
		WHERE PAGENUM=#{pageNum}
	</select>
	
	<select id="faqTotalPageNum" resultType="java.lang.Integer">
		SELECT CEIL(COUNT(*)/15) AS TOTALPAGE
		FROM FAQ
		WHERE TITLE LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		   OR CONTENTS LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		ORDER BY FAQDATE DESC  
	</select>

	<select id="faqTotalLargePageNum" resultType="java.lang.Integer">
		SELECT CEIL(CEIL(COUNT(*)/15)/5) AS TOTALLARGEPAGE
		FROM FAQ
		WHERE TITLE LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		   OR CONTENTS LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		ORDER BY FAQDATE DESC 
	</select>
		
	<!-- 기존 DirectquestionDAO.xml -->
	
	
	<insert id="drwrite">
		INSERT INTO DIRECT_QUESTION(ID, TITLE, USERID, CONTENTS, DIRECTQUESTIONDATE) 
		VALUES(DIRECT_QUESTION_SEQ.NEXTVAL, #{title}, 'coimhin', #{content}, SYSDATE)
	</insert>
	
	
	
	<!-- 기존 WithdrawalDAO.xml -->

 	<select id="nickname" resultType="String">	
		SELECT NICKNAME
		FROM USER_ESSENTIAL
		WHERE UPPER(USERID) = UPPER(#{userId })
		<!-- WHERE UPPER(USERID) = UPPER(#{userId }) -->
	</select>
	
	<select id="idpwcheck" resultType="int">
		SELECT COUNT(*) AS IDPWCHECK
		FROM LOGIN
		WHERE PWD = CRYPTPACK.ENCRYPT(#{pwd} ,'JAVA006$')
        AND UPPER(USERID)=UPPER(#{userId})
	</select>
	
	<!--del_user  -->
	<insert id="del_user">
		INSERT INTO DEL_USER(ID,USERID,DELETEDATE)
		VALUES(DEL_USER_SEQ.NEXTVAL,#{userId},SYSDATE)
	</insert>

</mapper>



<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 출처 : http://www.mybatis.org/mybatis-3/ko/getting-started.html -->

<!-- mapper 엘리먼트의 『namespace="패키지경로가 포함된 인터페이스"』 -->
<!-- 인터페이스 내부에 메소드명 선언이 되어 있어야 한다.  -->
<!-- 메소드명과 『id=식별자』가 되어야 한다.  -->
<mapper namespace="com.test.mybatis.IDirectquestioncompleteDAO">

	<!-- ○ id="식별자" 속성 추가 -->
	<!-- - 인터페이스에 선언된 메소드의 이름과 일치해야 하며, -->
	<!-- 호출 메소드명 역할을 수행하게 된다. -->
	<!-- ○ resuyltType="패키지 경로가 포함된 자료형 클래스" -->
	<!-- - string : java.lang.String
		 - byte : java.lang.byte
		 - short : java.lang.short
		 - int : java.lang.int
		 - integer : java.lang.integer
		 - double : java.lang.double
		 - float : java.lang.float
		 - boolean : java.lang.boolean
		 - decimal : java.math.BigDecimal
		 - object : java.lang.Object
		 - map :  java.util.Map
		 - hashmap :  java.util.HashMap
		 - list :  java.util.list
		 - arraylist : java.util.ArrayList
		 - collection  : java.util.Collection
		 - iterator : java.util.Iterator
		-->


	
	<insert id="drwrite">
		INSERT INTO DIRECT_QUESTION(ID, TITLE, USERID, CONTENTS, DIRECTQUESTIONDATE) 
		VALUES(DIRECT_QUESTION_SEQ.NEXTVAL, #{title}, 'coimhin', #{content}, SYSDATE)
	</insert>
	
	

	


	

</mapper>




<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.test.mybatis.IFollowDAO"> 
	
	<insert id="followinsert">
		INSERT INTO FOLLOW(ID, GIVEUSERID, TAKEUSERID, FOLLOWDATE) VALUES(FOLLOW_SEQ.NEXTVAL, #{userId}, #{followId}, SYSDATE)
	</insert>
	
	<delete id="followdelete">
		DELETE
		FROM FOLLOW
		WHERE GIVEUSERID = #{userId} AND TAKEUSERID = #{followId}
	</delete>

	<insert id="followinsert2">
		INSERT INTO FOLLOW(ID, GIVEUSERID, TAKEUSERID, FOLLOWDATE) VALUES(FOLLOW_SEQ.NEXTVAL, #{userId}, #{followId}, SYSDATE)
	</insert>
	
	<delete id="followdelete2">
		DELETE
		FROM FOLLOW
		WHERE GIVEUSERID = #{userId} AND TAKEUSERID = #{followId}
	</delete>


  	<select id="followingList" resultType="com.test.mybatis.FollowDTO"> 
		SELECT DISTINCT UE.NICKNAME ,UE.USERID, UE.BADGELOGID, BL.BADGEPOINTID ,P.BADGEPOINTNAME,P.URL
                 , NVL2((SELECT ID FROM FOLLOW WHERE GIVEUSERID=#{userId} AND TAKEUSERID=UE.USERID),1,0) AS FOLLOWID
				 ,(SELECT ROUND(AVG(GRADE),1) FROM REVIEW WHERE TAKEUSERID=UE.USERID GROUP BY TAKEUSERID) AS REVIEWGRADE
		FROM FOLLOW F LEFT JOIN USER_ESSENTIAL UE  ON  UE.USERID = F.TAKEUSERID
                        JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
                        JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID
		WHERE F.GIVEUSERID=#{userId}  
		ORDER BY USERID
	</select> 
	
	<select id="followingBad" resultType="com.test.mybatis.FollowDTO"> 
		SELECT USERID, FN_PROFILE_BAD_BADGE(USERID) AS URLBAD
		FROM USER_ESSENTIAL UE JOIN FOLLOW F ON UE.USERID = F.TAKEUSERID
		WHERE F.GIVEUSERID=#{userId}
		ORDER BY USERID
	</select> 
	 	
	 	
	<select id="followingAddrList" resultType="com.test.mybatis.FollowDTO"> 
		SELECT USERID , MAX(ADDRSIID1) AS ADDRSINAME1 , MAX(ADDRGUID1) AS ADDRGUNAME1
		              ,MAX(ADDRSIID2) AS ADDRSINAME2 , MAX(ADDRGUID2) AS ADDRGUNAME2
		              ,MAX(ADDRSIID3) AS ADDRSINAME3 , MAX(ADDRGUID3) AS ADDRGUNAME3
		FROM 
		(
		SELECT USERID
		     , DECODE(NUM, 2, ADDRSINAME) AS ADDRSIID2
		     , DECODE(NUM, 2, ADDRGUNAME) AS ADDRGUID2
		     , DECODE(NUM, 3, ADDRGUNAME) AS ADDRGUID3
		      , DECODE(NUM, 3, ADDRSINAME) AS ADDRSIID3
		     , DECODE(NUM, 1, ADDRGUNAME) AS ADDRGUID1
		     , DECODE(NUM, 1, ADDRSINAME) AS ADDRSIID1
		FROM
		(
		SELECT UE.USERID, UA.ADDRGUID , ADDRSINAME, ADDRGUNAME, RANK() OVER(PARTITION BY UE.USERID ORDER BY UA.ADDRGUID) AS NUM 
		FROM USER_ESSENTIAL UE JOIN USER_ADDR UA ON UE.USERID=UA.USERID
		JOIN ADDR_GU AG ON UA.ADDRGUID = AG. ADDRGUID
		JOIN ADDR_SI AD ON AG.ADDRSIID = AD.ADDRSIID
		JOIN FOLLOW F ON UE.USERID = F. TAKEUSERID
		WHERE F.GIVEUSERID=#{userId}
		ORDER BY USERID, ADDRGUID
		)
		) GROUP BY USERID
		ORDER BY USERID
	</select> 
	 	
	
	<select id="followingInterList" resultType="com.test.mybatis.FollowDTO"> 	
		SELECT USERID , MAX(INTERMAINID1) AS INTERMAINNAME1 , MAX(INTERSUBID1) AS INTERSUBNAME1
		              ,MAX(INTERMAINID2) AS INTERMAINNAME2 , MAX(INTERSUBID2) AS INTERSUBNAME2
		              ,MAX(INTERMAINID3) AS INTERMAINNAME3 , MAX(INTERSUBID3) AS INTERSUBNAME3
		FROM 
		(
		SELECT USERID
		     , DECODE(NUM, 2, INTERSUBNAME) AS INTERSUBID3
		     , DECODE(NUM, 2, INTERMAINNAME) AS INTERMAINID3
		     , DECODE(NUM, 3, INTERSUBNAME) AS INTERSUBID2
		     , DECODE(NUM, 3, INTERMAINNAME) AS INTERMAINID2
		     , DECODE(NUM, 1, INTERSUBNAME) AS INTERSUBID1
		     , DECODE(NUM, 1, INTERMAINNAME) AS INTERMAINID1
		FROM
		(
		SELECT UE.USERID, UI.INTERSUBID, INTERSUBNAME, INTERMAINNAME , RANK() OVER(PARTITION BY UE.USERID ORDER BY UI.INTERSUBID) AS NUM 
		FROM USER_ESSENTIAL UE JOIN USER_INTEREST UI ON UE.USERID=UI.USERID
		JOIN INTEREST_SUB I ON UI.INTERSUBID = I.INTERSUBID
		JOIN INTEREST_MAIN IM ON I.INTERMAINID = IM.INTERMAINID
		JOIN FOLLOW F ON UE.USERID = F.TAKEUSERID
		WHERE F.GIVEUSERID=#{userId}
		ORDER BY USERID, INTERSUBID
		)
		) GROUP BY USERID
		ORDER BY USERID
	</select>  	


	
  	<select id="followerList" resultType="com.test.mybatis.FollowDTO"> 
		  SELECT DISTINCT UE.NICKNAME ,UE.USERID, UE.BADGELOGID, BL.BADGEPOINTID ,P.BADGEPOINTNAME,P.URL               
                 , NVL2((SELECT ID FROM FOLLOW WHERE GIVEUSERID=#{userId} AND TAKEUSERID=UE.USERID),1,0) AS FOLLOWID
				 ,(SELECT ROUND(AVG(GRADE),1) FROM REVIEW WHERE TAKEUSERID=UE.USERID GROUP BY TAKEUSERID) AS REVIEWGRADE
		FROM FOLLOW F LEFT JOIN USER_ESSENTIAL UE  ON  UE.USERID = F.GIVEUSERID
                        JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
                        JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID                      
		WHERE F.TAKEUSERID=#{userId}
        ORDER BY USERID
	</select> 
	
	
	<select id="followerBad" resultType="com.test.mybatis.FollowDTO"> 
		SELECT USERID, FN_PROFILE_BAD_BADGE(USERID) AS URLBAD
		FROM USER_ESSENTIAL UE JOIN FOLLOW F ON UE.USERID = F.GIVEUSERID
		WHERE F.TAKEUSERID=#{userId}
		ORDER BY USERID
	</select> 
	 	

	<select id="followerAddrList" resultType="com.test.mybatis.FollowDTO"> 
		SELECT USERID , MAX(ADDRSIID1) AS ADDRSINAME1 , MAX(ADDRGUID1) AS ADDRGUNAME1
              ,MAX(ADDRSIID2) AS ADDRSINAME2 , MAX(ADDRGUID2) AS ADDRGUNAME2
              ,MAX(ADDRSIID3) AS ADDRSINAME3 , MAX(ADDRGUID3) AS ADDRGUNAEM3
		FROM 
		(
		SELECT USERID
		     , DECODE(NUM, 2, ADDRSINAME) AS ADDRSIID2
		     , DECODE(NUM, 2, ADDRGUNAME) AS ADDRGUID2
		     , DECODE(NUM, 3, ADDRGUNAME) AS ADDRGUID3
		      , DECODE(NUM, 3, ADDRSINAME) AS ADDRSIID3
		     , DECODE(NUM, 1, ADDRGUNAME) AS ADDRGUID1
		     , DECODE(NUM, 1, ADDRSINAME) AS ADDRSIID1
		FROM
		(
		SELECT UE.USERID, UA.ADDRGUID , ADDRSINAME, ADDRGUNAME, RANK() OVER(PARTITION BY UE.USERID ORDER BY UA.ADDRGUID) AS NUM 
		FROM USER_ESSENTIAL UE JOIN USER_ADDR UA ON UE.USERID=UA.USERID
		JOIN ADDR_GU AG ON UA.ADDRGUID = AG. ADDRGUID
		JOIN ADDR_SI AD ON AG.ADDRSIID = AD.ADDRSIID
		JOIN FOLLOW F ON UE.USERID = F. GIVEUSERID
		WHERE F.TAKEUSERID=#{userId}
		ORDER BY USERID, ADDRGUID
		)
		) GROUP BY USERID
		ORDER BY USERID
	</select> 
	 	
	
	<select id="followerInterList" resultType="com.test.mybatis.FollowDTO"> 	
		SELECT USERID , MAX(INTERMAINID1) AS INTERMAINNAME1 , MAX(INTERSUBID1) AS INTERSUBNAME1
              ,MAX(INTERMAINID2) AS INTERMAINNAME2 , MAX(INTERSUBID2) AS INTERSUBNAME2
		              ,MAX(INTERMAINID3) AS INTERMAINNAME3 , MAX(INTERSUBID3) AS INTERSUBNAME3
		FROM 
		(
		SELECT USERID
		     , DECODE(NUM, 2, INTERSUBNAME) AS INTERSUBID3
		     , DECODE(NUM, 2, INTERMAINNAME) AS INTERMAINID3
		     , DECODE(NUM, 3, INTERSUBNAME) AS INTERSUBID2
		     , DECODE(NUM, 3, INTERMAINNAME) AS INTERMAINID2
		     , DECODE(NUM, 1, INTERSUBNAME) AS INTERSUBID1
		     , DECODE(NUM, 1, INTERMAINNAME) AS INTERMAINID1
		FROM
		(
		SELECT UE.USERID, UI.INTERSUBID, INTERSUBNAME, INTERMAINNAME , RANK() OVER(PARTITION BY UE.USERID ORDER BY UI.INTERSUBID) AS NUM 
		FROM USER_ESSENTIAL UE JOIN USER_INTEREST UI ON UE.USERID=UI.USERID
		JOIN INTEREST_SUB I ON UI.INTERSUBID = I.INTERSUBID
		JOIN INTEREST_MAIN IM ON I.INTERMAINID = IM.INTERMAINID
		JOIN FOLLOW F ON UE.USERID = F.GIVEUSERID
		WHERE F.TAKEUSERID=#{userId}
		ORDER BY USERID, INTERSUBID
		)
		) GROUP BY USERID
		ORDER BY USERID
	</select>  	
  
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.test.mybatis.IInterDAO">

 	<select id="interMainList" resultType="com.test.mybatis.InterDTO">
 		SELECT INTERMAINID AS INTERMAINID1, INTERMAINNAME AS INTERMAINNAME1
		FROM INTEREST_MAIN
 	</select>
 	
 	<select id="interSubList" resultType="com.test.mybatis.InterDTO">
 		SELECT INTERSUBID AS INTERSUBID1, INTERSUBNAME AS INTERSUBNAME1
		FROM INTEREST_SUB
        WHERE INTERMAINID = #{mainid}
 	</select>
 	
 	<insert id = "userInterInsert1">
 		INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID)
		VALUES (USER_INTEREST_SEQ.NEXTVAL, #{userId }, #{interSubId1 })
 	</insert>
 	
 	<insert id = "userInterInsert2">
 		INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID)
		VALUES (USER_INTEREST_SEQ.NEXTVAL, #{userId }, #{interSubId2 })
 	</insert>
 	
 	<insert id = "userInterInsert3">
 		INSERT INTO USER_INTEREST(ID, USERID, INTERSUBID)
		VALUES (USER_INTEREST_SEQ.NEXTVAL, #{userId }, #{interSubId3 })
 	</insert>
 	
 	<update id = "updateInter1">
 		UPDATE  USER_INTEREST
		SET INTERSUBID = #{inter.interSubId1}
		WHERE UPPER(USERID) = UPPER(#{userId}) AND INTERSUBID = #{inter2.interSubId1}
 	</update>
 	
 	<update id = "updateInter2">
 		UPDATE  USER_INTEREST
		SET INTERSUBID = #{inter.interSubId2}
		WHERE UPPER(USERID) = UPPER(#{userId}) AND INTERSUBID = #{inter2.interSubId2}
 	</update>
 	
 	<update id = "updateInter3">
 		UPDATE  USER_INTEREST
		SET INTERSUBID = #{inter.interSubId3}
		WHERE UPPER(USERID) = UPPER(#{userId}) AND INTERSUBID = #{inter2.interSubId3}
 	</update>
 	

  	<select id="userInterest" resultType="com.test.mybatis.InterDTO">
		SELECT USERID, INTERSUBID AS INTERSUBID1, INTERMAINID AS INTERMAINID1, INTERSUBNAME AS INTERSUBNAME1, INTERMAINNAME AS INTERMAINNAME1
		FROM
		(
		    SELECT UI.ID, UI.USERID, UI.INTERSUBID, "IS".INTERMAINID, "IS".INTERSUBNAME, IM.INTERMAINNAME
		    FROM USER_INTEREST UI JOIN INTEREST_SUB "IS" ON UI.INTERSUBID="IS".INTERSUBID
		                          JOIN INTEREST_MAIN IM ON "IS".INTERMAINID=IM.INTERMAINID
		    WHERE USERID=#{userId}
		    ORDER BY UI.ID
		)
		WHERE ROWNUM=1
  	</select>

</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.test.mybatis.IJoinDAO">  <!-- 인터페이스 지정  -->
	<select id="joinlist" resultType="com.test.mybatis.JoinDTO"> 
		SELECT JOINID, USERID, URL, NICKNAME, JOINDATE, CONTENTS, DELJOIN, STATUSID
		FROM JOIN_VIEW
		WHERE POSTID = #{postHostId}
	</select>
	<select id="replylist" resultType="com.test.mybatis.JoinDTO">
		SELECT JOINID, REPLYID, USERID, URL, NICKNAME, JOINDATE, CONTENTS, DELJOIN, USERTYPEID
		FROM REPLY_VIEW
		WHERE POSTID = #{postHostId}
	</select>
	<select id="postmeettype" resultType="int">
		SELECT COUNT(STATUSID)
		FROM JOIN
		WHERE POSTID = #{postId} AND 
		STATUSID = 'ST00003'
	</select>
	<insert id="joininsert">
		INSERT INTO JOIN(JOINID, POSTID, USERID, STATUSID, CONTENTS, JOINDATE) VALUES(ADD_ID('JOIN','JOINID','JN'),#{postHostId},#{joinDTO.userId}, 'ST00001',#{joinDTO.contents},SYSDATE)
	</insert>
	<insert id="replyinsert">
		INSERT INTO REPLY(REPLYID, JOINID, CONTENTS, REPLYDATE, USERTYPEID) VALUES(ADD_ID('REPLY', 'REPLYID', 'RV'), #{joinId}, #{contents}, SYSDATE, #{userTypeId})
	</insert>
	<update id="joinupdate">
		UPDATE JOIN
		SET STATUSID = #{statusId}
		WHERE JOINID = #{joinId}
	</update>
	<select id="serchjoin" resultType="int">
	<![CDATA[
		SELECT COUNT(STATUSID)
		FROM JOIN
		WHERE POSTID = #{hostPostId} AND 
		STATUSID = CASE WHEN 1<=(SELECT COUNT(STATUSID) FROM JOIN WHERE POSTID = #{hostPostId} AND STATUSID = 'ST00003') THEN 'ST00003' ELSE 'ST00002' END
		]]>
	</select>
	<select id="serchjoinid" resultType="java.lang.String">
		SELECT JOINID
		FROM JOIN
		WHERE POSTID= #{postHostId} AND USERID = #{userId}
	</select>
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.test.mybatis.IMessageDAO">  
  
	<select id="messageRecevieList" resultType="com.test.mybatis.MessageDTO"> 
		SELECT *
		FROM
		(
		    SELECT M.MESSAGEID,M.CONTENTS,M.GIVEUSERID,M.TAKEUSERID,M.SENDDATE,M.CHECKDATE
		             , FLOOR( (ROW_NUMBER() OVER(ORDER BY M.SENDDATE DESC) - 1)/10 )+1 AS PAGENUM
		         , CEIL( (FLOOR( (ROW_NUMBER() OVER(ORDER BY M.SENDDATE DESC) - 1)/10 )+1)/5 ) AS LARGEPAGENUM
		    FROM MESSAGE M LEFT JOIN DEL_MESSAGE DM  ON (M.MESSAGEID = DM.MESSAGEID AND M.TAKEUSERID=DM.USERID)
		    WHERE DM.MESSAGEID IS NULL AND UPPER(TAKEUSERID)=UPPER(#{userId})
		    ORDER BY M.SENDDATE DESC
		)
		WHERE PAGENUM=#{pageNum}
	</select>  	
	
	<select id="messageRecevieTotalPageNum" resultType="java.lang.Integer">
		SELECT CEIL(COUNT(*)/10) AS TOTALPAGE
		FROM MESSAGE M LEFT JOIN DEL_MESSAGE DM  ON (M.MESSAGEID = DM.MESSAGEID AND M.TAKEUSERID=DM.USERID)
		WHERE DM.MESSAGEID IS NULL AND UPPER(TAKEUSERID)=UPPER(#{userId})
		ORDER BY M.SENDDATE DESC
	</select>

	<select id="messageRecevieTotalLargePageNum" resultType="java.lang.Integer">
		SELECT CEIL(CEIL(COUNT(*)/10)/5) AS TOTALLARGEPAGE
		FROM MESSAGE M LEFT JOIN DEL_MESSAGE DM  ON (M.MESSAGEID = DM.MESSAGEID AND M.TAKEUSERID=DM.USERID)
		WHERE DM.MESSAGEID IS NULL AND UPPER(TAKEUSERID)=UPPER(#{userId})
		ORDER BY M.SENDDATE DESC
	</select>

	<select id="messageSendList" resultType="com.test.mybatis.MessageDTO"> 
		SELECT *
		FROM
		(
		    SELECT M.MESSAGEID,M.CONTENTS,M.GIVEUSERID,M.TAKEUSERID,M.SENDDATE,M.CHECKDATE
		             , FLOOR( (ROW_NUMBER() OVER(ORDER BY M.SENDDATE DESC) - 1)/10 )+1 AS PAGENUM
		         , CEIL( (FLOOR( (ROW_NUMBER() OVER(ORDER BY M.SENDDATE DESC) - 1)/10 )+1)/5 ) AS LARGEPAGENUM
		    FROM MESSAGE M LEFT JOIN DEL_MESSAGE DM  ON (M.MESSAGEID = DM.MESSAGEID AND M.GIVEUSERID=DM.USERID)
		    WHERE DM.MESSAGEID IS NULL AND UPPER(GIVEUSERID)=UPPER(#{userId})
		    ORDER BY M.SENDDATE
		)
		WHERE PAGENUM=#{pageNum}
	</select>  	
	
	<select id="messageSendTotalPageNum" resultType="java.lang.Integer">
		SELECT CEIL(COUNT(*)/10) AS TOTALPAGE
		FROM MESSAGE M LEFT JOIN DEL_MESSAGE DM  ON (M.MESSAGEID = DM.MESSAGEID AND M.GIVEUSERID=DM.USERID)
		WHERE DM.MESSAGEID IS NULL AND UPPER(GIVEUSERID)=UPPER(#{userId})
		ORDER BY M.SENDDATE
	</select>

	<select id="messageSendTotalLargePageNum" resultType="java.lang.Integer">
		SELECT CEIL(CEIL(COUNT(*)/10)/5) AS TOTALLARGEPAGE
		FROM MESSAGE M LEFT JOIN DEL_MESSAGE DM  ON (M.MESSAGEID = DM.MESSAGEID AND M.GIVEUSERID=DM.USERID)
		WHERE DM.MESSAGEID IS NULL AND UPPER(GIVEUSERID)=UPPER(#{userId})
		ORDER BY M.SENDDATE
	</select>
	
	<insert id="messageAdd">
		INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE)
		VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'), #{userId}, #{message.takeUserId},#{message.contents },SYSDATE)
	</insert>
	
	<delete id="messageDelete">
		INSERT INTO DEL_MESSAGE(ID,MESSAGEID,DELETEDATE,USERID)
		VALUES (DEL_MESSAGE_SEQ.NEXTVAL ,#{messageId },SYSDATE, #{userId})
	</delete>

 	<select id="checkId" resultType="java.lang.Integer">
 		SELECT COUNT(*)
		FROM LOGIN
		WHERE USERID = #{takeUserId }
 	</select> 
 	
 	<update id="messageCheckDate">
	 	UPDATE MESSAGE
		SET CHECKDATE = SYSDATE
		WHERE MESSAGEID = #{messageId }
 	</update>
 	
	<insert id="messageinsert">
		INSERT INTO MESSAGE(MESSAGEID, GIVEUSERID, TAKEUSERID, CONTENTS, SENDDATE) VALUES(ADD_ID('MESSAGE', 'MESSAGEID', 'MS'),#{giveUserId}, #{takeUserId}, #{contents}, SYSDATE)
	</insert>
	
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.test.mybatis.IPostDAO">  <!-- 인터페이스 지정  -->
	<select id="postlist" resultType="com.test.mybatis.PostDTO" parameterType="String">
		SELECT POSTID, USERID, NICKNAME, TITLE, CONTENTS, GRADE, TELCERTIID, EMAILCERTIID, URL, BADURL, ADDRSIID, ADDRSINAME, ADDRSINAME, ADDRGUID, ADDRGUNAME, ADDRDETAIL, INTERMAINID, INTERMAINNAME, INTERSUBID, INTERSUBNAME, INTERDETAIL, MINNUM, MAXNUM, POSTDATE, MEETDATE, SAMEGENDER, DRINK, LIMITGRADE, MOOD MOODNAME
     	, NVL((SELECT ID FROM FOLLOW WHERE GIVEUSERID= #{followIds} AND TAKEUSERID=PV.USERID), 0) AS FOLLOWID
		FROM POST_VIEW2 PV
		WHERE POSTID = #{postHostId}
	</select>
	
	<insert id="postinsert">
		INSERT INTO POST(POSTID, USERID, TITLE, ADDRGUID, ADDRDETAIL, INTERSUBID, INTERDETAIL, MEETDATE, POSTDATE, CONTENTS, MOODID, LIMITGRADE, MINNUM, MAXNUM, DRINKID, SAMEGENDERID)
		VALUES(ADD_ID('POST', 'POSTID', 'PT'), #{userId, jdbcType=VARCHAR}, #{title, jdbcType=VARCHAR}, #{addrGuId, jdbcType=VARCHAR}, #{addrDetail, jdbcType=VARCHAR}, #{interSubId, jdbcType=VARCHAR}, #{interDetail, jdbcType=VARCHAR}, TO_DATE(#{meetDate, jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI:SS'), SYSDATE, #{contents, jdbcType=VARCHAR}, #{moodName, jdbcType=VARCHAR}, #{grade}, #{minNum}, #{maxNum}, #{drink, jdbcType=VARCHAR}, #{samegender, jdbcType=VARCHAR})
	</insert>
	
	<select id="serchpost" resultType="java.lang.String">
		SELECT MAX(POSTID) POSTID
		FROM POST
		WHERE USERID = #{userId}
	</select>
	
	<select id="searchList" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		SELECT FN_CAL_RANK(POSTID, #{userId}, #{keyword}) AS GRADETOTAL
			 , FN_USER_GRADE(USERID) AS GRADEHOST
			 , FN_SEARCH_ADDR(#{userId}, ADDRGUID) AS GRADEADDR
			 , FN_SEARCH_KEYWORD(#{keyword}, TITLE, 25) AS GRADETITLE
			 , FN_SEARCH_KEYWORD(#{keyword}, INTERDETAIL, 15) AS GRADEINTERDETAIL
			 , FN_SEARCH_KEYWORD(#{keyword}, CONTENTS, 10) AS GRADECONTENTS
		     , RANK() OVER(ORDER BY FN_CAL_RANK(POSTID, #{userId}, #{keyword}) DESC, MEETDATE DESC) AS POSTNUM
		     , POSTID, USERID, NICKNAME, URL, URLBAD
		     , TITLE, MINNUM, MAXNUM, CONTENTS
		     , ADDRSINAME, ADDRGUNAME, TO_CHAR(MEETDATE, 'YYYY/MM/DD HH24:MI') AS MEETDATE
		FROM POST_VIEW
		WHERE MEETDATE >= SYSDATE
		  AND (ADDRGUID LIKE '%'||#{addrGuId1} OR ADDRGUID IN (#{addrGuId2} ,#{addrGuId3}))
		  AND (INTERSUBID LIKE '%'||#{interSubId1} OR INTERSUBID IN (#{interSubId2} ,#{interSubId3}))
		  AND (#{minNum}<=MINNUM AND MAXNUM<=#{maxNum})
		  AND (TO_DATE(#{minMeetDate}, 'YYYY-MM-DD')<=MEETDATE AND MEETDATE<=TO_DATE(#{maxMeetDate}, 'YYYY-MM-DD'))
		  AND MOOD LIKE '%'||#{moodId}||'%'
		  AND LIMITGRADE>=#{limitGrade}
		  AND DRINK LIKE '%'||#{drinkId}||'%'
		  AND SAMEGENDER LIKE '%'||#{sameGenderId}||'%'
		)
		WHERE (6*#{pageNum}-5) <= POSTNUM AND POSTNUM < (6*#{pageNum}+1)
	]]>
	</select>
	
	<select id="searchListGuest" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		SELECT FN_CAL_RANK_GUEST(POSTID, #{guestAddrGuId, jdbcType=VARCHAR}, #{keyword}) AS GRADETOTAL
			 , FN_USER_GRADE(USERID) AS GRADEHOST
			 , FN_SEARCH_ADDR_GUEST(#{guestAddrGuId}, ADDRGUID) AS GRADEADDR
			 , FN_SEARCH_KEYWORD(#{keyword}, TITLE, 25) AS GRADETITLE
			 , FN_SEARCH_KEYWORD(#{keyword}, INTERDETAIL, 15) AS GRADEINTERDETAIL
			 , FN_SEARCH_KEYWORD(#{keyword}, CONTENTS, 10) AS GRADECONTENTS 
		     , RANK() OVER(ORDER BY FN_CAL_RANK_GUEST(POSTID, #{guestAddrGuId}, #{keyword}) DESC, MEETDATE DESC) AS POSTNUM
		     , POSTID, USERID, NICKNAME, URL, URLBAD
		     , TITLE, MINNUM, MAXNUM, CONTENTS
		     , ADDRSINAME, ADDRGUNAME, TO_CHAR(MEETDATE, 'YYYY/MM/DD HH24:MI') AS MEETDATE
		FROM POST_VIEW
		WHERE MEETDATE >= SYSDATE
		  AND (ADDRGUID LIKE '%'||#{addrGuId1} OR ADDRGUID IN (#{addrGuId2} ,#{addrGuId3}))
		  AND (INTERSUBID LIKE '%'||#{interSubId1} OR INTERSUBID IN (#{interSubId2} ,#{interSubId3}))
		  AND (#{minNum}<=MINNUM AND MAXNUM<=#{maxNum})
		  AND (TO_DATE(#{minMeetDate}, 'YYYY-MM-DD')<=MEETDATE AND MEETDATE<=TO_DATE(#{maxMeetDate}, 'YYYY-MM-DD'))
		  AND MOOD LIKE '%'||#{moodId}||'%'
		  AND LIMITGRADE>=#{limitGrade}
		  AND DRINK LIKE '%'||#{drinkId}||'%'
		  AND SAMEGENDER LIKE '%'||#{sameGenderId}||'%'
		)
		WHERE (6*#{pageNum}-5) <= POSTNUM AND POSTNUM < (6*#{pageNum}+1)
	]]>
	</select>
	
	<select id="searchCateList" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		SELECT FN_CAL_RANK(POSTID, #{userId}, #{keyword}) AS GRADETOTAL
			 , FN_USER_GRADE(USERID) AS GRADEHOST
			 , FN_SEARCH_ADDR(#{userId}, ADDRGUID) AS GRADEADDR
			 , FN_SEARCH_KEYWORD(#{keyword}, TITLE, 25) AS GRADETITLE
			 , FN_SEARCH_KEYWORD(#{keyword}, INTERDETAIL, 15) AS GRADEINTERDETAIL
			 , FN_SEARCH_KEYWORD(#{keyword}, CONTENTS, 10) AS GRADECONTENTS 
		     , RANK() OVER(ORDER BY FN_CAL_RANK(POSTID, #{userId}, #{keyword}) DESC, MEETDATE DESC) AS POSTNUM
		     , POSTID, USERID, NICKNAME, URL, URLBAD
		     , TITLE, MINNUM, MAXNUM, CONTENTS
		     , ADDRSINAME, ADDRGUNAME, TO_CHAR(MEETDATE, 'YYYY/MM/DD HH24:MI') AS MEETDATE
		FROM POST_VIEW
		WHERE MEETDATE >= SYSDATE
		  AND INTERMAINID=#{userInterMainId}
		  AND INTERSUBID LIKE '%'||#{userInterSubId}
		  AND (ADDRGUID LIKE '%'||#{addrGuId1} OR ADDRGUID IN (#{addrGuId2} ,#{addrGuId3}))
		  AND (INTERSUBID LIKE '%'||#{interSubId1} OR INTERSUBID IN (#{interSubId2} ,#{interSubId3}))
		  AND (#{minNum}<=MINNUM AND MAXNUM<=#{maxNum})
		  AND (TO_DATE(#{minMeetDate}, 'YYYY-MM-DD')<=MEETDATE AND MEETDATE<=TO_DATE(#{maxMeetDate}, 'YYYY-MM-DD'))
		  AND MOOD LIKE '%'||#{moodId}||'%'
		  AND LIMITGRADE>=#{limitGrade}
		  AND DRINK LIKE '%'||#{drinkId}||'%'
		  AND SAMEGENDER LIKE '%'||#{sameGenderId}||'%'
		)
		WHERE (6*#{pageNum}-5) <= POSTNUM AND POSTNUM < (6*#{pageNum}+1)
	]]>
	</select>
	
	<select id="mainHotList" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		    SELECT POSTID, USERID, NICKNAME, TITLE, CONTENTS, MEETDATE, ADDRSINAME, ADDRGUNAME, URL, URLBAD
		    FROM POST_VIEW
		    WHERE MEETDATE>=SYSDATE
		      AND FN_POST_IS_ACCEPTED(POSTID)=0
		      AND INTERMAINID=(SELECT INTERMAINID
		                        FROM
		                        (
		                            SELECT IM.INTERMAINID, RANK() OVER(ORDER BY COUNT(*)) AS RANK
		                            FROM POST P JOIN INTEREST_SUB "IS" ON P.INTERSUBID="IS".INTERSUBID
		                                        JOIN INTEREST_MAIN IM ON "IS".INTERMAINID=IM.INTERMAINID
		                            WHERE P.MEETDATE>=SYSDATE
		                            GROUP BY IM.INTERMAINID
		                            ORDER BY RANK() OVER(ORDER BY COUNT(*))
		                        )
		                        WHERE ROWNUM=1)
		    ORDER BY MEETDATE DESC
		)
		WHERE ROWNUM <=5
	]]>
	</select>
	
	<select id="mainRecommendList" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT POSTID, USERID, NICKNAME, TITLE, CONTENTS, MEETDATE, ADDRSINAME, ADDRGUNAME, URL, URLBAD
		FROM
		(
		    SELECT *
		    FROM POST_VIEW 
		    WHERE MEETDATE>=SYSDATE
		      AND FN_POST_IS_ACCEPTED(POSTID)=0
		    ORDER BY FN_CAL_RANK(POSTID, #{userId}, '||') DESC, MEETDATE DESC
		)
		WHERE ROWNUM <=5
	]]>
	</select>

	<select id="mainApproachingList" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		    SELECT POSTID, USERID, NICKNAME, TITLE, CONTENTS, MEETDATE, ADDRSINAME, ADDRGUNAME, URL, URLBAD
		    FROM POST_VIEW PV
		    WHERE FN_POST_IS_ACCEPTED(POSTID)=0
		      AND MEETDATE>=SYSDATE
		    ORDER BY MEETDATE DESC
		)
		WHERE ROWNUM<=5
	]]>
	</select>
	
	<select id="myReviewList" resultType="com.test.mybatis.PostDTO">
		SELECT POSTID, URL, NICKNAME, TITLE, CONTENTS, MEETDATE, ADDRSINAME, ADDRGUNAME, FN_USER_POST_STATUS(#{userId}, POSTID) AS POSTSTATUS
		FROM 
		(
			SELECT  P.POSTID AS POSTID, PT.URL AS URL, E.NICKNAME AS NICKNAME, P.TITLE AS TITLE, P.CONTENTS AS CONTENTS, P.MEETDATE AS MEETDATE, S.ADDRSINAME AS ADDRSINAME, G.ADDRGUNAME AS ADDRGUNAME, RANK() OVER(ORDER BY MEETDATE DESC) AS NUM
			FROM USER_ESSENTIAL E JOIN POST P
					ON E.USERID =P.USERID
					JOIN ADDR_GU G
					ON P.ADDRGUID= G.ADDRGUID
					JOIN ADDR_SI S
					ON G.ADDRSIID = S.ADDRSIID
			        JOIN USER_BADGE_LOG UBL
			        ON E.BADGELOGID = UBL.BADGELOGID
			        JOIN POINT PT
			        ON UBL.BADGEPOINTID = PT.BADGEPOINTID
					WHERE E.USERID = #{userId}
			        ORDER BY MEETDATE DESC
		)
		<!-- <![CDATA[ WHERE NUM>=1 AND NUM <=6 ]]> -->
	</select>
	
	<select id="reviewList" resultType="com.test.mybatis.PostDTO">
		SELECT POSTID,USERID, URL, NICKNAME, TITLE, CONTENTS, MEETDATE, ADDRSINAME,ADDRGUNAME,FN_USER_POST_STATUS(#{userId}, POSTID) AS POSTSTATUS
		FROM
		(
			SELECT J.USERID AS USERID, E.NICKNAME AS NICKNAME, PT.URL AS URL, P.TITLE AS TITLE, P.CONTENTS AS CONTENTS, P.MEETDATE AS MEETDATE, SI.ADDRSINAME AS ADDRSINAME, G.ADDRGUNAME AS ADDRGUNAME,P.POSTID AS POSTID, RANK() OVER(ORDER BY MEETDATE DESC) AS NUM
			FROM POST P 
			JOIN JOIN J
			ON P.POSTID = J.POSTID
			JOIN STATUS S
			ON J.STATUSID = S.STATUSID
			JOIN USER_ESSENTIAL E
			ON P.USERID = E.USERID
			JOIN ADDR_GU G
			ON P.ADDRGUID = G.ADDRGUID
			JOIN ADDR_SI SI
			ON G.ADDRSIID = SI.ADDRSIID
	        JOIN USER_BADGE_LOG UBL
	        ON E.BADGELOGID = UBL.BADGELOGID
	        JOIN POINT PT
	        ON UBL.BADGEPOINTID = PT.BADGEPOINTID
			WHERE J.USERID = #{userId} AND E.USERID NOT IN(#{userId})
			ORDER BY P.MEETDATE DESC
		)
		<!-- <![CDATA[ WHERE NUM>=1 AND NUM <=6 ]]> -->
	</select>
	
	<select id="hostReview" resultType="com.test.mybatis.PostDTO">
		SELECT J.USERID AS USERID,E.NICKNAME AS NICKNAME,PT.URL AS URL, RANK() OVER(ORDER BY J.USERID) AS NUM
		FROM JOIN J
		JOIN USER_ESSENTIAL E
		ON J.USERID = E.USERID
		JOIN USER_BADGE_LOG UBL
		ON E.BADGELOGID = UBL.BADGELOGID
		JOIN POINT PT
		ON UBL.BADGEPOINTID = PT.BADGEPOINTID
		WHERE J.POSTID=#{postId}
		ORDER BY NUM
	</select>
	
	<select id="guestReview" resultType="com.test.mybatis.PostDTO">
		SELECT P.USERID, UE.NICKNAME, PT.URL, 0 AS NUM
		FROM POST P JOIN USER_ESSENTIAL UE ON P.USERID=UE.USERID
		            JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
		            JOIN POINT PT ON BL.BADGEPOINTID=PT.BADGEPOINTID
		WHERE P.POSTID=#{postId}
		UNION
		SELECT J.USERID, UE.NICKNAME, PT.URL, ROW_NUMBER() OVER(ORDER BY J.USERID DESC) AS NUM
		FROM POST P JOIN JOIN J ON J.POSTID=P.POSTID
		            JOIN USER_ESSENTIAL UE ON J.USERID=UE.USERID
		            JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
		            JOIN POINT PT ON BL.BADGEPOINTID=PT.BADGEPOINTID
		WHERE P.POSTID=#{postId}
		  AND J.USERID NOT IN (#{userId})
	</select>
	
	
	
	<!-- 조현우 제작 -->
	<select id="searchPostIdList" resultType="com.test.mybatis.PostDTO">
		SELECT POSTID
		FROM POST
		WHERE USERID = #{userId}
	</select>
	
	<select id="postlistCheck" resultType="java.lang.Integer">
		SELECT FN_USER_POST_STATUS(#{userId}, #{postId}) AS POSTSTATUS
		FROM DUAL
	</select>
	
	<select id="getHost" resultType="java.lang.String">
		SELECT USERID
		FROM POST
		WHERE POSTID=#{postId}	
	</select>
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.test.mybatis.IReportDAO">  <!-- 인터페이스 지정  -->
	<select id="reportlist" resultType="com.test.mybatis.ReportDTO">
		SELECT REPORTCATEID REPORTID, REPORTCATENAME
		FROM REPORT_CATE
	</select>
	<insert id="reportpostinsert">
		INSERT INTO REPORT_POST(ID, POSTID, USERID, REPORTCATEID, REPORTDETAIL, REPORTDATE) VALUES(REPORT_POST_SEQ.NEXTVAL, #{postHostId}, #{reportDTO.userId}, #{reportDTO.reportCateName}, #{reportDTO.reportDetail}, SYSDATE)
	</insert>
	<insert id="reportjoininsert">
		INSERT INTO REPORT_JOIN(ID, JOINID, USERID, REPORTCATEID, REPORTDETAIL, REPORTDATE) VALUES(REPORT_JOIN_SEQ.NEXTVAL, #{reportId}, #{userId}, #{reportCateName}, #{reportDetail},  SYSDATE)
	</insert>
	<insert id="reportreplyinsert">
		INSERT INTO REPORT_REPLY(ID, REPLYID, USERID, REPORTCATEID, REPORTDETAIL, REPORTDATE) VALUES(REPORT_REPLY_SEQ.NEXTVAL, #{reportId}, #{userId}, #{reportCateName}, #{reportDetail}, SYSDATE)
	</insert>
	<insert id="joindelcheckinsert">
		INSERT INTO DEL_JOIN(ID, JOINID, DELETEDATE) VALUES(DEL_JOIN_SEQ.NEXTVAL, #{reportId}, SYSDATE)
	</insert>
	<insert id="postdelte">
		INSERT INTO DEL_POST(ID, POSTID, DELETEDATE) VALUES(DEL_POST_SEQ.NEXTVAL, #{reportId}, SYSDATE)
	</insert>
	<select id="serchreportjoin" resultType="int">
		SELECT COUNT(ID)
		FROM REPORT_JOIN
		WHERE JOINID = #{joinId}
	</select>
	<select id="serchreportreply" resultType="int">
		SELECT COUNT(ID)
		FROM REPORT_REPLY
		WHERE REPLYID = #{reply}
	</select>
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.test.mybatis.IReviewDAO">
	<select id="pleaseReview" resultType="java.lang.String">
		SELECT COUNT(*)
		FROM REVIEW
		WHERE POSTID=#{postId, jdbcType=VARCHAR}
		  AND GIVEUSERID=#{userId, jdbcType=VARCHAR}
	</select>

	<insert id="reviewInsertMain">
		INSERT INTO REVIEW(REVIEWID, POSTID, GIVEUSERID, TAKEUSERID, GRADE, REVIEWDATE)
		VALUES(ADD_ID('REVIEW','REVIEWID', 'RV'), #{postId}, #{giveUserId}, #{takeUserId}, #{grade}, SYSDATE)
	</insert>

	<insert id="reviewInsertSub" statementType="CALLABLE">
		{call INSERT_REVIEW_SUB(#{reviewId, jdbcType=VARCHAR}, #{badgePointId, jdbcType=VARCHAR}, #{contents, jdbcType=VARCHAR})}
	</insert>
	
	<select id="getNextReviewId" resultType="java.lang.String">
		SELECT ADD_ID('REVIEW','REVIEWID', 'RV')
		FROM DUAL
	</select>
	
	<select id="inquryView" resultType="com.test.mybatis.ReviewDTO">
		SELECT T1.TAKEUSERID as USERID, T2.GIVEUSERID, UE.NICKNAME as GIVEUSERNAME, PT.URL as GIVEUSERURL
		    , NVL(FN_GET_REVIEW_GRADE(T2.GIVEUSERID, T1.TAKEUSERID, #{postId}),3) AS GRADE
		    , NVL(FN_GET_REVIEW_SUB_URL(T2.GIVEUSERID, T1.TAKEUSERID, #{postId}),'img/Logo.png') AS TAKEURL
		    , NVL(FN_GET_REVIEW_SUB_CONTENTS(T2.GIVEUSERID, T1.TAKEUSERID, #{postId}), '해당참여자가 아직 후기를 남기지 않았습니다.') AS CONTENTS
		FROM
		(
		    SELECT USERID AS TAKEUSERID
		    FROM POST
		    WHERE POSTID=#{postId}
		    UNION
		    SELECT USERID
		    FROM JOIN
		    WHERE POSTID=#{postId}
		) T1 CROSS JOIN (
		    SELECT USERID AS GIVEUSERID
		    FROM POST
		    WHERE POSTID=#{postId}
		    UNION
		    SELECT USERID
		    FROM JOIN
		    WHERE POSTID=#{postId}
		) T2 JOIN USER_ESSENTIAL UE ON T2.GIVEUSERID=UE.USERID 
		     JOIN USER_BADGE_LOG UBL ON UE.BADGELOGID=UBL.BADGELOGID
		     JOIN POINT PT ON UBL.BADGEPOINTID=PT.BADGEPOINTID
		WHERE T1.TAKEUSERID!=T2.GIVEUSERID
		  AND T1.TAKEUSERID=#{userId}
	</select>
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.test.mybatis.IUserDAO"> 

  	<insert id = "userTelInsert">
		INSERT INTO USER_CERTIFICATION(ID, USERID, CODE, CERTIDATE, CERTIID)
		VALUES(USER_CERTIFICATION_SEQ.NEXTVAL, #{userId },  #{telCheck}, SYSDATE, 'CT00001')
 	</insert>
 	
 	<insert id = "userEmailInsert"> 	
 		INSERT INTO USER_CERTIFICATION(ID, USERID, CODE, CERTIDATE, CERTIID)
		VALUES(USER_CERTIFICATION_SEQ.NEXTVAL, #{userId },  #{emailCheck}, SYSDATE, 'CT00002')
 	</insert>
 	
 	<insert id = "userNewBadgeInsert">
 		INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID) 
		VALUES(ADD_ID('USER_BADGE_LOG', 'BADGELOGID', 'BL'), #{userId}, 'BP00011')
 	</insert>
 	
 	<select id = "userNewBadgeSelect" resultType = "java.lang.String">
 		SELECT BADGELOGID
		FROM USER_BADGE_LOG
		WHERE USERID = #{userId}
 	</select>
 	
 	<insert id = "userEssentialInsert">
 		INSERT INTO USER_ESSENTIAL(USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL, REGISTERDATE, BADGELOGID)
		VALUES(#{user.userId }, #{user.nickname }, #{user.name } , TO_DATE(#{user.birth },'YYMMDD'), #{user.genderId }, #{user.tel }, #{user.email }, SYSDATE, #{badgelogid})
 	</insert>
 	
	<select id="checkId" resultType="java.lang.Integer">
		SELECT COUNT(USERID) AS COUNT
		FROM LOGIN
		WHERE UPPER(USERID) = UPPER(#{userId })
 	</select>
 	
 	<select id="checkNick" resultType="java.lang.Integer">
 		SELECT COUNT(NICKNAME) AS COUNT
		FROM USER_ESSENTIAL
		WHERE UPPER(NICKNAME) = UPPER(#{nickname })
 	</select>
 	
 	<insert id = "userLoginInsert">
 		INSERT INTO LOGIN(USERID, PWD, ROLEID)
		VALUES(#{userId }, CRYPTPACK.ENCRYPT(#{pwd }, 'JAVA006$'), 'RL00002')
 	</insert>
 	
 	 	<insert id = "userSubInsert">
 		INSERT INTO USER_SUB(ID, USERID, SNS, INTRODUCE)
		VALUES(USER_SUB_SEQ.NEXTVAL, #{userId }, #{sns }, #{introduce })
 	</insert>
 	
 	<!-- 회원가입 -->
 	
 	<select id="findIdTelCheck" resultType="java.lang.Integer">
	 	SELECT COUNT(*) AS COUNT
		FROM USER_ESSENTIAL
		WHERE NAME = #{name} AND TEL = #{tel}
 	</select>
 	
 	<select id="findIdEmailCheck" resultType="java.lang.Integer">
 		SELECT COUNT(*) AS COUNT
		FROM USER_ESSENTIAL
		WHERE NAME = #{name} AND EMAIL = #{email}
 	</select>
 	
 	<select id="findPwTelCheck" resultType="java.lang.Integer">
 		SELECT COUNT(*) AS COUNT
		FROM USER_ESSENTIAL
		WHERE UPPER(USERID) = UPPER(#{userId}) AND NAME = #{name} AND TEL = #{tel}
 	</select>
 	
 	<select id="findPwEmailCheck" resultType="java.lang.Integer">
 		SELECT COUNT(*) AS COUNT
		FROM USER_ESSENTIAL
		WHERE UPPER(USERID) = UPPER(#{userId}) AND NAME = #{name} AND EMAIL = #{email}
 	</select>
 	
 	<select id = "findIdTel" resultType="java.lang.String">
 		SELECT USERID
 		FROM USER_ESSENTIAL
 		WHERE NAME = #{name} AND TEL = #{tel}
 	</select>
 	
 	<select id = "findIdEmail" resultType="java.lang.String">
 		SELECT USERID
 		FROM USER_ESSENTIAL
 		WHERE NAME = #{name} AND EMAIL = #{email}
 	</select>		
 	
 	<update id = "findPwTemp">
		UPDATE LOGIN
		SET PWD = CRYPTPACK.ENCRYPT(#{pwd}, 'JAVA006$')
		WHERE UPPER(USERID) = UPPER(#{userId})
		
 	</update>
 	
 	<select id="findPwdString" resultType="java.lang.String">
 		SELECT CRYPTPACK.DECRYPT(#{pwdtemp}, 'JAVA006$')
		FROM LOGIN
		WHERE UPPER(USERID) = UPPER(#{userId})
 	</select>
 	
 	<insert id="findIdTelInsert">
	 	INSERT INTO USER_CERTIFICATION(ID, USERID, CODE, CERTIDATE, CERTIID)
		VALUES(USER_CERTIFICATION_SEQ.NEXTVAL, #{userId },  #{telCheck}, SYSDATE, 'CT00003')
	 </insert>
	 
	 <insert id="findIdEmailInsert">
	 	INSERT INTO USER_CERTIFICATION(ID, USERID, CODE, CERTIDATE, CERTIID)
		VALUES(USER_CERTIFICATION_SEQ.NEXTVAL, #{userId },  #{emailCheck}, SYSDATE, 'CT00004')
	 </insert>
	 
	 <insert id="findPwTelInsert">
	 	INSERT INTO USER_CERTIFICATION(ID, USERID, CODE, CERTIDATE, CERTIID)
		VALUES(USER_CERTIFICATION_SEQ.NEXTVAL, #{userId },  #{telCheck}, SYSDATE, 'CT00005')
	 </insert>
	 
	 <insert id="findPwEmailInsert">
	 	INSERT INTO USER_CERTIFICATION(ID, USERID, CODE, CERTIDATE, CERTIID)
		VALUES(USER_CERTIFICATION_SEQ.NEXTVAL, #{userId },  #{emailCheck}, SYSDATE, 'CT00006')
	 </insert>
	 
 	<!-- 아이디/비밀번호 확인 -->
 	
 	<select id ="checkIdPw" resultType="java.lang.Integer">
	 	SELECT COUNT(*) AS COUNT
		FROM LOGIN
		WHERE USERID = #{userId} AND CRYPTPACK.DECRYPT(PWD, 'JAVA006$') = UPPER(#{pwd})
	 </select>






<!-- 내 프로필 -->

	<select id="MyPageBad" resultType="com.test.mybatis.UserDTO"> 
		SELECT USERID, FN_PROFILE_BAD_BADGE(USERID) AS URLBAD
		FROM USER_ESSENTIAL
		WHERE USERID=#{userId}
	</select> 

	<select id="myPageAddrList" resultType="com.test.mybatis.AddrDTO"> 
		SELECT *
		FROM
		(
		    SELECT USERID ,ID ,ADDRSINAME AS ADDRSINAME1 , ADDRGUNAME AS ADDRGUNAME1
		                ,LEAD(ADDRSINAME,1) OVER (ORDER BY ID) AS ADDRSINAME2,LEAD(ADDRGUNAME,1) OVER (ORDER BY ID) AS ADDRGUNAME2
		                , LEAD(ADDRSINAME,2) OVER (ORDER BY ID) AS ADDRSINAME3,LEAD(ADDRGUNAME,2) OVER (ORDER BY ID) AS ADDRGUNAME3
                        ,ADDRSIID AS ADDRSIID1 , ADDRGUID AS ADDRGUID1
		                ,LEAD(ADDRSIID,1) OVER (ORDER BY ID) AS ADDRSIID2,LEAD(ADDRGUID,1) OVER (ORDER BY ID) AS ADDRGUID2
		                , LEAD(ADDRSIID,2) OVER (ORDER BY ID) AS ADDRSIID3,LEAD(ADDRGUID,2) OVER (ORDER BY ID) AS ADDRGUID3
		    FROM USERADDR_VIEW
		    WHERE USERID= #{userId}
		)
		WHERE ID=(SELECT MIN(ID) FROM USERADDR_VIEW WHERE USERID=#{userId})
	</select> 
	
	<select id="myPageInterList" resultType="com.test.mybatis.InterDTO"> 
		SELECT *
		FROM
		(
		    SELECT USERID ,ID ,INTERSUBNAME AS INTERSUBNAME1 , INTERMAINNAME AS INTERMAINNAME1
		                ,LEAD(INTERSUBNAME,1) OVER (ORDER BY ID) AS INTERSUBNAME2,LEAD(INTERMAINNAME,1) OVER (ORDER BY ID) AS INTERMAINNAME2
		                , LEAD(INTERSUBNAME,2) OVER (ORDER BY ID) AS INTERSUBNAME3,LEAD(INTERMAINNAME,2) OVER (ORDER BY ID) AS INTERMAINNAME3
                        ,INTERMAINID AS INTERMAINID1 , INTERSUBID AS INTERSUBID1
		                ,LEAD(INTERMAINID,1) OVER (ORDER BY ID) AS INTERMAINID2,LEAD(INTERSUBID,1) OVER (ORDER BY ID) AS INTERSUBID2
		                , LEAD(INTERMAINID,2) OVER (ORDER BY ID) AS INTERMAINID3,LEAD(INTERSUBID,2) OVER (ORDER BY ID) AS INTERSUBID3
		    FROM USERINTER_VIEW
		    WHERE USERID=#{userId}
		)
		WHERE ID=(SELECT MIN(ID) FROM USERINTER_VIEW WHERE USERID=#{userId})
	</select>  	
	
	<select id="myPageList" resultType="com.test.mybatis.UserDTO"> 
	SELECT DISTINCT UE.USERID, UE.NICKNAME,UE.NAME,UE.BIRTH,G.GENDER AS GENDERID,UE.TEL,US.SNS, US.INTRODUCE
                ,UE.EMAIL,UE.BADGELOGID, BL.BADGEPOINTID ,P.BADGEPOINTNAME,P.URL, UE.REGISTERDATE
                ,NVL2((SELECT COUNT(C.CERTINAME)
                    FROM USER_CERTIFICATION U JOIN CERTIFICATION_CATE C
                    ON U.CERTIID = C.CERTIID 
                    WHERE U.USERID=  UE.USERID AND C.CERTIID = 'CT00001'),'휴대폰 인증 완료 ?','') AS TELCHECK
                 , NVL2((SELECT COUNT(C.CERTINAME)
                 FROM USER_CERTIFICATION U JOIN CERTIFICATION_CATE C
                  ON U.CERTIID = C.CERTIID
                  WHERE U.USERID= UE.USERID AND C.CERTIID = 'CT00002'),'이메일 인증 완료 ?' ,'') AS EMAILCHECK
                  ,ROUND(AVG(R.GRADE)OVER(),1) AS REVIEWGRADE 
	FROM USER_ESSENTIAL UE  JOIN USER_SUB US ON UE.USERID = US.USERID 
                        JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID	                     
                        JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID
                        JOIN REVIEW R ON UE.USERID = R.TAKEUSERID
                        JOIN GENDER G ON G.GENDERID = UE.GENDERID                      
	WHERE UPPER(UE.USERID)=UPPER(#{userId})
	</select>
	
	
	<select id="userList" resultType="com.test.mybatis.UserDTO">
		SELECT USERID, NICKNAME, NAME, BIRTH, GENDERID, TEL, EMAIL
		FROM USER_ESSENTIAL
		WHERE UPPER(USERID) = UPPER(#{userId})
	</select>
	
	
	<!-- 프로필 변경 사용 -->
	
	
	<select id="checkGuPwd" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM LOGIN
		WHERE UPPER(USERID) = UPPER(#{userId}) AND PWD = CRYPTPACK.ENCRYPT(#{pwd}, 'JAVA006$')
	</select>
	
	<select id="checkGuNick" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM USER_ESSENTIAL
		WHERE UPPER(USERID) = UPPER(#{userId}) AND NICKNAME = UPPER(#{gunick})
	</select>
	
	<update id = "updateLogin">
		UPDATE LOGIN
		SET PWD = CRYPTPACK.ENCRYPT(#{user.pwd}, 'JAVA006$')
		WHERE UPPER(USERID) = UPPER(#{userId})
	</update>
	
	<update id="updateEssential">
		UPDATE USER_ESSENTIAL
		SET NAME = #{user.name}, NICKNAME = #{user.nickname}, TEL = #{user.tel}, GENDERID = #{user.genderId}, EMAIL = #{user.email}, BIRTH = TO_DATE('20010928','YYMMDD')
		WHERE UPPER(USERID) = UPPER(#{userId})
	</update>
	
	<update id="updateSub">
		UPDATE USER_SUB
		SET SNS = '${user.sns}', INTRODUCE = #{user.introduce}
		WHERE UPPER(USERID) = UPPER(#{userId})
	</update>
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 출처 : http://www.mybatis.org/mybatis-3/ko/getting-started.html -->

<!-- mapper 엘리먼트의 『namespace="패키지경로가 포함된 인터페이스"』 -->
<!-- 인터페이스 내부에 메소드명 선언이 되어 있어야 한다.  -->
<!-- 메소드명과 『id=식별자』가 되어야 한다.  -->
<mapper namespace="com.test.mybatis.IWithdrawalDAO">

	<!-- ○ id="식별자" 속성 추가 -->
	<!-- - 인터페이스에 선언된 메소드의 이름과 일치해야 하며, -->
	<!-- 호출 메소드명 역할을 수행하게 된다. -->
	<!-- ○ resuyltType="패키지 경로가 포함된 자료형 클래스" -->
	<!-- - string : java.lang.String
		 - byte : java.lang.byte
		 - short : java.lang.short
		 - int : java.lang.int
		 - integer : java.lang.integer
		 - double : java.lang.double
		 - float : java.lang.float
		 - boolean : java.lang.boolean
		 - decimal : java.math.BigDecimal
		 - object : java.lang.Object
		 - map :  java.util.Map
		 - hashmap :  java.util.HashMap
		 - list :  java.util.list
		 - arraylist : java.util.ArrayList
		 - collection  : java.util.Collection
		 - iterator : java.util.Iterator
		-->

 	<select id="nickname" resultType="com.test.mybatis.WithdrawalDTO">	
		SELECT NICKNAME
		FROM USER_ESSENTIAL
		WHERE UPPER(USERID) =UPPER(#{userid })
	</select>
	
	<select id="idpwcheck" resultType="int">
		SELECT COUNT(*) AS IDPWCHECK
		FROM LOGIN
		WHERE PWD = CRYPTPACK.ENCRYPT(#{pwd} ,#{pwd})
        AND UPPER(USERID)=UPPER(#{userid})
	</select>
	
	<!--del_user  -->
	
	<insert id="del_user">
		INSERT INTO DEL_USER(ID,USERID,DELETEDATE)
		VALUES(DEL_USER_SEQ.NEXTVAL,#{userid},SYSDATE)
	</insert>
	

	

</mapper>














