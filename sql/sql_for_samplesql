----------------------------------------------PROCEDURE PRC_USER_BADGE_LOG_SAMPLE-----------------------------------------------
----------------------------------------------PROCEDURE PRC_USER_BADGE_LOG_SAMPLE-----------------------------------------------
----------------------------------------------PROCEDURE PRC_USER_BADGE_LOG_SAMPLE-----------------------------------------------

-- 유저들의 활동뱃지를 채워주는 샘플 프로시저
-- 이 프로시저는 REVIEW 테이블에 TAKEUSERID - POSTID 를 하나로 보고 갯수를 세기 때문에
-- POST테이블과 REVIEW 테이블이 차 있어야 함
-- 샘플 데이터 생성을 위한 프로시저며, 실제 시스템에선 적용하면 안됨(안에 있는 쿼리문은 재사용 가능)
CREATE OR REPLACE PROCEDURE PRC_USER_BADGE_LOG_SAMPLE
IS
    CURSOR CUR_USER
    IS     
    SELECT USERID
    FROM   USER_ESSENTIAL;
    
    V_USERID        USER_ESSENTIAL.USERID%TYPE;
    V_COUNT         NUMBER;
    V_GETREVIEWID   REVIEW.REVIEWID%TYPE;
BEGIN
    OPEN CUR_USER;
    LOOP
        FETCH CUR_USER INTO V_USERID;
        EXIT WHEN CUR_USER%NOTFOUND; -- EXIT 위치가 중요함. 맨 아래 있으면 마지막 하나를 반복함
        
        DBMS_OUTPUT.PUT_LINE(V_USERID);
        
        SELECT COUNT(*) INTO V_COUNT
        FROM
        (
            SELECT POSTID,TAKEUSERID
            FROM REVIEW
            GROUP BY POSTID, TAKEUSERID
            ORDER BY POSTID
        )
        WHERE TAKEUSERID=V_USERID;

        DBMS_OUTPUT.PUT_LINE(V_COUNT);
        
        -- 전부 뉴비는 부여
        DBMS_OUTPUT.PUT_LINE('뉴비 뱃지 부여!');
        INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID, GETREVIEWID, EXPIRATIONREVIEWID)
        VALUES(ADD_ID('USER_BADGE_LOG','BADGELOGID', 'BL'), V_USERID, 'BP00011', null, null);        
                
        -- 15회 넘으면 일반참석러 부여
        IF V_COUNT>=15
            THEN DBMS_OUTPUT.PUT_LINE('일반참석러 뱃지 부여!');
                 SELECT POSTID INTO V_GETREVIEWID
                 FROM
                 (
                     SELECT POSTID,TAKEUSERID, RANK() OVER(PARTITION BY TAKEUSERID ORDER BY POSTID) AS NUM
                     FROM REVIEW
                     GROUP BY POSTID, TAKEUSERID
                     ORDER BY POSTID
                 )
                 WHERE TAKEUSERID=V_USERID
                   AND NUM=15;
                 DBMS_OUTPUT.PUT_LINE(V_GETREVIEWID);
                 INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID, GETREVIEWID, EXPIRATIONREVIEWID)
                 VALUES(ADD_ID('USER_BADGE_LOG','BADGELOGID', 'BL'), V_USERID, 'BP00012', V_GETREVIEWID, null);
        END IF;
                
        -- 30회 넘으면 우수참석러 부여
        IF V_COUNT>=30
            THEN DBMS_OUTPUT.PUT_LINE('우수참석러 뱃지 부여!');
                 SELECT POSTID INTO V_GETREVIEWID
                 FROM
                 (
                     SELECT POSTID,TAKEUSERID, RANK() OVER(PARTITION BY TAKEUSERID ORDER BY POSTID) AS NUM
                     FROM REVIEW
                     GROUP BY POSTID, TAKEUSERID
                     ORDER BY POSTID
                 )
                 WHERE TAKEUSERID=V_USERID
                   AND NUM=30;
                 DBMS_OUTPUT.PUT_LINE(V_GETREVIEWID);      
                 INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID, GETREVIEWID, EXPIRATIONREVIEWID)
                 VALUES(ADD_ID('USER_BADGE_LOG','BADGELOGID', 'BL'), V_USERID, 'BP00013', V_GETREVIEWID, null);                 
        END IF;
        
        -- 50회 넘으면 프로참석러 부여
        IF V_COUNT>=50
            THEN DBMS_OUTPUT.PUT_LINE('프로참석러 뱃지 부여!');
                 SELECT POSTID INTO V_GETREVIEWID
                 FROM
                 (
                     SELECT POSTID,TAKEUSERID, RANK() OVER(PARTITION BY TAKEUSERID ORDER BY POSTID) AS NUM
                     FROM REVIEW
                     GROUP BY POSTID, TAKEUSERID
                     ORDER BY POSTID
                 )
                 WHERE TAKEUSERID=V_USERID
                   AND NUM=50;
                 DBMS_OUTPUT.PUT_LINE(V_GETREVIEWID);
                 INSERT INTO USER_BADGE_LOG(BADGELOGID, USERID, BADGEPOINTID, GETREVIEWID, EXPIRATIONREVIEWID)
                 VALUES(ADD_ID('USER_BADGE_LOG','BADGELOGID', 'BL'), V_USERID, 'BP00014', V_GETREVIEWID, null);                 
        END IF;
    END LOOP;
    CLOSE CUR_USER;
END;

EXEC PRC_USER_BADGE_LOG_SAMPLE;


---------------------------------------------PROCEDURE PRC_UPDATE_USER_BADGE_SAMPLE---------------------------------------------
---------------------------------------------PROCEDURE PRC_UPDATE_USER_BADGE_SAMPLE---------------------------------------------
---------------------------------------------PROCEDURE PRC_UPDATE_USER_BADGE_SAMPLE---------------------------------------------
-- 유저들의 대표 뱃지를 랜덤하게 채워주는 프로시저
-- 우선 뱃지가 활동뱃지면 만료기간을 따지지 않고
-- 활동 뱃지가 아니면 만료기간을 따짐.
-- 즉, 어느 유저의 활동 뱃지와 만료 이전의 일반 뱃지의 리스트를 뽑아줌
SELECT MAX(BL.BADGELOGID) AS BADGELOGID, BL.BADGEPOINTID
FROM USER_BADGE_LOG BL LEFT JOIN REVIEW RV ON BL.EXPIRATIONREVIEWID=RV.REVIEWID
                       JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID
                       JOIN POINT_CATE PC ON P.BADGEPOINTCATEID=PC.BADGEPOINTCATEID
WHERE BL.USERID = 'arthisef'
  AND (ADD_MONTHS(RV.REVIEWDATE,12) >= SYSDATE OR PC.BADGEPOINTCATEID='BC00004')
GROUP BY BL.BADGEPOINTID;

-- 리스트중 랜덤하게 하나 뽑기
SELECT BADGELOGID
FROM 
(
SELECT MAX(BL.BADGELOGID) AS BADGELOGID, BL.BADGEPOINTID
FROM USER_BADGE_LOG BL LEFT JOIN REVIEW RV ON BL.EXPIRATIONREVIEWID=RV.REVIEWID
                       JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID
                       JOIN POINT_CATE PC ON P.BADGEPOINTCATEID=PC.BADGEPOINTCATEID
WHERE BL.USERID = 'arthisef'
  AND (ADD_MONTHS(RV.REVIEWDATE,12) >= SYSDATE OR PC.BADGEPOINTCATEID='BC00004')
GROUP BY BL.BADGEPOINTID
ORDER BY DBMS_RANDOM.VALUE
)
WHERE ROWNUM=1;

-- 진짜 프로시저
CREATE OR REPLACE PROCEDURE PRC_UPDATE_USER_BADGE_SAMPLE
IS
    CURSOR CUR_USERID
    IS
    SELECT USERID
    FROM USER_ESSENTIAL;
    
    V_USERID        USER_ESSENTIAL.USERID%TYPE;
    V_BADGELOGID    USER_BADGE_LOG.BADGELOGID%TYPE;
BEGIN
    OPEN CUR_USERID;
    LOOP
        FETCH CUR_USERID INTO V_USERID;
        EXIT WHEN CUR_USERID%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_USERID);
        
        SELECT BADGELOGID INTO V_BADGELOGID
        FROM 
        (
            SELECT MAX(BL.BADGELOGID) AS BADGELOGID, BL.BADGEPOINTID
            FROM USER_BADGE_LOG BL LEFT JOIN REVIEW RV ON BL.EXPIRATIONREVIEWID=RV.REVIEWID
                                   JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID
                                   JOIN POINT_CATE PC ON P.BADGEPOINTCATEID=PC.BADGEPOINTCATEID
            WHERE BL.USERID = V_USERID
              AND (ADD_MONTHS(RV.REVIEWDATE,12) >= SYSDATE OR PC.BADGEPOINTCATEID='BC00004')
            GROUP BY BL.BADGEPOINTID
            ORDER BY DBMS_RANDOM.VALUE
        )
        WHERE ROWNUM=1;        
        DBMS_OUTPUT.PUT_LINE(V_BADGELOGID);
        
        UPDATE USER_ESSENTIAL
        SET BADGELOGID=V_BADGELOGID
        WHERE USERID=V_USERID;

    END LOOP;
    CLOSE CUR_USERID;
END;

EXEC PRC_UPDATE_USER_BADGE_SAMPLE;