create or replace FUNCTION ADD_ID
( TABLE_NAME        IN VARCHAR2
, ID_COLUMN IN VARCHAR2
, ID_SUFFIX IN VARCHAR2
)
RETURN VARCHAR2
IS
    V_RESULT    VARCHAR2(10);
    V_SQL       VARCHAR2(1000);
    V_SUFFIX    VARCHAR2(10);
BEGIN
    V_SUFFIX := ID_SUFFIX;
    V_SQL := 'SELECT ''' || V_SUFFIX || ''' || LPAD( TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR('|| ID_COLUMN ||', 3))), 0) + 1), 5, ''0'') FROM ' || TABLE_NAME ;

    EXECUTE IMMEDIATE V_SQL INTO V_RESULT;

    RETURN V_RESULT;
END;


create or replace FUNCTION FN_CAL_RANK(V_POSTID VARCHAR2, V_USERID VARCHAR2, V_KEYWORD VARCHAR2)
RETURN NUMBER
IS
    V_ADDRGUID          ADDR_GU.ADDRGUID%TYPE;          -- 개설모임의 만남 장소(구)
    V_HOSTID            USER_ESSENTIAL.USERID%TYPE;     -- 개설자
    V_TITLE             POST.TITLE%TYPE;                -- 모임 제목
    V_INTERDETAIL       POST.INTERDETAIL%TYPE;          -- 모임 관심사 상세
    V_CONTENTS          POST.CONTENTS%TYPE;             -- 모임 본문
    V_GRADE_USER        NUMBER;
    V_GRADE_ADDR        NUMBER;
    V_GRADE_TITLE       NUMBER;
    V_GRADE_INTER       NUMBER;
    V_GRADE_CONTENTS    NUMBER;
BEGIN    
    -- 개설자 평점
    SELECT USERID INTO V_HOSTID
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_USER:=FN_USER_GRADE(V_HOSTID);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_USER);
    -- 지역 매치
    SELECT ADDRGUID INTO V_ADDRGUID
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_ADDR:=FN_SEARCH_ADDR(V_USERID, V_ADDRGUID);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_ADDR);
    -- 키워드-제목 매치
    SELECT TITLE INTO V_TITLE
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_TITLE:=FN_SEARCH_KEYWORD(V_KEYWORD, V_TITLE, 25);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_TITLE);
    -- 키워드-관심사 상세기입 매치
    SELECT INTERDETAIL INTO V_INTERDETAIL
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_INTER:=FN_SEARCH_KEYWORD(V_KEYWORD, V_INTERDETAIL, 15); 
    DBMS_OUTPUT.PUT_LINE(V_GRADE_INTER);
    -- 키워드-본문 매치
    SELECT CONTENTS INTO V_CONTENTS
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_CONTENTS:=FN_SEARCH_KEYWORD(V_KEYWORD, V_CONTENTS, 10);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_CONTENTS);

    RETURN (V_GRADE_USER+V_GRADE_ADDR+V_GRADE_TITLE+V_GRADE_INTER+V_GRADE_CONTENTS);
END;


create or replace FUNCTION FN_CAL_RANK_GUEST(V_POSTID VARCHAR2, V_GUESTADDRGUID VARCHAR2, V_KEYWORD VARCHAR2)
RETURN NUMBER
IS
    V_ADDRGUID          ADDR_GU.ADDRGUID%TYPE;          -- 개설모임의 만남 장소(구)
    V_HOSTID            USER_ESSENTIAL.USERID%TYPE;     -- 개설자
    V_TITLE             POST.TITLE%TYPE;                -- 모임 제목
    V_INTERDETAIL       POST.INTERDETAIL%TYPE;          -- 모임 관심사 상세
    V_CONTENTS          POST.CONTENTS%TYPE;             -- 모임 본문
    V_GRADE_USER        NUMBER;
    V_GRADE_ADDR        NUMBER;
    V_GRADE_TITLE       NUMBER;
    V_GRADE_INTER       NUMBER;
    V_GRADE_CONTENTS    NUMBER;
BEGIN    
    -- 개설자 평점
    SELECT USERID INTO V_HOSTID
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_USER:=FN_USER_GRADE(V_HOSTID);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_USER);

    -- 지역 매치
    SELECT ADDRGUID INTO V_ADDRGUID
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_ADDR:=FN_SEARCH_ADDR_GUEST(V_GUESTADDRGUID, V_ADDRGUID);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_ADDR);

    -- 키워드-제목 매치
    SELECT TITLE INTO V_TITLE
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_TITLE:=FN_SEARCH_KEYWORD(V_KEYWORD, V_TITLE, 25);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_TITLE);
    -- 키워드-관심사 상세기입 매치
    SELECT INTERDETAIL INTO V_INTERDETAIL
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_INTER:=FN_SEARCH_KEYWORD(V_KEYWORD, V_INTERDETAIL, 15); 
    DBMS_OUTPUT.PUT_LINE(V_GRADE_INTER);
    -- 키워드-본문 매치
    SELECT CONTENTS INTO V_CONTENTS
    FROM POST
    WHERE POSTID=V_POSTID;

    V_GRADE_CONTENTS:=FN_SEARCH_KEYWORD(V_KEYWORD, V_CONTENTS, 10);
    DBMS_OUTPUT.PUT_LINE(V_GRADE_CONTENTS);

    RETURN (V_GRADE_USER + V_GRADE_ADDR + V_GRADE_TITLE + V_GRADE_INTER + V_GRADE_CONTENTS);
END;


create or replace FUNCTION FN_GET_REVIEW_GRADE(V_GIVEUSERID VARCHAR, V_TAKEUSERID VARCHAR, V_POSTID VARCHAR)
RETURN VARCHAR2
IS
    V_GRADE NUMBER;
BEGIN
    SELECT MAX(GRADE) INTO V_GRADE
    FROM REVIEW 
    WHERE GIVEUSERID=V_GIVEUSERID 
      AND TAKEUSERID=V_TAKEUSERID
      AND POSTID=V_POSTID;

    RETURN V_GRADE;
END;


create or replace FUNCTION FN_GET_REVIEW_SUB_CONTENTS(V_GIVEUSERID VARCHAR, V_TAKEUSERID VARCHAR, V_POSTID VARCHAR)
RETURN VARCHAR2
IS
    V_GRADE         NUMBER;
    V_REVIEWID      REVIEW.REVIEWID%TYPE;
    V_CONTENTS      REVIEW_SUB.CONTENTS%TYPE;
BEGIN
    SELECT MAX(REVIEWID) INTO V_REVIEWID
    FROM REVIEW 
    WHERE GIVEUSERID=V_GIVEUSERID 
      AND TAKEUSERID=V_TAKEUSERID
      AND POSTID=V_POSTID;

    SELECT CONTENTS  INTO V_CONTENTS
    FROM REVIEW_SUB RS JOIN POINT PT ON RS.BADGEPOINTID=PT.BADGEPOINTID
    WHERE REVIEWID=V_REVIEWID;

    RETURN V_CONTENTS;
END;


create or replace FUNCTION FN_GET_REVIEW_SUB_URL(V_GIVEUSERID VARCHAR, V_TAKEUSERID VARCHAR, V_POSTID VARCHAR)
RETURN VARCHAR2
IS
    V_GRADE NUMBER;
    V_REVIEWID  REVIEW.REVIEWID%TYPE;
    V_URL       POINT.URL%TYPE;
BEGIN
    SELECT MAX(REVIEWID) INTO V_REVIEWID
    FROM REVIEW 
    WHERE GIVEUSERID=V_GIVEUSERID 
      AND TAKEUSERID=V_TAKEUSERID
      AND POSTID=V_POSTID;

    SELECT URL  INTO V_URL
    FROM REVIEW_SUB RS JOIN POINT PT ON RS.BADGEPOINTID=PT.BADGEPOINTID
    WHERE REVIEWID=V_REVIEWID;

    RETURN V_URL;
END;



create or replace FUNCTION FN_IN_REVIEW(V_USERID VARCHAR2, V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_NUM   NUMBER;
BEGIN
    -- 어느 게시글에, 입력받은 유저가 남긴 후기가 있는지
    SELECT COUNT(*) INTO V_NUM
    FROM REVIEW
    WHERE POSTID=V_POSTID
      AND GIVEUSERID=V_USERID;

    -- 존재하면 1리턴
    IF V_NUM > 0
        THEN RETURN 1;
    END IF;

    -- 아니면 0리턴
    RETURN 0;
END;


create or replace FUNCTION FN_IS_HOST(V_USERID VARCHAR2, V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_USERID2   USER_ESSENTIAL.USERID%TYPE;
BEGIN
    -- 입력받은 게시글의 개설자ID를 뽑아옴
    SELECT USERID INTO V_USERID2
    FROM POST
    WHERE POSTID=V_POSTID;

    -- 입력받은 유저ID와 같으면1 리턴
    IF V_USERID=V_USERID2
        THEN RETURN 1;
    END IF;

    -- 아니면 0리턴
    RETURN 0;
END;



create or replace FUNCTION FN_OVER_SYSDATE(V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_MEETDATE   POST.MEETDATE%TYPE;
BEGIN
    -- 입력받은 게시글의 만남일을 뽑아옴
    SELECT MEETDATE INTO V_MEETDATE
    FROM POST
    WHERE POSTID=V_POSTID;

    -- 만남일 < 현재일이면 1 리턴
    IF V_MEETDATE <= SYSDATE
        THEN RETURN 1;
    END IF;

    -- 아니면 0리턴
    RETURN 0;
END;


create or replace FUNCTION FN_POST_IS_ACCEPTED(V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_NUM   NUMBER;
BEGIN
    -- 게시글의 참자 신청 댓글 상태에서 ST00003의 갯수를 뽑아봄
    SELECT COUNT(*) INTO V_NUM
    FROM POST P JOIN JOIN J ON P.POSTID=J.POSTID
    WHERE P.POSTID=V_POSTID
      AND J.STATUSID='ST00003';

    -- ST00003이 0초과라면 즉, 존재한다면 1리턴
    IF V_NUM > 0
        THEN RETURN 1;
    END IF;

    -- 아니면 0리턴
    RETURN 0;
END;


create or replace FUNCTION FN_PROFILE_BAD_BADGE(V_USERID VARCHAR2)
RETURN VARCHAR2
IS
    V_URLBAD    POINT.URL%TYPE;
BEGIN
    SELECT max(URL) INTO V_URLBAD
    FROM
    (
        SELECT USERID, URL
        FROM USER_BADGE_VIEW
        WHERE BADGEPOINTCATEID='BC00002'
        ORDER BY DBMS_RANDOM.VALUE
    )
    WHERE USERID=V_USERID
      AND ROWNUM=1;

    RETURN V_URLBAD;
END;


create or replace FUNCTION FN_SEARCH_ADDR(V_USERID VARCHAR2, V_ADDRGUID VARCHAR2)
RETURN NUMBER
IS 
    V_ADDR      NUMBER;
    V_NEAR_ADDR NUMBER;
BEGIN
    -- 입력받은 ADDRGUID가 유저의 등록 ADDRGUID에 있나 찾아봄
    SELECT COUNT(*) INTO V_ADDR
    FROM USER_ADDR
    WHERE USERID=V_USERID
      AND ADDRGUID=V_ADDRGUID;

    -- 입력받은 ADDRGUID가 유저의 등록 ADDRGUID의 인접 ADDRGUIID에 있나 찾아봄
    SELECT COUNT(*) INTO V_NEAR_ADDR
    FROM USER_ADDR UA JOIN 
    (
        SELECT ADDRGUID, NEAR_ADDRGUID
        FROM
        (
            SELECT *
            FROM MATTRIX_ADDR_GU

        )
        UNPIVOT( NEAR FOR NEAR_ADDRGUID IN(GU00001,GU00002,GU00003,GU00004,GU00005,GU00006,GU00007,GU00008,GU00009,GU00010,GU00011,GU00012,GU00013,GU00014,GU00015,GU00016,GU00017,GU00018,GU00019,GU00020,GU00021,GU00022,GU00023,GU00024,GU00025) )
        WHERE NEAR=1
    ) M ON UA.ADDRGUID=M.ADDRGUID
    WHERE USERID=V_USERID
      AND NEAR_ADDRGUID=V_ADDRGUID;

    IF V_ADDR>0
        THEN RETURN 40;
    ELSIF V_NEAR_ADDR>0
        THEN RETURN 25;
    ELSE
        RETURN 0;
    END IF;
END;


create or replace FUNCTION FN_SEARCH_ADDR_GUEST(V_GUESTADDRGUID VARCHAR2, V_ADDRGUID VARCHAR2)
RETURN NUMBER
IS
    V_ADDR      NUMBER;
    V_NEAR_ADDR NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_NEAR_ADDR -- 결과가 있으면 25점
    FROM
    (
        SELECT *
        FROM MATTRIX_ADDR_GU
    )
    UNPIVOT( NEAR FOR NEAR_ADDRGUID IN(GU00001,GU00002,GU00003,GU00004,GU00005,GU00006,GU00007,GU00008,GU00009,GU00010,GU00011,GU00012,GU00013,GU00014,GU00015,GU00016,GU00017,GU00018,GU00019,GU00020,GU00021,GU00022,GU00023,GU00024,GU00025) )
    WHERE NEAR=1
      AND ADDRGUID=V_ADDRGUID       -- 게시글 만남장소
      AND NEAR_ADDRGUID=V_GUESTADDRGUID; -- 유저입력 만남장소

    IF (V_GUESTADDRGUID=V_ADDRGUID)
        THEN RETURN 40;
    ELSIF V_NEAR_ADDR >0
        THEN RETURN 25;
    ELSE
        RETURN 0;
    END IF;
END;


create or replace FUNCTION FN_SEARCH_KEYWORD(V_KEYWORD VARCHAR2, V_TEXT VARCHAR2, V_ALLOT_GRADE NUMBER)
RETURN NUMBER
IS
    V_ALLNUM     NUMBER;
    V_FOUNDNUM   NUMBER;
BEGIN
    V_ALLNUM := LENGTH(V_KEYWORD)-LENGTH(REPLACE(V_KEYWORD,'|'))-1;

    SELECT COUNT(*) INTO V_FOUNDNUM
    FROM
    (
        SELECT SUBSTR(KEYWORD, INSTR(KEYWORD, '|', 1, LEVEL)+1, INSTR(KEYWORD, '|', 1, LEVEL+1)-INSTR(KEYWORD, '|', 1, LEVEL)-1) AS KEYWORD
             , INSTR(V_TEXT , SUBSTR(KEYWORD, INSTR(KEYWORD, '|', 1, LEVEL)+1, INSTR(KEYWORD, '|', 1, LEVEL+1)-INSTR(KEYWORD, '|', 1, LEVEL)-1)) AS FOUND
        FROM
        (
            SELECT V_KEYWORD AS KEYWORD
            FROM DUAL
        )
        CONNECT BY LEVEL <= LENGTH(KEYWORD)-LENGTH(REPLACE(KEYWORD,'|'))-1
    )
    WHERE FOUND>0;

    RETURN (NVL(V_FOUNDNUM,0)/NVL(V_ALLNUM,1))*V_ALLOT_GRADE;
END;


create or replace FUNCTION FN_USER_GRADE(V_USERID VARCHAR2)
RETURN NUMBER
IS
    V_NUM   NUMBER;
BEGIN
    SELECT ROUND(AVG(GRADE),1) INTO V_NUM
    FROM REVIEW
    WHERE TAKEUSERID='chrigh'
    GROUP BY TAKEUSERID;

    RETURN NVL(V_NUM,0);
END;




create or replace FUNCTION FN_USER_IS_ACCEPTED(V_USERID VARCHAR2, V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_NUM   NUMBER;
BEGIN
    -- 어느 게시글에, 어느 유저의 상태에서 'ST00003'의 갯수를 세어봄
    SELECT COUNT(*) INTO V_NUM
    FROM POST P JOIN JOIN J ON P.POSTID=J.POSTID
    WHERE P.POSTID=V_POSTID
      AND J.USERID=V_USERID
      AND J.STATUSID='ST00003';

    -- 존재하면 1리턴
    IF V_NUM > 0
        THEN RETURN 1;
    END IF;

    -- 아니면 0리턴
    RETURN 0;
END;



create or replace FUNCTION FN_USER_POST_STATUS(V_USERID VARCHAR2, V_POSTID VARCHAR2)
RETURN NUMBER
IS
    V_USER_POST_STATUS  NUMBER;
BEGIN
    -- FN_IS_HOST(V_USERID, V_POSTID)=1     개설자인가
    -- FN_OVER_SYSDATE(V_POSTID)=1          만남일이 지났는가
    -- FN_POST_IS_ACCEPTED(V_POSTID)=1      만남확정된 모임인가(참가자중 ST00003이 있는가)
    -- FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=1                조회한 유저는 만남 확정인가
    -- FN_IN_REVIEW(V_USERID, V_POSTID)=1   후기를 남겼는가

    -- OUTPUT : 1(모집중), 2(만남확정), 3(만남실패), 4(후기남기기), 5(후기조회)

    -- 개설자이면서 만남일 지남
    IF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=1 )
        THEN V_USER_POST_STATUS:=5;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=4;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_POST_IS_ACCEPTED(V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=3;
    -- 개설자이면서 만남일 안지남
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=1 )
        THEN V_USER_POST_STATUS:=5;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=4;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=1 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=1;
    -- 참가자이면서 만남일 지남  
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=1 )
        THEN V_USER_POST_STATUS:=5;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=4;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=3;
    -- 참가자이면서 만남일 안지남
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=1 )
        THEN V_USER_POST_STATUS:=5;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=1 AND FN_IN_REVIEW(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=4;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=1 AND FN_USER_IS_ACCEPTED(V_USERID, V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=3;
    ELSIF ( FN_IS_HOST(V_USERID, V_POSTID)=0 AND FN_OVER_SYSDATE(V_POSTID)=0 AND FN_POST_IS_ACCEPTED(V_POSTID)=0 )
        THEN V_USER_POST_STATUS:=1;
    END IF;         

    RETURN V_USER_POST_STATUS;
END;

