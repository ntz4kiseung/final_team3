<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.test.mybatis.IPostDAO">  <!-- 인터페이스 지정  -->
	<select id="postlist" resultType="com.test.mybatis.PostDTO" parameterType="String">
		SELECT POSTID, USERID, NICKNAME, TITLE, CONTENTS, GRADE, TELCERTIID, EMAILCERTIID, URL, BADURL, ADDRSIID, ADDRSINAME, ADDRSINAME, ADDRGUID, ADDRGUNAME, ADDRDETAIL, INTERMAINID, INTERMAINNAME, INTERSUBID, INTERSUBNAME, INTERDETAIL, MINNUM, MAXNUM, POSTDATE, MEETDATE, SAMEGENDER, DRINK, LIMITGRADE, MOOD MOODNAME
     	, NVL((SELECT ID FROM FOLLOW WHERE GIVEUSERID= #{followIds} AND TAKEUSERID=PV.USERID), 0) AS FOLLOWID
		FROM POST_VIEW2 PV
		WHERE POSTID = #{postHostId}
	</select>
	
	<select id="searchList" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		SELECT FN_CAL_RANK(POSTID, #{userId}, #{keyword}) AS GRADETOTAL
			 , FN_USER_GRADE(USERID) AS GRADEHOST
			 , FN_SEARCH_ADDR(#{userId}, ADDRGUID) AS GRADEADDR
			 , FN_SEARCH_KEYWORD(#{keyword}, TITLE, 25) AS GRADETITLE
			 , FN_SEARCH_KEYWORD(#{keyword}, INTERDETAIL, 15) AS GRADEINTERDETAIL
			 , FN_SEARCH_KEYWORD(#{keyword}, CONTENTS, 10) AS GRADECONTENTS
		     , RANK() OVER(ORDER BY FN_CAL_RANK(POSTID, #{userId}, #{keyword}) DESC, MEETDATE DESC) AS POSTNUM
		     , POSTID, USERID, NICKNAME, URL, URLBAD
		     , TITLE, MINNUM, MAXNUM, CONTENTS
		     , ADDRSINAME, ADDRGUNAME, TO_CHAR(MEETDATE, 'YYYY/MM/DD HH24:MI') AS MEETDATE
		FROM POST_VIEW
		WHERE MEETDATE >= SYSDATE
		  AND (ADDRGUID LIKE '%'||#{addrGuId1} OR ADDRGUID IN (#{addrGuId2} ,#{addrGuId3}))
		  AND (INTERSUBID LIKE '%'||#{interSubId1} OR INTERSUBID IN (#{interSubId2} ,#{interSubId3}))
		  AND (#{minNum}<=MINNUM AND MAXNUM<=#{maxNum})
		  AND (TO_DATE(#{minMeetDate}, 'YYYY-MM-DD')<=MEETDATE AND MEETDATE<=TO_DATE(#{maxMeetDate}, 'YYYY-MM-DD'))
		  AND MOOD LIKE '%'||#{moodId}||'%'
		  AND LIMITGRADE>=#{limitGrade}
		  AND DRINK LIKE '%'||#{drinkId}||'%'
		  AND SAMEGENDER LIKE '%'||#{sameGenderId}||'%'
		)
		WHERE (6*#{pageNum}-5) <= POSTNUM AND POSTNUM < (6*#{pageNum}+1)
	]]>
	</select>
	
	<select id="searchListGuest" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		SELECT FN_CAL_RANK_GUEST(POSTID, #{guestAddrGuId, jdbcType=VARCHAR}, #{keyword}) AS POSTSTATUS 
		     , RANK() OVER(ORDER BY FN_CAL_RANK_GUEST(POSTID, #{guestAddrGuId}, #{keyword}) DESC, MEETDATE DESC) AS POSTNUM
		     , POSTID, USERID, NICKNAME, URL, URLBAD
		     , TITLE, MINNUM, MAXNUM, CONTENTS
		     , ADDRSINAME, ADDRGUNAME, TO_CHAR(MEETDATE, 'YYYY/MM/DD HH24:MI') AS MEETDATE
		FROM POST_VIEW
		WHERE MEETDATE >= SYSDATE
		  AND (ADDRGUID LIKE '%'||#{addrGuId1} OR ADDRGUID IN (#{addrGuId2} ,#{addrGuId3}))
		  AND (INTERSUBID LIKE '%'||#{interSubId1} OR INTERSUBID IN (#{interSubId2} ,#{interSubId3}))
		  AND (#{minNum}<=MINNUM AND MAXNUM<=#{maxNum})
		  AND (TO_DATE(#{minMeetDate}, 'YYYY-MM-DD')<=MEETDATE AND MEETDATE<=TO_DATE(#{maxMeetDate}, 'YYYY-MM-DD'))
		  AND MOOD LIKE '%'||#{moodId}||'%'
		  AND LIMITGRADE>=#{limitGrade}
		  AND DRINK LIKE '%'||#{drinkId}||'%'
		  AND SAMEGENDER LIKE '%'||#{sameGenderId}||'%'
		)
		WHERE (6*#{pageNum}-5) <= POSTNUM AND POSTNUM < (6*#{pageNum}+1)
	]]>
	</select>
	
	<select id="searchCateList" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		SELECT FN_CAL_RANK(POSTID, #{userId}, #{keyword}) AS GRADETOTAL
			 , FN_USER_GRADE(USERID) AS GRADEHOST
			 , FN_SEARCH_ADDR(#{userId}, ADDRGUID) AS GRADEADDR
			 , FN_SEARCH_KEYWORD(#{keyword}, TITLE, 25) AS GRADETITLE
			 , FN_SEARCH_KEYWORD(#{keyword}, INTERDETAIL, 15) AS GRADEINTERDETAIL
			 , FN_SEARCH_KEYWORD(#{keyword}, CONTENTS, 10) AS GRADECONTENTS 
		     , RANK() OVER(ORDER BY FN_CAL_RANK(POSTID, #{userId}, #{keyword}) DESC, MEETDATE DESC) AS POSTNUM
		     , POSTID, USERID, NICKNAME, URL, URLBAD
		     , TITLE, MINNUM, MAXNUM, CONTENTS
		     , ADDRSINAME, ADDRGUNAME, TO_CHAR(MEETDATE, 'YYYY/MM/DD HH24:MI') AS MEETDATE
		FROM POST_VIEW
		WHERE MEETDATE >= SYSDATE
		  AND INTERMAINID=#{userInterMainId}
		  AND INTERSUBID LIKE '%'||#{userInterSubId}
		  AND (ADDRGUID LIKE '%'||#{addrGuId1} OR ADDRGUID IN (#{addrGuId2} ,#{addrGuId3}))
		  AND (INTERSUBID LIKE '%'||#{interSubId1} OR INTERSUBID IN (#{interSubId2} ,#{interSubId3}))
		  AND (#{minNum}<=MINNUM AND MAXNUM<=#{maxNum})
		  AND (TO_DATE(#{minMeetDate}, 'YYYY-MM-DD')<=MEETDATE AND MEETDATE<=TO_DATE(#{maxMeetDate}, 'YYYY-MM-DD'))
		  AND MOOD LIKE '%'||#{moodId}||'%'
		  AND LIMITGRADE>=#{limitGrade}
		  AND DRINK LIKE '%'||#{drinkId}||'%'
		  AND SAMEGENDER LIKE '%'||#{sameGenderId}||'%'
		)
		WHERE (6*#{pageNum}-5) <= POSTNUM AND POSTNUM < (6*#{pageNum}+1)
	]]>
	</select>
	
	<select id="mainHotList" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		    SELECT POSTID, USERID, NICKNAME, TITLE, CONTENTS, MEETDATE, ADDRSINAME, ADDRGUNAME, URL, URLBAD
		    FROM POST_VIEW
		    WHERE MEETDATE>=SYSDATE
		      AND FN_POST_IS_ACCEPTED(POSTID)=0
		      AND INTERMAINID=(SELECT INTERMAINID
		                        FROM
		                        (
		                            SELECT IM.INTERMAINID, RANK() OVER(ORDER BY COUNT(*)) AS RANK
		                            FROM POST P JOIN INTEREST_SUB "IS" ON P.INTERSUBID="IS".INTERSUBID
		                                        JOIN INTEREST_MAIN IM ON "IS".INTERMAINID=IM.INTERMAINID
		                            WHERE P.MEETDATE>=SYSDATE
		                            GROUP BY IM.INTERMAINID
		                            ORDER BY RANK() OVER(ORDER BY COUNT(*))
		                        )
		                        WHERE ROWNUM=1)
		    ORDER BY MEETDATE DESC
		)
		WHERE ROWNUM <=5
	]]>
	</select>
	
	<select id="mainRecommendList" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT POSTID, USERID, NICKNAME, TITLE, CONTENTS, MEETDATE, ADDRSINAME, ADDRGUNAME, URL, URLBAD
		FROM
		(
		    SELECT *
		    FROM POST_VIEW 
		    WHERE MEETDATE>=SYSDATE
		      AND FN_POST_IS_ACCEPTED(POSTID)=0
		    ORDER BY FN_CAL_RANK(POSTID, #{userId}, '||') DESC, MEETDATE DESC
		)
		WHERE ROWNUM <=5
	]]>
	</select>

	<select id="mainApproachingList" resultType="com.test.mybatis.PostDTO">
	<![CDATA[
		SELECT *
		FROM
		(
		    SELECT POSTID, USERID, NICKNAME, TITLE, CONTENTS, MEETDATE, ADDRSINAME, ADDRGUNAME, URL, URLBAD
		    FROM POST_VIEW PV
		    WHERE FN_POST_IS_ACCEPTED(POSTID)=0
		      AND MEETDATE>=SYSDATE
		    ORDER BY MEETDATE DESC
		)
		WHERE ROWNUM<=5
	]]>
	</select>
	
	<select id="myReviewList" resultType="com.test.mybatis.PostDTO">
		SELECT POSTID, URL, NICKNAME, TITLE, CONTENTS, MEETDATE, ADDRSINAME, ADDRGUNAME, FN_USER_POST_STATUS(#{userId}, POSTID) AS POSTSTATUS
		FROM 
		(
			SELECT  P.POSTID AS POSTID, PT.URL AS URL, E.NICKNAME AS NICKNAME, P.TITLE AS TITLE, P.CONTENTS AS CONTENTS, P.MEETDATE AS MEETDATE, S.ADDRSINAME AS ADDRSINAME, G.ADDRGUNAME AS ADDRGUNAME, RANK() OVER(ORDER BY MEETDATE DESC) AS NUM
			FROM USER_ESSENTIAL E JOIN POST P
					ON E.USERID =P.USERID
					JOIN ADDR_GU G
					ON P.ADDRGUID= G.ADDRGUID
					JOIN ADDR_SI S
					ON G.ADDRSIID = S.ADDRSIID
			        JOIN USER_BADGE_LOG UBL
			        ON E.BADGELOGID = UBL.BADGELOGID
			        JOIN POINT PT
			        ON UBL.BADGEPOINTID = PT.BADGEPOINTID
					WHERE E.USERID = #{userId}
			        ORDER BY MEETDATE DESC
		)
		<!-- <![CDATA[ WHERE NUM>=1 AND NUM <=6 ]]> -->
	</select>
	
	<select id="reviewList" resultType="com.test.mybatis.PostDTO">
		SELECT POSTID,USERID, URL, NICKNAME, TITLE, CONTENTS, MEETDATE, ADDRSINAME,ADDRGUNAME,FN_USER_POST_STATUS(#{userId}, POSTID) AS POSTSTATUS
		FROM
		(
			SELECT J.USERID AS USERID, E.NICKNAME AS NICKNAME, PT.URL AS URL, P.TITLE AS TITLE, P.CONTENTS AS CONTENTS, P.MEETDATE AS MEETDATE, SI.ADDRSINAME AS ADDRSINAME, G.ADDRGUNAME AS ADDRGUNAME,P.POSTID AS POSTID, RANK() OVER(ORDER BY MEETDATE DESC) AS NUM
			FROM POST P 
			JOIN JOIN J
			ON P.POSTID = J.POSTID
			JOIN STATUS S
			ON J.STATUSID = S.STATUSID
			JOIN USER_ESSENTIAL E
			ON P.USERID = E.USERID
			JOIN ADDR_GU G
			ON P.ADDRGUID = G.ADDRGUID
			JOIN ADDR_SI SI
			ON G.ADDRSIID = SI.ADDRSIID
	        JOIN USER_BADGE_LOG UBL
	        ON E.BADGELOGID = UBL.BADGELOGID
	        JOIN POINT PT
	        ON UBL.BADGEPOINTID = PT.BADGEPOINTID
			WHERE J.USERID = #{userId} AND E.USERID NOT IN(#{userId})
		)
		<![CDATA[ WHERE NUM>=1 AND NUM <=6 ]]>
	</select>
	
	<select id="hostReview" resultType="com.test.mybatis.PostDTO">
		SELECT J.USERID AS USERID,E.NICKNAME AS NICKNAME,PT.URL AS URL, RANK() OVER(ORDER BY J.USERID) AS NUM
		FROM JOIN J
		JOIN USER_ESSENTIAL E
		ON J.USERID = E.USERID
		JOIN USER_BADGE_LOG UBL
		ON E.BADGELOGID = UBL.BADGELOGID
		JOIN POINT PT
		ON UBL.BADGEPOINTID = PT.BADGEPOINTID
		WHERE J.POSTID=#{postId}
		ORDER BY NUM
	</select>
	
	<select id="guestReview" resultType="com.test.mybatis.PostDTO">
		SELECT E.USERID AS USERID, E.NICKNAME AS NICKNAME, PT.URL AS URL, 0 AS NUM
		FROM POST P
		JOIN USER_ESSENTIAL E
		ON P.USERID = E.USERID
		JOIN USER_BADGE_LOG UBL
		ON E.BADGELOGID = UBL.BADGELOGID
		JOIN POINT PT
		ON UBL.BADGEPOINTID = PT.BADGEPOINTID
		WHERE P.POSTID = #{postId}
		UNION
		SELECT J.USERID AS USERID,E.NICKNAME AS NICKNAME,PT.URL AS URL, RANK() OVER(ORDER BY J.USERID) AS NUM
		FROM JOIN J
		JOIN USER_ESSENTIAL E
		ON J.USERID = E.USERID
		JOIN USER_BADGE_LOG UBL
		ON E.BADGELOGID = UBL.BADGELOGID
		JOIN POINT PT
		ON UBL.BADGEPOINTID = PT.BADGEPOINTID
		WHERE J.POSTID=#{postId}
		ORDER BY NUM
	</select>
	
	
	
	<!-- 조현우 제작 -->
	<select id="searchPostIdList" resultType="com.test.mybatis.PostDTO">
		SELECT POSTID
		FROM POST
		WHERE USERID = #{userId}
	</select>
	
	<select id="postlistCheck" resultType="java.lang.Integer">
		SELECT FN_USER_POST_STATUS(#{userId}, #{postId}) AS POSTSTATUS
		FROM DUAL
	</select>
	

</mapper>
