CREATE OR REPLACE VIEW USERADDR_VIEW
AS
SELECT A.ID ,E.USERID, E.NICKNAME, G.ADDRGUNAME ,S.ADDRSINAME, G.ADDRGUID, S.ADDRSIID
FROM USER_ESSENTIAL E LEFT JOIN USER_ADDR A   
    ON E.USERID = A.USERID
LEFT JOIN  ADDR_GU G
    ON A.ADDRGUID = G.ADDRGUID
LEFT JOIN  ADDR_SI S
    ON G.ADDRSIID = S.ADDRSIID;
    
CREATE OR REPLACE VIEW USERINTER_VIEW
AS
SELECT I.ID ,E.USERID, E.NICKNAME, S.INTERSUBNAME ,M.INTERMAINNAME, M.INTERMAINID,S.INTERSUBID
FROM USER_ESSENTIAL E LEFT JOIN USER_INTEREST I   
    ON E.USERID = I.USERID
LEFT JOIN  INTEREST_SUB S
    ON I.INTERSUBID = S.INTERSUBID
LEFT JOIN  INTEREST_MAIN M
    ON S.INTERMAINID = M.INTERMAINID;
    
CREATE OR REPLACE VIEW JOIN_VIEW
AS
SELECT P.POSTID POSTID, J.JOINID JOINID, U.USERID USERID, P.URL URL, U.NICKNAME NICKNAME, J.JOINDATE JOINDATE, J.CONTENTS CONTENTS, D.JOINID DELJOIN, J.STATUSID STATUSID
FROM POST P JOIN JOIN J
ON P.POSTID = J.POSTID
LEFT JOIN USER_ESSENTIAL U 
ON J.USERID = U.USERID
LEFT JOIN USER_BADGE_LOG L
ON U.BADGELOGID = L.BADGELOGID
LEFT JOIN POINT P
ON L.BADGEPOINTID = P.BADGEPOINTID
LEFT JOIN DEL_JOIN D
ON J.JOINID = D.JOINID;


CREATE OR REPLACE VIEW REPLY_VIEW
AS
SELECT P.POSTID POSTID, J.JOINID JOINID,R.REPLYID REPLYID
, CASE WHEN R.USERTYPEID = 'RU00001' THEN P.USERID WHEN R.USERTYPEID = 'RU00002' THEN J.USERID ELSE '없음' END USERID
,P.URL URL
,CASE WHEN R.USERTYPEID = 'RU00001' THEN (SELECT NICKNAME FROM USER_ESSENTIAL WHERE USERID = P.USERID) WHEN R.USERTYPEID = 'RU00002' THEN U.NICKNAME ELSE '없음' END
 NICKNAME
, R.REPLYDATE JOINDATE, R.CONTENTS CONTENTS,D.ID DELJOIN,R.USERTYPEID USERTYPEID
FROM POST P JOIN JOIN J
ON P.POSTID = J.POSTID
LEFT JOIN USER_ESSENTIAL U 
ON J.USERID = U.USERID
LEFT JOIN USER_BADGE_LOG L
ON U.BADGELOGID = L.BADGELOGID
LEFT JOIN POINT P
ON L.BADGEPOINTID = P.BADGEPOINTID
JOIN REPLY R
ON J.JOINID = R.JOINID
LEFT JOIN DEL_REPLY D
ON R.REPLYID = D.REPLYID;



CREATE OR REPLACE VIEW USER_BADGE_VIEW
AS
SELECT BL.USERID, MAX(BL.BADGELOGID) AS BADGELOGID, P.BADGEPOINTNAME, PC.BADGEPOINTCATEID, P.URL
FROM USER_BADGE_LOG BL LEFT JOIN REVIEW RV ON BL.EXPIRATIONREVIEWID=RV.REVIEWID
                            JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID
                            JOIN POINT_CATE PC ON P.BADGEPOINTCATEID=PC.BADGEPOINTCATEID
WHERE (ADD_MONTHS(RV.REVIEWDATE,12) >= SYSDATE OR PC.BADGEPOINTCATEID='BC00004')
GROUP BY BL.BADGEPOINTID, BL.USERID, P.BADGEPOINTNAME, PC.BADGEPOINTCATEID, P.URL
ORDER BY USERID;



CREATE OR REPLACE VIEW POST_VIEW2 
AS
SELECT P.POSTID, P.USERID, UE.NICKNAME, P.TITLE, P.CONTENTS                                                   -- 개설자 ID, 닉네임, 개설모임 제목, 내용, 개설자 닉네임
     , (SELECT ROUND(AVG(GRADE), 1) FROM REVIEW WHERE TAKEUSERID=P.USERID) GRADE                    --개설자 평점
     , (SELECT ID FROM USER_CERTIFICATION WHERE USERID=P.USERID AND CERTIID='CT00001') TELCERTIID   -- 휴대폰 인증여부
     , (SELECT ID FROM USER_CERTIFICATION WHERE USERID=P.USERID AND CERTIID='CT00002') EMAILCERTIID -- 이메일 인증여부
     , PO.URL            -- 가입시, 활동시 활동 뱃지가 업데이트 되고 로그인시 뱃지 만료를 확인하는걸 믿고 그냥 url만 써줌
     , (SELECT max(URL)        
        FROM
        (
            SELECT USERID, URL
            FROM USER_BADGE_VIEW
            WHERE BADGEPOINTCATEID='BC00002'
            ORDER BY DBMS_RANDOM.VALUE
        )
        WHERE USERID=P.USERID
          AND ROWNUM=1) AS BADURL -- 개설자의 나쁜 뱃지중 랜덤 1개의 URL, 없으면 null
     , G.ADDRSIID, S.ADDRSINAME, P.ADDRGUID, G.ADDRGUNAME, P.ADDRDETAIL                     -- 만남 장소(시) ID, 이름 / 만남장소(구) ID, 이름 / 만남장소 디테일
     , "IS".INTERMAINID, IM.INTERMAINNAME, P.INTERSUBID, "IS".INTERSUBNAME, P.INTERDETAIL   -- 관심사(대) ID, 이름 / 관심사(소) ID, 이름 / 관심사 디테일
     , P.MINNUM, P.MAXNUM                                                                   -- 최소인원, 최대인원
     , P.POSTDATE, P.MEETDATE                                                               -- 게시일, 만남일
     , P.SAMEGENDERID SAMEGENDER, P.DRINKID DRINK, P.LIMITGRADE LIMITGRADE, P.MOODID MOOD   -- 동성여부, 음주여부, 입장제한평점, 분위기
FROM POST P JOIN ADDR_GU G ON P.ADDRGUID=G.ADDRGUID
            JOIN ADDR_SI S ON G.ADDRSIID=S.ADDRSIID
            JOIN INTEREST_SUB "IS" ON P.INTERSUBID="IS".INTERSUBID
            JOIN INTEREST_MAIN IM ON "IS".INTERMAINID=IM.INTERMAINID
            JOIN USER_ESSENTIAL UE ON P.USERID=UE.USERID
            JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
            JOIN POINT PO ON BL.BADGEPOINTID = PO.BADGEPOINTID;


CREATE OR REPLACE VIEW USERBADGELOG_VIEW 
AS
SELECT BL.USERID, MAX(BL.BADGELOGID) AS BADGELOGID, P.BADGEPOINTNAME,P.BADGEPOINTID
FROM USER_BADGE_LOG BL LEFT JOIN REVIEW RV ON BL.EXPIRATIONREVIEWID=RV.REVIEWID
                            JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID
WHERE (ADD_MONTHS(RV.REVIEWDATE,12) >= SYSDATE OR SUBSTR(BL.BADGEPOINTID,3) >= 11)
GROUP BY BL.BADGEPOINTID, BL.USERID, P.BADGEPOINTNAME,P.BADGEPOINTID
ORDER BY USERID;




CREATE OR REPLACE VIEW MSG_VIEW 
AS
SELECT M.MESSAGEID,M.CONTENTS,M.GIVEUSERID,M.TAKEUSERID,M.SENDDATE,M.CHECKDATE
        ,(SELECT COUNT(*)
            FROM DEL_MESSAGE
            WHERE messageID = M.messageID) AS CH
FROM MESSAGE M;



CREATE OR REPLACE VIEW POST_VIEW 
AS
SELECT P.POSTID, P.USERID, UE.NICKNAME, P.TITLE, P.CONTENTS                                                   -- 개설자 ID, 닉네임, 개설모임 제목, 내용, 개설자 닉네임
     , (SELECT ROUND(AVG(GRADE), 1) FROM REVIEW WHERE TAKEUSERID=P.USERID) GRADE                    --개설자 평점
     , (SELECT ID FROM USER_CERTIFICATION WHERE USERID=P.USERID AND CERTIID='CT00001') TELCERTIID   -- 휴대폰 인증여부
     , (SELECT ID FROM USER_CERTIFICATION WHERE USERID=P.USERID AND CERTIID='CT00002') EMAILCERTIID -- 이메일 인증여부
     , PO.URL            -- 가입시, 활동시 활동 뱃지가 업데이트 되고 로그인시 뱃지 만료를 확인하는걸 믿고 그냥 url만 써줌
     , FN_PROFILE_BAD_BADGE(P.USERID) AS URLBAD -- 개설자의 나쁜 뱃지중 랜덤 1개의 URL, 없으면 null
     , G.ADDRSIID, S.ADDRSINAME, P.ADDRGUID, G.ADDRGUNAME, P.ADDRDETAIL                     -- 만남 장소(시) ID, 이름 / 만남장소(구) ID, 이름 / 만남장소 디테일
     , "IS".INTERMAINID, IM.INTERMAINNAME, P.INTERSUBID, "IS".INTERSUBNAME, P.INTERDETAIL   -- 관심사(대) ID, 이름 / 관심사(소) ID, 이름 / 관심사 디테일
     , P.MINNUM, P.MAXNUM                                                                   -- 최소인원, 최대인원
     , P.POSTDATE, P.MEETDATE                                                               -- 게시일, 만남일
     , P.SAMEGENDERID SAMEGENDER, P.DRINKID DRINK, P.LIMITGRADE LIMITGRADE, P.MOODID MOOD   -- 동성여부, 음주여부, 입장제한평점, 분위기
FROM POST P JOIN ADDR_GU G ON P.ADDRGUID=G.ADDRGUID
            JOIN ADDR_SI S ON G.ADDRSIID=S.ADDRSIID
            JOIN INTEREST_SUB "IS" ON P.INTERSUBID="IS".INTERSUBID
            JOIN INTEREST_MAIN IM ON "IS".INTERMAINID=IM.INTERMAINID
            JOIN USER_ESSENTIAL UE ON P.USERID=UE.USERID
            JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
            JOIN POINT PO ON BL.BADGEPOINTID = PO.BADGEPOINTID;
            
            


CREATE OR REPLACE VIEW USER_REPRESENTATION_BADGE 
AS
SELECT UE.USERID, UE.BADGELOGID, UE.NICKNAME, BL.BADGEPOINTID ,P.BADGEPOINTNAME
FROM USER_ESSENTIAL UE JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID;




CREATE OR REPLACE VIEW END_REVIEW_VIEW 
AS
SELECT R.TAKEUSERID AS USERID, R.REVIEWID, R.POSTID, R.GIVEUSERID, R.TAKEUSERID,R.GRADE, R.REVIEWDATE, RS.CONTENTS, RS.BADGEPOINTID, P.URL AS TAKEURL
FROM REVIEW R, REVIEW_SUB RS, POINT P
WHERE RS.REVIEWID(+) = R.REVIEWID AND P.BADGEPOINTID(+) = RS.BADGEPOINTID
ORDER BY POSTID;




CREATE OR REPLACE VIEW VIEW_HOST_LIST 
AS
SELECT J.USERID AS USERID, J.POSTID ,E.NICKNAME AS NICKNAME,PT.URL AS URL, RANK() OVER(ORDER BY J.USERID) AS NUM
		FROM JOIN J
		JOIN USER_ESSENTIAL E
		ON J.USERID = E.USERID
		JOIN USER_BADGE_LOG UBL
		ON E.BADGELOGID = UBL.BADGELOGID
		JOIN POINT PT
		ON UBL.BADGEPOINTID = PT.BADGEPOINTID
        
		ORDER BY POSTID;
        



CREATE OR REPLACE VIEW VIEW_CHAMGA_LIST 
AS SELECT J.POSTID, J.USERID AS USERID,E.NICKNAME AS NICKNAME,PT.URL AS URL, RANK() OVER(ORDER BY J.USERID) AS NUM
		FROM JOIN J
		JOIN USER_ESSENTIAL E
		ON J.USERID = E.USERID
		JOIN USER_BADGE_LOG UBL
		ON E.BADGELOGID = UBL.BADGELOGID
		JOIN POINT PT
		ON UBL.BADGEPOINTID = PT.BADGEPOINTID
		ORDER BY POSTID;
        
        


CREATE OR REPLACE VIEW POINT_LOG_VIEW 
AS
SELECT RV.TAKEUSERID,RV.GIVEUSERID, RS.BADGEPOINTID ,RV.REVIEWDATE, ADD_MONTHS(RV.REVIEWDATE,12) AS EXPIRATIONDATE
FROM  REVIEW_SUB RS JOIN POINT P ON RS.BADGEPOINTID = P.BADGEPOINTID
        JOIN REVIEW RV ON RV.REVIEWID = RS.REVIEWID
WHERE  (ADD_MONTHS(RV.REVIEWDATE,12) > SYSDATE);




CREATE OR REPLACE VIEW VIEW_RP_BADGE 
AS
SELECT UE.USERID, UE.BADGELOGID, BL.BADGEPOINTID ,P.BADGEPOINTNAME
FROM USER_ESSENTIAL UE JOIN USER_BADGE_LOG BL ON UE.BADGELOGID=BL.BADGELOGID
JOIN POINT P ON BL.BADGEPOINTID=P.BADGEPOINTID;



CREATE OR REPLACE VIEW VIEW_REVIEW_ENTRY 
AS
SELECT P.POSTID, P.USERID, R.GIVEUSERID, R.GRADE, R.CONTENTS, R.TAKEURL
FROM POST P, END_REVIEW_VIEW R
WHERE R.POSTID(+) = P.POSTID
ORDER BY P.POSTID;



CREATE OR REPLACE VIEW VIEW_SUB_URL 
AS
SELECT RS.REVIEWID, RS.BADGEPOINTID, P.URL, RS.CONTENTS
FROM REVIEW_SUB RS, POINT P
WHERE RS.BADGEPOINTID = P.BADGEPOINTID;



CREATE OR REPLACE VIEW VIEW_REVIEW_NICK 
AS
"SELECT R.REVIEWID, R.POSTID, R.GIVEUSERID, R.TAKEUSERID, U.NICKNAME, R.GRADE
FROM REVIEW R, USER_ESSENTIAL U
WHERE R.GIVEUSERID = U.USERID"


CREATE OR REPLACE VIEW VIEW_DAEPO_BADGE_URL 
AS
SELECT V.USERID, V.BADGEPOINTID, V.BADGEPOINTNAME, P.URL
FROM VIEW_RP_BADGE V, POINT P
WHERE P.BADGEPOINTID = V.BADGEPOINTID;



CREATE OR REPLACE VIEW VIEW_REVIEW_INQURY 
AS
SELECT R.REVIEWID, R.TAKEUSERID AS USERID, R.GIVEUSERID, R.NICKNAME AS GIVEUSERNAME, VU.URL AS GIVEUSERURL, R.POSTID, R.GRADE, RS.BADGEPOINTID AS BADGEPOINTID, RS.URL AS TAKEURL, RS.CONTENTS AS CONTENTS
FROM VIEW_REVIEW_NICK R, VIEW_SUB_URL RS, VIEW_DAEPO_BADGE_URL VU
WHERE RS.REVIEWID(+) = R.REVIEWID AND VU.USERID = R.GIVEUSERID
ORDER BY TAKEUSERID, REVIEWID;



CREATE OR REPLACE VIEW VIEW_POST_ALL 
AS
SELECT J.POSTID, P.USERID AS HOST, J.USERID
FROM JOIN J, POST P
WHERE J.POSTID = P.POSTID
ORDER BY POSTID;




CREATE OR REPLACE VIEW VIEW_RP_BADGE_URL 
AS
SELECT V.USERID, P.URL
FROM VIEW_RP_BADGE V, POINT P
WHERE V.BADGEPOINTID = P.BADGEPOINTID;



CREATE OR REPLACE VIEW VIEW_POST_JOIN_DATA 
AS
SELECT PA.POSTID, PA.HOST, PA.USERID, U.NICKNAME,BU.URL
FROM VIEW_POST_ALL PA, VIEW_RP_BADGE_URL BU, USER_ESSENTIAL U
WHERE UPPER(PA.USERID)=UPPER(BU.USERID) AND UPPER(PA.USERID) = UPPER(U.USERID);



CREATE OR REPLACE VIEW VIEW_REVIEW_BAISC
AS
SELECT R.REVIEWID, R.POSTID, R.TAKEUSERID, R.GIVEUSERID, R.GRADE, S.CONTENTS, S.BADGEPOINTID, P.URL
FROM REVIEW R, REVIEW_SUB S, POINT P
WHERE R.REVIEWID = S.REVIEWID(+) AND S.BADGEPOINTID = P.BADGEPOINTID(+)
ORDER BY R.POSTID, R.TAKEUSERID;



CREATE OR REPLACE VIEW BADGE_VIEW 
AS
SELECT UV.USERID, UV.BADGELOGID,UV.BADGEPOINTNAME,UV.BADGEPOINTID,R.REVIEWDATE
FROM USERBADGELOG_VIEW UV JOIN USER_BADGE_LOG UB ON Uv.BADGELOGID = UB.BADGELOGID
                            LEFT JOIN REVIEW R ON UB.GETREVIEWID = R.REVIEWID;
